/* Generated by Cython 0.29.1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_1"
#define CYTHON_HEX_VERSION 0x001D01F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1/(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__primitiv___function
#define __PYX_HAVE_API__primitiv___function
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <vector>
#include "primitiv/device.h"
#include "primitiv/shape.h"
#include "primitiv/tensor.h"
#include "primitiv/graph.h"
#include <stdint.h>
#include "primitiv/initializer.h"
#include "primitiv/parameter.h"
#include "primitiv/functions.h"
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "primitiv/_function.pyx",
  "primitiv/_initializer.pxd",
  "primitiv/_graph.pxd",
  "primitiv/_shape.pxd",
  "__init__.pxd",
  "primitiv/utils.pxd",
  "stringsource",
  "primitiv/_device.pxd",
  "primitiv/_tensor.pxd",
  "primitiv/_parameter.pxd",
  "type.pxd",
};

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8primitiv_7_device_Device;
struct __pyx_obj_8primitiv_6_shape_Shape;
struct __pyx_obj_8primitiv_7_tensor_Tensor;
struct __pyx_obj_8primitiv_6_graph_Node;
struct __pyx_obj_8primitiv_6_graph_Graph;
struct __pyx_obj_8primitiv_12_initializer_Initializer;
struct __pyx_obj_8primitiv_10_parameter_ParameterStatistics;
struct __pyx_obj_8primitiv_10_parameter_Parameter;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "primitiv/_device.pxd":6
 * 
 * 
 * cdef class Device:             # <<<<<<<<<<<<<<
 *     cdef CppDevice *wrapped
 *     cdef object __weakref__
 */
struct __pyx_obj_8primitiv_7_device_Device {
  PyObject_HEAD
  struct __pyx_vtabstruct_8primitiv_7_device_Device *__pyx_vtab;
  primitiv::Device *wrapped;
  PyObject *__weakref__;
};


/* "primitiv/_shape.pxd":33
 * 
 * 
 * cdef class Shape:             # <<<<<<<<<<<<<<
 *     cdef CppShape wrapped
 *     @staticmethod
 */
struct __pyx_obj_8primitiv_6_shape_Shape {
  PyObject_HEAD
  struct __pyx_vtabstruct_8primitiv_6_shape_Shape *__pyx_vtab;
  primitiv::Shape wrapped;
};


/* "primitiv/_tensor.pxd":30
 * 
 * 
 * cdef class Tensor:             # <<<<<<<<<<<<<<
 *     cdef CppTensor *wrapped
 *     cdef bool del_required
 */
struct __pyx_obj_8primitiv_7_tensor_Tensor {
  PyObject_HEAD
  struct __pyx_vtabstruct_8primitiv_7_tensor_Tensor *__pyx_vtab;
  primitiv::Tensor *wrapped;
  bool del_required;
  PyObject *__weakref__;
};


/* "primitiv/_graph.pxd":38
 * 
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef CppNode wrapped
 * 
 */
struct __pyx_obj_8primitiv_6_graph_Node {
  PyObject_HEAD
  primitiv::Node wrapped;
};


/* "primitiv/_graph.pxd":42
 * 
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 *     cdef CppGraph *wrapped
 *     cdef object __weakref__
 */
struct __pyx_obj_8primitiv_6_graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_8primitiv_6_graph_Graph *__pyx_vtab;
  primitiv::Graph *wrapped;
  PyObject *__weakref__;
};


/* "primitiv/_initializer.pxd":10
 * 
 * 
 * cdef class Initializer:             # <<<<<<<<<<<<<<
 *     cdef CppInitializer *wrapped
 *     cdef CppInitializer *wrapped_newed
 */
struct __pyx_obj_8primitiv_12_initializer_Initializer {
  PyObject_HEAD
  primitiv::Initializer *wrapped;
  primitiv::Initializer *wrapped_newed;
};


/* "primitiv/_parameter.pxd":32
 * 
 * 
 * cdef class ParameterStatistics:             # <<<<<<<<<<<<<<
 *     cdef object param_ref
 * 
 */
struct __pyx_obj_8primitiv_10_parameter_ParameterStatistics {
  PyObject_HEAD
  PyObject *param_ref;
};


/* "primitiv/_parameter.pxd":36
 * 
 * 
 * cdef class Parameter:             # <<<<<<<<<<<<<<
 *     cdef CppParameter *wrapped
 *     cdef object __weakref__
 */
struct __pyx_obj_8primitiv_10_parameter_Parameter {
  PyObject_HEAD
  struct __pyx_vtabstruct_8primitiv_10_parameter_Parameter *__pyx_vtab;
  primitiv::Parameter *wrapped;
  PyObject *__weakref__;
  struct __pyx_obj_8primitiv_10_parameter_ParameterStatistics *stats;
};



/* "primitiv/_device.pxd":6
 * 
 * 
 * cdef class Device:             # <<<<<<<<<<<<<<
 *     cdef CppDevice *wrapped
 *     cdef object __weakref__
 */

struct __pyx_vtabstruct_8primitiv_7_device_Device {
  void (*register_wrapper)(primitiv::Device *, struct __pyx_obj_8primitiv_7_device_Device *);
  struct __pyx_obj_8primitiv_7_device_Device *(*get_wrapper)(primitiv::Device *);
};
static struct __pyx_vtabstruct_8primitiv_7_device_Device *__pyx_vtabptr_8primitiv_7_device_Device;


/* "primitiv/_shape.pxd":33
 * 
 * 
 * cdef class Shape:             # <<<<<<<<<<<<<<
 *     cdef CppShape wrapped
 *     @staticmethod
 */

struct __pyx_vtabstruct_8primitiv_6_shape_Shape {
  struct __pyx_obj_8primitiv_6_shape_Shape *(*get_wrapper)(primitiv::Shape);
};
static struct __pyx_vtabstruct_8primitiv_6_shape_Shape *__pyx_vtabptr_8primitiv_6_shape_Shape;


/* "primitiv/_tensor.pxd":30
 * 
 * 
 * cdef class Tensor:             # <<<<<<<<<<<<<<
 *     cdef CppTensor *wrapped
 *     cdef bool del_required
 */

struct __pyx_vtabstruct_8primitiv_7_tensor_Tensor {
  void (*register_wrapper)(primitiv::Tensor *, struct __pyx_obj_8primitiv_7_tensor_Tensor *);
  struct __pyx_obj_8primitiv_7_tensor_Tensor *(*get_wrapper)(primitiv::Tensor *);
  struct __pyx_obj_8primitiv_7_tensor_Tensor *(*get_wrapper_with_new)(primitiv::Tensor *);
};
static struct __pyx_vtabstruct_8primitiv_7_tensor_Tensor *__pyx_vtabptr_8primitiv_7_tensor_Tensor;


/* "primitiv/_graph.pxd":42
 * 
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 *     cdef CppGraph *wrapped
 *     cdef object __weakref__
 */

struct __pyx_vtabstruct_8primitiv_6_graph_Graph {
  void (*register_wrapper)(primitiv::Graph *, struct __pyx_obj_8primitiv_6_graph_Graph *);
  struct __pyx_obj_8primitiv_6_graph_Graph *(*get_wrapper)(primitiv::Graph *);
};
static struct __pyx_vtabstruct_8primitiv_6_graph_Graph *__pyx_vtabptr_8primitiv_6_graph_Graph;


/* "primitiv/_parameter.pxd":36
 * 
 * 
 * cdef class Parameter:             # <<<<<<<<<<<<<<
 *     cdef CppParameter *wrapped
 *     cdef object __weakref__
 */

struct __pyx_vtabstruct_8primitiv_10_parameter_Parameter {
  void (*register_wrapper)(primitiv::Parameter *, struct __pyx_obj_8primitiv_10_parameter_Parameter *);
  struct __pyx_obj_8primitiv_10_parameter_Parameter *(*get_wrapper)(primitiv::Parameter *);
  struct __pyx_obj_8primitiv_10_parameter_Parameter *(*get_wrapper_with_new)(primitiv::Parameter *);
};
static struct __pyx_vtabstruct_8primitiv_10_parameter_Parameter *__pyx_vtabptr_8primitiv_10_parameter_Parameter;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'primitiv._device' */
static PyTypeObject *__pyx_ptype_8primitiv_7_device_Device = 0;

/* Module declarations from 'primitiv._shape' */
static PyTypeObject *__pyx_ptype_8primitiv_6_shape_Shape = 0;
static CYTHON_INLINE struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_f_8primitiv_6_shape_normShape(PyObject *); /*proto*/

/* Module declarations from 'primitiv._tensor' */
static PyTypeObject *__pyx_ptype_8primitiv_7_tensor_Tensor = 0;

/* Module declarations from 'primitiv._graph' */
static PyTypeObject *__pyx_ptype_8primitiv_6_graph_Node = 0;
static PyTypeObject *__pyx_ptype_8primitiv_6_graph_Graph = 0;
static CYTHON_INLINE struct __pyx_obj_8primitiv_6_graph_Node *__pyx_f_8primitiv_6_graph_wrapNode(primitiv::Node); /*proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'primitiv._initializer' */
static PyTypeObject *__pyx_ptype_8primitiv_12_initializer_Initializer = 0;

/* Module declarations from 'primitiv._parameter' */
static PyTypeObject *__pyx_ptype_8primitiv_10_parameter_ParameterStatistics = 0;
static PyTypeObject *__pyx_ptype_8primitiv_10_parameter_Parameter = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'primitiv.utils' */
static CYTHON_INLINE std::vector<float>  __pyx_f_8primitiv_5utils_ndarrays_to_vector(PyObject *); /*proto*/
static CYTHON_INLINE primitiv::Device *__pyx_f_8primitiv_5utils_get_cpp_device(struct __pyx_obj_8primitiv_7_device_Device *); /*proto*/
static CYTHON_INLINE primitiv::Graph *__pyx_f_8primitiv_5utils_get_cpp_graph(struct __pyx_obj_8primitiv_6_graph_Graph *); /*proto*/

/* Module declarations from 'primitiv._function' */
static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *); /*proto*/
static std::vector<unsigned int>  __pyx_convert_vector_from_py_unsigned_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &); /*proto*/
#define __Pyx_MODULE_NAME "primitiv._function"
extern int __pyx_module_is_main_primitiv___function;
int __pyx_module_is_main_primitiv___function = 0;

/* Implementation of 'primitiv._function' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_F[] = "F";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_mu[] = "mu";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_sd[] = "sd";
static const char __pyx_k_xs[] = "xs";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_elu[] = "elu";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_pow[] = "pow";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k_vec[] = "vec";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_pick[] = "pick";
static const char __pyx_k_rate[] = "rate";
static const char __pyx_k_relu[] = "relu";
static const char __pyx_k_selu[] = "selu";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_tanh[] = "tanh";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_batch[] = "batch";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_lrelu[] = "lrelu";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_param[] = "param";
static const char __pyx_k_prelu[] = "prelu";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_slice[] = "slice";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_concat[] = "concat";
static const char __pyx_k_conv2d[] = "conv2d";
static const char __pyx_k_device[] = "device";
static const char __pyx_k_gumbel[] = "gumbel";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_matmul[] = "matmul";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_normal[] = "normal";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_dropout[] = "dropout";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_flatten[] = "flatten";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_sigmoid[] = "sigmoid";
static const char __pyx_k_softmax[] = "softmax";
static const char __pyx_k_stride0[] = "stride0";
static const char __pyx_k_stride1[] = "stride1";
static const char __pyx_k_uniform[] = "uniform";
static const char __pyx_k_window0[] = "window0";
static const char __pyx_k_window1[] = "window1";
static const char __pyx_k_constant[] = "constant";
static const char __pyx_k_identity[] = "identity";
static const char __pyx_k_padding0[] = "padding0";
static const char __pyx_k_padding1[] = "padding1";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_softplus[] = "softplus";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_bernoulli[] = "bernoulli";
static const char __pyx_k_broadcast[] = "broadcast";
static const char __pyx_k_dilation0[] = "dilation0";
static const char __pyx_k_dilation1[] = "dilation1";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_functions[] = "functions";
static const char __pyx_k_logsumexp[] = "logsumexp";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_new_shape[] = "new_shape";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_parameter[] = "parameter";
static const char __pyx_k_raw_input[] = "raw_input";
static const char __pyx_k_transpose[] = "transpose";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_log_normal[] = "log_normal";
static const char __pyx_k_max_pool2d[] = "max_pool2d";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_get_default[] = "get_default";
static const char __pyx_k_log_softmax[] = "log_softmax";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_functions_cos[] = "functions.cos";
static const char __pyx_k_functions_elu[] = "functions.elu";
static const char __pyx_k_functions_exp[] = "functions.exp";
static const char __pyx_k_functions_log[] = "functions.log";
static const char __pyx_k_functions_pow[] = "functions.pow";
static const char __pyx_k_functions_sin[] = "functions.sin";
static const char __pyx_k_functions_sum[] = "functions.sum";
static const char __pyx_k_functions_tan[] = "functions.tan";
static const char __pyx_k_stop_gradient[] = "stop_gradient";
static const char __pyx_k_functions_copy[] = "functions.copy";
static const char __pyx_k_functions_mean[] = "functions.mean";
static const char __pyx_k_functions_ones[] = "functions.ones";
static const char __pyx_k_functions_pick[] = "functions.pick";
static const char __pyx_k_functions_relu[] = "functions.relu";
static const char __pyx_k_functions_selu[] = "functions.selu";
static const char __pyx_k_functions_sqrt[] = "functions.sqrt";
static const char __pyx_k_functions_tanh[] = "functions.tanh";
static const char __pyx_k_functions_batch[] = "functions.batch";
static const char __pyx_k_functions_input[] = "functions.input";
static const char __pyx_k_functions_lrelu[] = "functions.lrelu";
static const char __pyx_k_functions_prelu[] = "functions.prelu";
static const char __pyx_k_functions_slice[] = "functions.slice";
static const char __pyx_k_functions_zeros[] = "functions.zeros";
static const char __pyx_k_functions_concat[] = "functions.concat";
static const char __pyx_k_functions_conv2d[] = "functions.conv2d";
static const char __pyx_k_functions_matmul[] = "functions.matmul";
static const char __pyx_k_functions_random[] = "functions.random";
static const char __pyx_k_tensor_functions[] = "tensor_functions";
static const char __pyx_k_functions_dropout[] = "functions.dropout";
static const char __pyx_k_functions_flatten[] = "functions.flatten";
static const char __pyx_k_functions_reshape[] = "functions.reshape";
static const char __pyx_k_functions_sigmoid[] = "functions.sigmoid";
static const char __pyx_k_functions_softmax[] = "functions.softmax";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_functions_constant[] = "functions.constant";
static const char __pyx_k_functions_identity[] = "functions.identity";
static const char __pyx_k_functions_softplus[] = "functions.softplus";
static const char __pyx_k_primitiv__function[] = "primitiv._function";
static const char __pyx_k_functions_batch_sum[] = "functions.batch.sum";
static const char __pyx_k_functions_broadcast[] = "functions.broadcast";
static const char __pyx_k_functions_logsumexp[] = "functions.logsumexp";
static const char __pyx_k_functions_parameter[] = "functions.parameter";
static const char __pyx_k_functions_raw_input[] = "functions.raw_input";
static const char __pyx_k_functions_transpose[] = "functions.transpose";
static const char __pyx_k_functions_batch_mean[] = "functions.batch.mean";
static const char __pyx_k_functions_max_pool2d[] = "functions.max_pool2d";
static const char __pyx_k_t_has_incorrect_type[] = "`t` has incorrect type.";
static const char __pyx_k_tensor_functions_cos[] = "tensor_functions.cos";
static const char __pyx_k_tensor_functions_elu[] = "tensor_functions.elu";
static const char __pyx_k_tensor_functions_exp[] = "tensor_functions.exp";
static const char __pyx_k_tensor_functions_log[] = "tensor_functions.log";
static const char __pyx_k_tensor_functions_pow[] = "tensor_functions.pow";
static const char __pyx_k_tensor_functions_sin[] = "tensor_functions.sin";
static const char __pyx_k_tensor_functions_sum[] = "tensor_functions.sum";
static const char __pyx_k_tensor_functions_tan[] = "tensor_functions.tan";
static const char __pyx_k_data_contains_no_item[] = "`data` contains no item.";
static const char __pyx_k_functions_log_softmax[] = "functions.log_softmax";
static const char __pyx_k_softmax_cross_entropy[] = "softmax_cross_entropy";
static const char __pyx_k_tensor_functions_copy[] = "tensor_functions.copy";
static const char __pyx_k_tensor_functions_mean[] = "tensor_functions.mean";
static const char __pyx_k_tensor_functions_ones[] = "tensor_functions.ones";
static const char __pyx_k_tensor_functions_pick[] = "tensor_functions.pick";
static const char __pyx_k_tensor_functions_relu[] = "tensor_functions.relu";
static const char __pyx_k_tensor_functions_selu[] = "tensor_functions.selu";
static const char __pyx_k_tensor_functions_sqrt[] = "tensor_functions.sqrt";
static const char __pyx_k_tensor_functions_tanh[] = "tensor_functions.tanh";
static const char __pyx_k_primitiv__function_pyx[] = "primitiv/_function.pyx";
static const char __pyx_k_tensor_functions_batch[] = "tensor_functions.batch";
static const char __pyx_k_tensor_functions_input[] = "tensor_functions.input";
static const char __pyx_k_tensor_functions_lrelu[] = "tensor_functions.lrelu";
static const char __pyx_k_tensor_functions_prelu[] = "tensor_functions.prelu";
static const char __pyx_k_tensor_functions_slice[] = "tensor_functions.slice";
static const char __pyx_k_tensor_functions_zeros[] = "tensor_functions.zeros";
static const char __pyx_k_arrays_contains_no_item[] = "arrays contains no item";
static const char __pyx_k_data_has_incorrect_type[] = "`data` has incorrect type.";
static const char __pyx_k_functions_random_gumbel[] = "functions.random.gumbel";
static const char __pyx_k_functions_random_normal[] = "functions.random.normal";
static const char __pyx_k_functions_stop_gradient[] = "functions.stop_gradient";
static const char __pyx_k_tensor_functions_concat[] = "tensor_functions.concat";
static const char __pyx_k_tensor_functions_conv2d[] = "tensor_functions.conv2d";
static const char __pyx_k_tensor_functions_matmul[] = "tensor_functions.matmul";
static const char __pyx_k_tensor_functions_random[] = "tensor_functions.random";
static const char __pyx_k_functions_random_uniform[] = "functions.random.uniform";
static const char __pyx_k_tensor_functions_dropout[] = "tensor_functions.dropout";
static const char __pyx_k_tensor_functions_flatten[] = "tensor_functions.flatten";
static const char __pyx_k_tensor_functions_reshape[] = "tensor_functions.reshape";
static const char __pyx_k_tensor_functions_sigmoid[] = "tensor_functions.sigmoid";
static const char __pyx_k_tensor_functions_softmax[] = "tensor_functions.softmax";
static const char __pyx_k_functions_batch_normalize[] = "functions.batch.normalize";
static const char __pyx_k_tensor_functions_constant[] = "tensor_functions.constant";
static const char __pyx_k_tensor_functions_identity[] = "tensor_functions.identity";
static const char __pyx_k_tensor_functions_softplus[] = "tensor_functions.softplus";
static const char __pyx_k_x_or_k_has_incorrect_type[] = "`x` or `k` has incorrect type.";
static const char __pyx_k_functions_random_bernoulli[] = "functions.random.bernoulli";
static const char __pyx_k_tensor_functions_batch_sum[] = "tensor_functions.batch.sum";
static const char __pyx_k_tensor_functions_broadcast[] = "tensor_functions.broadcast";
static const char __pyx_k_tensor_functions_logsumexp[] = "tensor_functions.logsumexp";
static const char __pyx_k_tensor_functions_parameter[] = "tensor_functions.parameter";
static const char __pyx_k_tensor_functions_raw_input[] = "tensor_functions.raw_input";
static const char __pyx_k_tensor_functions_transpose[] = "tensor_functions.transpose";
static const char __pyx_k_functions_random_log_normal[] = "functions.random.log_normal";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_tensor_functions_batch_mean[] = "tensor_functions.batch.mean";
static const char __pyx_k_tensor_functions_max_pool2d[] = "tensor_functions.max_pool2d";
static const char __pyx_k_tensor_functions_log_softmax[] = "tensor_functions.log_softmax";
static const char __pyx_k_tensor_functions_random_gumbel[] = "tensor_functions.random.gumbel";
static const char __pyx_k_tensor_functions_random_normal[] = "tensor_functions.random.normal";
static const char __pyx_k_tensor_functions_stop_gradient[] = "tensor_functions.stop_gradient";
static const char __pyx_k_data_contains_other_objects_tha[] = "`data` contains other objects than numpy.ndarray.";
static const char __pyx_k_functions_softmax_cross_entropy[] = "functions.softmax_cross_entropy";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_tensor_functions_random_uniform[] = "tensor_functions.random.uniform";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_arrays_contains_different_shaped[] = "arrays contains different shaped ndarrays";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_tensor_functions_batch_normalize[] = "tensor_functions.batch.normalize";
static const char __pyx_k_tensor_functions_random_bernoull[] = "tensor_functions.random.bernoulli";
static const char __pyx_k_tensor_functions_random_log_norm[] = "tensor_functions.random.log_normal";
static const char __pyx_k_tensor_functions_softmax_cross_e[] = "tensor_functions.softmax_cross_entropy";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_kp_s_arrays_contains_different_shaped;
static PyObject *__pyx_kp_s_arrays_contains_no_item;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_batch;
static PyObject *__pyx_n_s_bernoulli;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_broadcast;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_concat;
static PyObject *__pyx_n_s_constant;
static PyObject *__pyx_n_s_conv2d;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cos;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_kp_s_data_contains_no_item;
static PyObject *__pyx_kp_s_data_contains_other_objects_tha;
static PyObject *__pyx_kp_s_data_has_incorrect_type;
static PyObject *__pyx_n_s_device;
static PyObject *__pyx_n_s_dilation0;
static PyObject *__pyx_n_s_dilation1;
static PyObject *__pyx_n_s_dim;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dropout;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_elu;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_functions;
static PyObject *__pyx_n_s_functions_batch;
static PyObject *__pyx_n_s_functions_batch_mean;
static PyObject *__pyx_n_s_functions_batch_normalize;
static PyObject *__pyx_n_s_functions_batch_sum;
static PyObject *__pyx_n_s_functions_broadcast;
static PyObject *__pyx_n_s_functions_concat;
static PyObject *__pyx_n_s_functions_constant;
static PyObject *__pyx_n_s_functions_conv2d;
static PyObject *__pyx_n_s_functions_copy;
static PyObject *__pyx_n_s_functions_cos;
static PyObject *__pyx_n_s_functions_dropout;
static PyObject *__pyx_n_s_functions_elu;
static PyObject *__pyx_n_s_functions_exp;
static PyObject *__pyx_n_s_functions_flatten;
static PyObject *__pyx_n_s_functions_identity;
static PyObject *__pyx_n_s_functions_input;
static PyObject *__pyx_n_s_functions_log;
static PyObject *__pyx_n_s_functions_log_softmax;
static PyObject *__pyx_n_s_functions_logsumexp;
static PyObject *__pyx_n_s_functions_lrelu;
static PyObject *__pyx_n_s_functions_matmul;
static PyObject *__pyx_n_s_functions_max_pool2d;
static PyObject *__pyx_n_s_functions_mean;
static PyObject *__pyx_n_s_functions_ones;
static PyObject *__pyx_n_s_functions_parameter;
static PyObject *__pyx_n_s_functions_pick;
static PyObject *__pyx_n_s_functions_pow;
static PyObject *__pyx_n_s_functions_prelu;
static PyObject *__pyx_n_s_functions_random;
static PyObject *__pyx_n_s_functions_random_bernoulli;
static PyObject *__pyx_n_s_functions_random_gumbel;
static PyObject *__pyx_n_s_functions_random_log_normal;
static PyObject *__pyx_n_s_functions_random_normal;
static PyObject *__pyx_n_s_functions_random_uniform;
static PyObject *__pyx_n_s_functions_raw_input;
static PyObject *__pyx_n_s_functions_relu;
static PyObject *__pyx_n_s_functions_reshape;
static PyObject *__pyx_n_s_functions_selu;
static PyObject *__pyx_n_s_functions_sigmoid;
static PyObject *__pyx_n_s_functions_sin;
static PyObject *__pyx_n_s_functions_slice;
static PyObject *__pyx_n_s_functions_softmax;
static PyObject *__pyx_n_s_functions_softmax_cross_entropy;
static PyObject *__pyx_n_s_functions_softplus;
static PyObject *__pyx_n_s_functions_sqrt;
static PyObject *__pyx_n_s_functions_stop_gradient;
static PyObject *__pyx_n_s_functions_sum;
static PyObject *__pyx_n_s_functions_tan;
static PyObject *__pyx_n_s_functions_tanh;
static PyObject *__pyx_n_s_functions_transpose;
static PyObject *__pyx_n_s_functions_zeros;
static PyObject *__pyx_n_s_get_default;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_gumbel;
static PyObject *__pyx_n_s_identity;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_input;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_log_normal;
static PyObject *__pyx_n_s_log_softmax;
static PyObject *__pyx_n_s_logsumexp;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_lrelu;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matmul;
static PyObject *__pyx_n_s_max_pool2d;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mu;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_new_shape;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_normal;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_padding0;
static PyObject *__pyx_n_s_padding1;
static PyObject *__pyx_n_s_param;
static PyObject *__pyx_n_s_parameter;
static PyObject *__pyx_n_s_pick;
static PyObject *__pyx_n_s_pow;
static PyObject *__pyx_n_s_prelu;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_primitiv__function;
static PyObject *__pyx_kp_s_primitiv__function_pyx;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rate;
static PyObject *__pyx_n_s_raw_input;
static PyObject *__pyx_n_s_relu;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_sd;
static PyObject *__pyx_n_s_selu;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sigmoid;
static PyObject *__pyx_n_s_sin;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_slice;
static PyObject *__pyx_n_s_softmax;
static PyObject *__pyx_n_s_softmax_cross_entropy;
static PyObject *__pyx_n_s_softplus;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stop_gradient;
static PyObject *__pyx_n_s_stride0;
static PyObject *__pyx_n_s_stride1;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_kp_s_t_has_incorrect_type;
static PyObject *__pyx_n_s_tan;
static PyObject *__pyx_n_s_tanh;
static PyObject *__pyx_n_s_tensor_functions;
static PyObject *__pyx_n_s_tensor_functions_batch;
static PyObject *__pyx_n_s_tensor_functions_batch_mean;
static PyObject *__pyx_n_s_tensor_functions_batch_normalize;
static PyObject *__pyx_n_s_tensor_functions_batch_sum;
static PyObject *__pyx_n_s_tensor_functions_broadcast;
static PyObject *__pyx_n_s_tensor_functions_concat;
static PyObject *__pyx_n_s_tensor_functions_constant;
static PyObject *__pyx_n_s_tensor_functions_conv2d;
static PyObject *__pyx_n_s_tensor_functions_copy;
static PyObject *__pyx_n_s_tensor_functions_cos;
static PyObject *__pyx_n_s_tensor_functions_dropout;
static PyObject *__pyx_n_s_tensor_functions_elu;
static PyObject *__pyx_n_s_tensor_functions_exp;
static PyObject *__pyx_n_s_tensor_functions_flatten;
static PyObject *__pyx_n_s_tensor_functions_identity;
static PyObject *__pyx_n_s_tensor_functions_input;
static PyObject *__pyx_n_s_tensor_functions_log;
static PyObject *__pyx_n_s_tensor_functions_log_softmax;
static PyObject *__pyx_n_s_tensor_functions_logsumexp;
static PyObject *__pyx_n_s_tensor_functions_lrelu;
static PyObject *__pyx_n_s_tensor_functions_matmul;
static PyObject *__pyx_n_s_tensor_functions_max_pool2d;
static PyObject *__pyx_n_s_tensor_functions_mean;
static PyObject *__pyx_n_s_tensor_functions_ones;
static PyObject *__pyx_n_s_tensor_functions_parameter;
static PyObject *__pyx_n_s_tensor_functions_pick;
static PyObject *__pyx_n_s_tensor_functions_pow;
static PyObject *__pyx_n_s_tensor_functions_prelu;
static PyObject *__pyx_n_s_tensor_functions_random;
static PyObject *__pyx_n_s_tensor_functions_random_bernoull;
static PyObject *__pyx_n_s_tensor_functions_random_gumbel;
static PyObject *__pyx_n_s_tensor_functions_random_log_norm;
static PyObject *__pyx_n_s_tensor_functions_random_normal;
static PyObject *__pyx_n_s_tensor_functions_random_uniform;
static PyObject *__pyx_n_s_tensor_functions_raw_input;
static PyObject *__pyx_n_s_tensor_functions_relu;
static PyObject *__pyx_n_s_tensor_functions_reshape;
static PyObject *__pyx_n_s_tensor_functions_selu;
static PyObject *__pyx_n_s_tensor_functions_sigmoid;
static PyObject *__pyx_n_s_tensor_functions_sin;
static PyObject *__pyx_n_s_tensor_functions_slice;
static PyObject *__pyx_n_s_tensor_functions_softmax;
static PyObject *__pyx_n_s_tensor_functions_softmax_cross_e;
static PyObject *__pyx_n_s_tensor_functions_softplus;
static PyObject *__pyx_n_s_tensor_functions_sqrt;
static PyObject *__pyx_n_s_tensor_functions_stop_gradient;
static PyObject *__pyx_n_s_tensor_functions_sum;
static PyObject *__pyx_n_s_tensor_functions_tan;
static PyObject *__pyx_n_s_tensor_functions_tanh;
static PyObject *__pyx_n_s_tensor_functions_transpose;
static PyObject *__pyx_n_s_tensor_functions_zeros;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_transpose;
static PyObject *__pyx_n_s_uniform;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_vec;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_window0;
static PyObject *__pyx_n_s_window1;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_kp_s_x_or_k_has_incorrect_type;
static PyObject *__pyx_n_s_xs;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_8primitiv_9_function_9functions_raw_input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, std::vector<float>  __pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_2input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_4parameter(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_10_parameter_Parameter *__pyx_v_param, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_6copy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_8pick(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, std::vector<unsigned int>  __pyx_v_ids, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_10slice(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_lower, unsigned int __pyx_v_upper); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_12concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_xs, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_14reshape(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, PyObject *__pyx_v_new_shape); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_16flatten(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_18transpose(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_20matmul(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_a, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_22sqrt(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_24exp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_26log(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_28pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_30tanh(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_32sigmoid(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_34softplus(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_36sin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_38cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_40tan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_42relu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_44lrelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_46prelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_48elu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_50selu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_a, float __pyx_v_s); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_52sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_54mean(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_56broadcast(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_58logsumexp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_60log_softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_62softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_64softmax_cross_entropy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, PyObject *__pyx_v_t, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_66stop_gradient(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_68conv2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_w, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1, unsigned int __pyx_v_dilation0, unsigned int __pyx_v_dilation1); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_70max_pool2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_window0, unsigned int __pyx_v_window1, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_72constant(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_k, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_74zeros(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_76ones(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_78identity(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_size, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_5batch_sum(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_5batch_2mean(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_5batch_4normalize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_bernoulli(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_p, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_2uniform(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_lower, float __pyx_v_upper, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_4normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_6log_normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_8gumbel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mu, float __pyx_v_beta, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_9functions_80dropout(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_rate, bool __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_raw_input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, std::vector<float>  __pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_2input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_4parameter(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_10_parameter_Parameter *__pyx_v_param); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_6copy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_8pick(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, std::vector<unsigned int>  __pyx_v_ids, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_10slice(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_lower, unsigned int __pyx_v_upper); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_12concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_xs, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_14reshape(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, PyObject *__pyx_v_new_shape); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_16flatten(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_18transpose(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_20matmul(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_a, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_22sqrt(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_24exp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_26log(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_28pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_30tanh(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_32sigmoid(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_34softplus(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_36sin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_38cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_40tan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_42relu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_44lrelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_46prelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_48elu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_50selu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_a, float __pyx_v_s); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_52sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_54mean(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_56broadcast(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_58logsumexp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_60log_softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_62softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_64softmax_cross_entropy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, PyObject *__pyx_v_t, unsigned int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_66stop_gradient(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_68conv2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_w, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1, unsigned int __pyx_v_dilation0, unsigned int __pyx_v_dilation1); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_70max_pool2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_window0, unsigned int __pyx_v_window1, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_72constant(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_k, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_74zeros(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_76ones(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_78identity(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_size, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_5batch_6sum(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_5batch_8mean(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_5batch_10normalize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_10bernoulli(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_p, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_12uniform(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_lower, float __pyx_v_upper, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_14normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_16log_normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_6random_18gumbel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mu, float __pyx_v_beta, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_80dropout(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_rate, bool __pyx_v_enabled); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_int_2147483647;
static PyObject *__pyx_int_neg_2147483648;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__217;
static PyObject *__pyx_tuple__219;
static PyObject *__pyx_tuple__221;
static PyObject *__pyx_tuple__223;
static PyObject *__pyx_tuple__225;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__228;
static PyObject *__pyx_tuple__229;
static PyObject *__pyx_tuple__231;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_tuple__235;
static PyObject *__pyx_tuple__237;
static PyObject *__pyx_tuple__238;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__140;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__146;
static PyObject *__pyx_codeobj__148;
static PyObject *__pyx_codeobj__150;
static PyObject *__pyx_codeobj__152;
static PyObject *__pyx_codeobj__154;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__176;
static PyObject *__pyx_codeobj__178;
static PyObject *__pyx_codeobj__180;
static PyObject *__pyx_codeobj__182;
static PyObject *__pyx_codeobj__184;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__190;
static PyObject *__pyx_codeobj__192;
static PyObject *__pyx_codeobj__194;
static PyObject *__pyx_codeobj__196;
static PyObject *__pyx_codeobj__198;
static PyObject *__pyx_codeobj__200;
static PyObject *__pyx_codeobj__202;
static PyObject *__pyx_codeobj__204;
static PyObject *__pyx_codeobj__206;
static PyObject *__pyx_codeobj__209;
static PyObject *__pyx_codeobj__212;
static PyObject *__pyx_codeobj__215;
static PyObject *__pyx_codeobj__218;
static PyObject *__pyx_codeobj__220;
static PyObject *__pyx_codeobj__222;
static PyObject *__pyx_codeobj__224;
static PyObject *__pyx_codeobj__227;
static PyObject *__pyx_codeobj__230;
static PyObject *__pyx_codeobj__233;
static PyObject *__pyx_codeobj__236;
static PyObject *__pyx_codeobj__239;
/* Late includes */

/* "primitiv/_function.pyx":19
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_1raw_input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_1raw_input = {"raw_input", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_1raw_input, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_1raw_input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  std::vector<float>  __pyx_v_data;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("raw_input (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_data,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("raw_input", 0, 2, 4, 1); __PYX_ERR(0, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "raw_input") < 0)) __PYX_ERR(0, 19, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_data = __pyx_convert_vector_from_py_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 19, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[2]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("raw_input", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 19, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.raw_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 19, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_raw_input(__pyx_self, __pyx_v_shape, __pyx_v_data, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_raw_input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, std::vector<float>  __pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("raw_input", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":20
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":21
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":20
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  }

  /* "primitiv/_function.pyx":22
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_input_node(normShape(shape).wrapped, data,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":23
 *             device = Device.get_default()
 *         if graph is None:
 *             graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_input_node(normShape(shape).wrapped, data,
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":22
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_input_node(normShape(shape).wrapped, data,
 */
  }

  /* "primitiv/_function.pyx":24
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_input_node(normShape(shape).wrapped, data,             # <<<<<<<<<<<<<<
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":25
 *             graph = Graph.get_default()
 *         return wrapNode(func_input_node(normShape(shape).wrapped, data,
 *                                         get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     # NOTE(vbkaisetsu)
 */
  try {
    __pyx_t_6 = primitiv::functions::input_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_data, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 24, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":24
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_input_node(normShape(shape).wrapped, data,             # <<<<<<<<<<<<<<
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":19
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.raw_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":31
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_3input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_3input = {"input", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_3input, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_3input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input") < 0)) __PYX_ERR(0, 31, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 31, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 31, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_2input(__pyx_self, __pyx_v_data, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_2input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_v_shape = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("input", 0);
  __Pyx_INCREF(__pyx_v_data);

  /* "primitiv/_function.pyx":39
 *         # In addition, we also don't check whether each ndarray has the same shape or not.
 *         # This condition will be checked in ndarrays_to_vector().
 *         if isinstance(data, np.ndarray):             # <<<<<<<<<<<<<<
 *             data = [data]
 *         if isinstance(data, list):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_data, __pyx_ptype_5numpy_ndarray); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":40
 *         # This condition will be checked in ndarrays_to_vector().
 *         if isinstance(data, np.ndarray):
 *             data = [data]             # <<<<<<<<<<<<<<
 *         if isinstance(data, list):
 *             if len(data) == 0:
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_data);
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":39
 *         # In addition, we also don't check whether each ndarray has the same shape or not.
 *         # This condition will be checked in ndarrays_to_vector().
 *         if isinstance(data, np.ndarray):             # <<<<<<<<<<<<<<
 *             data = [data]
 *         if isinstance(data, list):
 */
  }

  /* "primitiv/_function.pyx":41
 *         if isinstance(data, np.ndarray):
 *             data = [data]
 *         if isinstance(data, list):             # <<<<<<<<<<<<<<
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 */
  __pyx_t_2 = PyList_Check(__pyx_v_data); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "primitiv/_function.pyx":42
 *             data = [data]
 *         if isinstance(data, list):
 *             if len(data) == 0:             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 42, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_4 == 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "primitiv/_function.pyx":43
 *         if isinstance(data, list):
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")             # <<<<<<<<<<<<<<
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 43, __pyx_L1_error)

      /* "primitiv/_function.pyx":42
 *             data = [data]
 *         if isinstance(data, list):
 *             if len(data) == 0:             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 */
    }

    /* "primitiv/_function.pyx":44
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 *             shape = Shape(data[0].shape, len(data))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_3, __pyx_ptype_5numpy_ndarray); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "primitiv/_function.pyx":45
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")             # <<<<<<<<<<<<<<
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 45, __pyx_L1_error)

      /* "primitiv/_function.pyx":44
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 *             shape = Shape(data[0].shape, len(data))
 */
    }

    /* "primitiv/_function.pyx":46
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 *             shape = Shape(data[0].shape, len(data))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`data` has incorrect type.")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 46, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8primitiv_6_shape_Shape), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_shape = ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":41
 *         if isinstance(data, np.ndarray):
 *             data = [data]
 *         if isinstance(data, list):             # <<<<<<<<<<<<<<
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 */
    goto __pyx_L4;
  }

  /* "primitiv/_function.pyx":48
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 *             raise TypeError("`data` has incorrect type.")             # <<<<<<<<<<<<<<
 *         return functions.raw_input(shape, ndarrays_to_vector(data), device, graph)
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 48, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "primitiv/_function.pyx":49
 *         else:
 *             raise TypeError("`data` has incorrect type.")
 *         return functions.raw_input(shape, ndarrays_to_vector(data), device, graph)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_functions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_raw_input); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyList_CheckExact(__pyx_v_data))||((__pyx_v_data) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_data)->tp_name), 0))) __PYX_ERR(0, 49, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_vector_to_py_float(__pyx_f_8primitiv_5utils_ndarrays_to_vector(((PyObject*)__pyx_v_data))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, ((PyObject *)__pyx_v_shape), __pyx_t_6, ((PyObject *)__pyx_v_device), ((PyObject *)__pyx_v_graph)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, ((PyObject *)__pyx_v_shape), __pyx_t_6, ((PyObject *)__pyx_v_device), ((PyObject *)__pyx_v_graph)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_shape));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_shape));
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_shape));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_device));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_device));
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, ((PyObject *)__pyx_v_device));
    __Pyx_INCREF(((PyObject *)__pyx_v_graph));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_graph));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":31
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("primitiv._function.functions.input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_shape);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":53
 * 
 *     @staticmethod
 *     def parameter(Parameter param, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_5parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_5parameter = {"parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_5parameter, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_5parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_10_parameter_Parameter *__pyx_v_param = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param,&__pyx_n_s_graph,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parameter") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_param = ((struct __pyx_obj_8primitiv_10_parameter_Parameter *)values[0]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parameter", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param), __pyx_ptype_8primitiv_10_parameter_Parameter, 1, "param", 0))) __PYX_ERR(0, 53, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_4parameter(__pyx_self, __pyx_v_param, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_4parameter(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_10_parameter_Parameter *__pyx_v_param, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("parameter", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":54
 *     @staticmethod
 *     def parameter(Parameter param, Graph graph = None):
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_parameter_node(param.wrapped[0], get_cpp_graph(graph)))
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":55
 *     def parameter(Parameter param, Graph graph = None):
 *         if graph is None:
 *             graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_parameter_node(param.wrapped[0], get_cpp_graph(graph)))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":54
 *     @staticmethod
 *     def parameter(Parameter param, Graph graph = None):
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_parameter_node(param.wrapped[0], get_cpp_graph(graph)))
 */
  }

  /* "primitiv/_function.pyx":56
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_parameter_node(param.wrapped[0], get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_6 = primitiv::functions::parameter_node((__pyx_v_param->wrapped[0]), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 56, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":53
 * 
 *     @staticmethod
 *     def parameter(Parameter param, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":59
 * 
 *     @staticmethod
 *     def copy(Node x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_7copy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_7copy = {"copy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_7copy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_7copy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy") < 0)) __PYX_ERR(0, 59, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 59, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_6copy(__pyx_self, __pyx_v_x, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_6copy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":60
 *     @staticmethod
 *     def copy(Node x, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return wrapNode(func_copy(x.wrapped, get_cpp_device(device)))
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":61
 *     def copy(Node x, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_copy(x.wrapped, get_cpp_device(device)))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":60
 *     @staticmethod
 *     def copy(Node x, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return wrapNode(func_copy(x.wrapped, get_cpp_device(device)))
 */
  }

  /* "primitiv/_function.pyx":62
 *         if device is None:
 *             device = Device.get_default()
 *         return wrapNode(func_copy(x.wrapped, get_cpp_device(device)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_6 = primitiv::functions::copy<primitiv::Node>(__pyx_v_x->wrapped, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 62, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":59
 * 
 *     @staticmethod
 *     def copy(Node x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":65
 * 
 *     @staticmethod
 *     def pick(Node x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_pick(x.wrapped, ids, dim))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_9pick(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_9pick = {"pick", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_9pick, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_9pick(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  std::vector<unsigned int>  __pyx_v_ids;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pick (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_ids,&__pyx_n_s_dim,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pick", 1, 3, 3, 1); __PYX_ERR(0, 65, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pick", 1, 3, 3, 2); __PYX_ERR(0, 65, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pick") < 0)) __PYX_ERR(0, 65, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_ids = __pyx_convert_vector_from_py_unsigned_int(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L3_error)
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pick", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.pick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_8pick(__pyx_self, __pyx_v_x, __pyx_v_ids, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_8pick(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, std::vector<unsigned int>  __pyx_v_ids, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("pick", 0);

  /* "primitiv/_function.pyx":66
 *     @staticmethod
 *     def pick(Node x, vector[unsigned] ids, unsigned dim):
 *         return wrapNode(func_pick(x.wrapped, ids, dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::pick<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_ids, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":65
 * 
 *     @staticmethod
 *     def pick(Node x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_pick(x.wrapped, ids, dim))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.pick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":69
 * 
 *     @staticmethod
 *     def slice(Node x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_11slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_11slice = {"slice", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_11slice, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_11slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  unsigned int __pyx_v_lower;
  unsigned int __pyx_v_upper;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, 1); __PYX_ERR(0, 69, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, 2); __PYX_ERR(0, 69, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, 3); __PYX_ERR(0, 69, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slice") < 0)) __PYX_ERR(0, 69, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L3_error)
    __pyx_v_lower = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_lower == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L3_error)
    __pyx_v_upper = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_upper == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 69, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_10slice(__pyx_self, __pyx_v_x, __pyx_v_dim, __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_10slice(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_lower, unsigned int __pyx_v_upper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("slice", 0);

  /* "primitiv/_function.pyx":70
 *     @staticmethod
 *     def slice(Node x, unsigned dim, unsigned lower, unsigned upper):
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::slice<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_dim, __pyx_v_lower, __pyx_v_upper);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 70, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":69
 * 
 *     @staticmethod
 *     def slice(Node x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":73
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] vec
 *         cdef Node x
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_13concat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_13concat = {"concat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_13concat, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_13concat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("concat", 1, 2, 2, 1); __PYX_ERR(0, 73, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "concat") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xs = values[0];
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_12concat(__pyx_self, __pyx_v_xs, __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_12concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_xs, unsigned int __pyx_v_dim) {
  std::vector<primitiv::Node>  __pyx_v_vec;
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  primitiv::Node __pyx_t_5;
  __Pyx_RefNannySetupContext("concat", 0);

  /* "primitiv/_function.pyx":76
 *         cdef vector[CppNode] vec
 *         cdef Node x
 *         for x in xs:             # <<<<<<<<<<<<<<
 *             vec.push_back(x.wrapped)
 *         return wrapNode(func_concat(vec, dim))
 */
  if (likely(PyList_CheckExact(__pyx_v_xs)) || PyTuple_CheckExact(__pyx_v_xs)) {
    __pyx_t_1 = __pyx_v_xs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_xs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 76, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_8primitiv_6_graph_Node))))) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_x, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "primitiv/_function.pyx":77
 *         cdef Node x
 *         for x in xs:
 *             vec.push_back(x.wrapped)             # <<<<<<<<<<<<<<
 *         return wrapNode(func_concat(vec, dim))
 * 
 */
    try {
      __pyx_v_vec.push_back(__pyx_v_x->wrapped);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 77, __pyx_L1_error)
    }

    /* "primitiv/_function.pyx":76
 *         cdef vector[CppNode] vec
 *         cdef Node x
 *         for x in xs:             # <<<<<<<<<<<<<<
 *             vec.push_back(x.wrapped)
 *         return wrapNode(func_concat(vec, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "primitiv/_function.pyx":78
 *         for x in xs:
 *             vec.push_back(x.wrapped)
 *         return wrapNode(func_concat(vec, dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = primitiv::functions::concat<primitiv::Node>(__pyx_v_vec, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 78, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":73
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] vec
 *         cdef Node x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("primitiv._function.functions.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":81
 * 
 *     @staticmethod
 *     def reshape(Node x, new_shape):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_15reshape(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_15reshape = {"reshape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_15reshape, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_15reshape(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  PyObject *__pyx_v_new_shape = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reshape (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_new_shape,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_shape)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reshape", 1, 2, 2, 1); __PYX_ERR(0, 81, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reshape") < 0)) __PYX_ERR(0, 81, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_new_shape = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reshape", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 81, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_14reshape(__pyx_self, __pyx_v_x, __pyx_v_new_shape);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_14reshape(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, PyObject *__pyx_v_new_shape) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  primitiv::Node __pyx_t_2;
  __Pyx_RefNannySetupContext("reshape", 0);

  /* "primitiv/_function.pyx":82
 *     @staticmethod
 *     def reshape(Node x, new_shape):
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_new_shape)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = primitiv::functions::reshape<primitiv::Node>(__pyx_v_x->wrapped, ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_1)->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 82, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":81
 * 
 *     @staticmethod
 *     def reshape(Node x, new_shape):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("primitiv._function.functions.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":85
 * 
 *     @staticmethod
 *     def flatten(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_flatten(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_17flatten(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_17flatten = {"flatten", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_17flatten, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_17flatten(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flatten (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_16flatten(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_16flatten(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("flatten", 0);

  /* "primitiv/_function.pyx":86
 *     @staticmethod
 *     def flatten(Node x):
 *         return wrapNode(func_flatten(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::flatten<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 86, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":85
 * 
 *     @staticmethod
 *     def flatten(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_flatten(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.flatten", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":89
 * 
 *     @staticmethod
 *     def transpose(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_transpose(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_19transpose(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_19transpose = {"transpose", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_19transpose, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_19transpose(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_18transpose(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_18transpose(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("transpose", 0);

  /* "primitiv/_function.pyx":90
 *     @staticmethod
 *     def transpose(Node x):
 *         return wrapNode(func_transpose(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::transpose<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":89
 * 
 *     @staticmethod
 *     def transpose(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_transpose(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":93
 * 
 *     @staticmethod
 *     def matmul(Node a, Node b):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_21matmul(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_21matmul = {"matmul", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_21matmul, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_21matmul(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_a = 0;
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matmul (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, 1); __PYX_ERR(0, 93, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matmul") < 0)) __PYX_ERR(0, 93, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_b = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_8primitiv_6_graph_Node, 1, "a", 0))) __PYX_ERR(0, 93, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_8primitiv_6_graph_Node, 1, "b", 0))) __PYX_ERR(0, 93, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_20matmul(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_20matmul(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_a, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("matmul", 0);

  /* "primitiv/_function.pyx":94
 *     @staticmethod
 *     def matmul(Node a, Node b):
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::matmul<primitiv::Node>(__pyx_v_a->wrapped, __pyx_v_b->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":93
 * 
 *     @staticmethod
 *     def matmul(Node a, Node b):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":97
 * 
 *     @staticmethod
 *     def sqrt(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sqrt(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_23sqrt(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_23sqrt = {"sqrt", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_23sqrt, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_23sqrt(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sqrt (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_22sqrt(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_22sqrt(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sqrt", 0);

  /* "primitiv/_function.pyx":98
 *     @staticmethod
 *     def sqrt(Node x):
 *         return wrapNode(func_sqrt(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::sqrt<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":97
 * 
 *     @staticmethod
 *     def sqrt(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sqrt(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":101
 * 
 *     @staticmethod
 *     def exp(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_exp(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_25exp(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_25exp = {"exp", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_25exp, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_25exp(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_24exp(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_24exp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("exp", 0);

  /* "primitiv/_function.pyx":102
 *     @staticmethod
 *     def exp(Node x):
 *         return wrapNode(func_exp(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::exp<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 102, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":101
 * 
 *     @staticmethod
 *     def exp(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_exp(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":105
 * 
 *     @staticmethod
 *     def log(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_27log(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_27log = {"log", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_27log, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_27log(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_26log(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_26log(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("log", 0);

  /* "primitiv/_function.pyx":106
 *     @staticmethod
 *     def log(Node x):
 *         return wrapNode(func_log(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::log<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 106, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":105
 * 
 *     @staticmethod
 *     def log(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":109
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_29pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_29pow = {"pow", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_29pow, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_29pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_k,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, 1); __PYX_ERR(0, 109, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pow") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_k = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_28pow(__pyx_self, __pyx_v_x, __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_28pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  primitiv::Node __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("pow", 0);

  /* "primitiv/_function.pyx":110
 *     @staticmethod
 *     def pow(x, k):
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8primitiv_6_graph_Node); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_k); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_int_neg_2147483648, __pyx_v_k, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_k, __pyx_int_2147483647, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":111
 *     def pow(x, k):
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    try {
      __pyx_t_6 = primitiv::functions::pown<primitiv::Node>(((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x)->wrapped, ((int)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 111, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":110
 *     @staticmethod
 *     def pow(x, k):
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):
 */
  }

  /* "primitiv/_function.pyx":112
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8primitiv_6_graph_Node); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_k); 
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_3 = __pyx_t_7;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_7 = PyFloat_Check(__pyx_v_k); 
  __pyx_t_2 = (__pyx_t_7 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":113
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_k); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
    try {
      __pyx_t_6 = primitiv::functions::pow<primitiv::Node>(((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x)->wrapped, ((float)__pyx_t_8));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 113, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":112
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):
 */
  }

  /* "primitiv/_function.pyx":114
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))
 *         elif isinstance(x, Node) and isinstance(k, Node):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_x); 
  __pyx_t_7 = (__pyx_t_3 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_7 = PyFloat_Check(__pyx_v_x); 
  __pyx_t_3 = (__pyx_t_7 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L13_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_k, __pyx_ptype_8primitiv_6_graph_Node); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":115
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, Node) and isinstance(k, Node):
 *             return wrapNode(func_pow((<Node> x).wrapped, (<Node> k).wrapped))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
    try {
      __pyx_t_6 = primitiv::functions::pow<primitiv::Node>(((float)__pyx_t_8), ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_k)->wrapped);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 115, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":114
 *         elif isinstance(x, Node) and isinstance(k, (int, float)):
 *             return wrapNode(func_pow((<Node> x).wrapped, <float> k))
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))
 *         elif isinstance(x, Node) and isinstance(k, Node):
 */
  }

  /* "primitiv/_function.pyx":116
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))
 *         elif isinstance(x, Node) and isinstance(k, Node):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pow((<Node> x).wrapped, (<Node> k).wrapped))
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8primitiv_6_graph_Node); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_k, __pyx_ptype_8primitiv_6_graph_Node); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "primitiv/_function.pyx":117
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))
 *         elif isinstance(x, Node) and isinstance(k, Node):
 *             return wrapNode(func_pow((<Node> x).wrapped, (<Node> k).wrapped))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`x` or `k` has incorrect type.")
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_6 = primitiv::functions::pow<primitiv::Node>(((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x)->wrapped, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_k)->wrapped);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":116
 *         elif isinstance(x, (int, float)) and isinstance(k, Node):
 *             return wrapNode(func_pow(<float> x, (<Node> k).wrapped))
 *         elif isinstance(x, Node) and isinstance(k, Node):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_pow((<Node> x).wrapped, (<Node> k).wrapped))
 *         else:
 */
  }

  /* "primitiv/_function.pyx":119
 *             return wrapNode(func_pow((<Node> x).wrapped, (<Node> k).wrapped))
 *         else:
 *             raise TypeError("`x` or `k` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 119, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":109
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("primitiv._function.functions.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":122
 * 
 *     @staticmethod
 *     def tanh(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tanh(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_31tanh(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_31tanh = {"tanh", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_31tanh, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_31tanh(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tanh (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_30tanh(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_30tanh(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("tanh", 0);

  /* "primitiv/_function.pyx":123
 *     @staticmethod
 *     def tanh(Node x):
 *         return wrapNode(func_tanh(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::tanh<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":122
 * 
 *     @staticmethod
 *     def tanh(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tanh(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.tanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":126
 * 
 *     @staticmethod
 *     def sigmoid(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sigmoid(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_33sigmoid(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_33sigmoid = {"sigmoid", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_33sigmoid, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_33sigmoid(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sigmoid (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_32sigmoid(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_32sigmoid(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sigmoid", 0);

  /* "primitiv/_function.pyx":127
 *     @staticmethod
 *     def sigmoid(Node x):
 *         return wrapNode(func_sigmoid(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::sigmoid<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 127, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":126
 * 
 *     @staticmethod
 *     def sigmoid(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sigmoid(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.sigmoid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":130
 * 
 *     @staticmethod
 *     def softplus(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softplus(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_35softplus(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_35softplus = {"softplus", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_35softplus, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_35softplus(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softplus (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_34softplus(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_34softplus(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("softplus", 0);

  /* "primitiv/_function.pyx":131
 *     @staticmethod
 *     def softplus(Node x):
 *         return wrapNode(func_softplus(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::softplus<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":130
 * 
 *     @staticmethod
 *     def softplus(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softplus(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.softplus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":134
 * 
 *     @staticmethod
 *     def sin(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sin(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_37sin(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_37sin = {"sin", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_37sin, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_37sin(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_36sin(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_36sin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sin", 0);

  /* "primitiv/_function.pyx":135
 *     @staticmethod
 *     def sin(Node x):
 *         return wrapNode(func_sin(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::sin<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 135, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":134
 * 
 *     @staticmethod
 *     def sin(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sin(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":138
 * 
 *     @staticmethod
 *     def cos(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_cos(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_39cos(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_39cos = {"cos", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_39cos, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_39cos(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cos (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_38cos(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_38cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cos", 0);

  /* "primitiv/_function.pyx":139
 *     @staticmethod
 *     def cos(Node x):
 *         return wrapNode(func_cos(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::cos<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 139, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":138
 * 
 *     @staticmethod
 *     def cos(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_cos(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":142
 * 
 *     @staticmethod
 *     def tan(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tan(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_41tan(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_41tan = {"tan", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_41tan, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_41tan(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tan (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_40tan(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_40tan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("tan", 0);

  /* "primitiv/_function.pyx":143
 *     @staticmethod
 *     def tan(Node x):
 *         return wrapNode(func_tan(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::tan<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 143, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":142
 * 
 *     @staticmethod
 *     def tan(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tan(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":146
 * 
 *     @staticmethod
 *     def relu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_relu(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_43relu(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_43relu = {"relu", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_43relu, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_43relu(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relu (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_42relu(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_42relu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("relu", 0);

  /* "primitiv/_function.pyx":147
 *     @staticmethod
 *     def relu(Node x):
 *         return wrapNode(func_relu(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::relu<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 147, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":146
 * 
 *     @staticmethod
 *     def relu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_relu(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.relu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":150
 * 
 *     @staticmethod
 *     def lrelu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_lrelu(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_45lrelu(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_45lrelu = {"lrelu", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_45lrelu, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_45lrelu(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lrelu (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_44lrelu(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_44lrelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lrelu", 0);

  /* "primitiv/_function.pyx":151
 *     @staticmethod
 *     def lrelu(Node x):
 *         return wrapNode(func_lrelu(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::lrelu<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 151, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":150
 * 
 *     @staticmethod
 *     def lrelu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_lrelu(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.lrelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":154
 * 
 *     @staticmethod
 *     def prelu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_prelu(x.wrapped, a))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_47prelu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_47prelu = {"prelu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_47prelu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_47prelu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prelu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prelu", 1, 2, 2, 1); __PYX_ERR(0, 154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prelu") < 0)) __PYX_ERR(0, 154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prelu", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.prelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_46prelu(__pyx_self, __pyx_v_x, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_46prelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("prelu", 0);

  /* "primitiv/_function.pyx":155
 *     @staticmethod
 *     def prelu(Node x, float a):
 *         return wrapNode(func_prelu(x.wrapped, a))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::prelu<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 155, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":154
 * 
 *     @staticmethod
 *     def prelu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_prelu(x.wrapped, a))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.prelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":158
 * 
 *     @staticmethod
 *     def elu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_elu(x.wrapped, a))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_49elu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_49elu = {"elu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_49elu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_49elu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("elu", 1, 2, 2, 1); __PYX_ERR(0, 158, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "elu") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("elu", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.elu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_48elu(__pyx_self, __pyx_v_x, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_48elu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("elu", 0);

  /* "primitiv/_function.pyx":159
 *     @staticmethod
 *     def elu(Node x, float a):
 *         return wrapNode(func_elu(x.wrapped, a))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::elu<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 159, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":158
 * 
 *     @staticmethod
 *     def elu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_elu(x.wrapped, a))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.elu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":162
 * 
 *     @staticmethod
 *     def selu(Node x, float a, float s):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_selu(x.wrapped, a, s))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_51selu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_51selu = {"selu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_51selu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_51selu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  float __pyx_v_a;
  float __pyx_v_s;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("selu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_a,&__pyx_n_s_s,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("selu", 1, 3, 3, 1); __PYX_ERR(0, 162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("selu", 1, 3, 3, 2); __PYX_ERR(0, 162, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "selu") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
    __pyx_v_s = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_s == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("selu", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.selu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_50selu(__pyx_self, __pyx_v_x, __pyx_v_a, __pyx_v_s);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_50selu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_a, float __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("selu", 0);

  /* "primitiv/_function.pyx":163
 *     @staticmethod
 *     def selu(Node x, float a, float s):
 *         return wrapNode(func_selu(x.wrapped, a, s))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::selu<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_a, __pyx_v_s);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 163, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":162
 * 
 *     @staticmethod
 *     def selu(Node x, float a, float s):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_selu(x.wrapped, a, s))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.selu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":166
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_53sum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_53sum = {"sum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_53sum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_53sum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sum") < 0)) __PYX_ERR(0, 166, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_dim = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sum", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 166, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_52sum(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_52sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim) {
  std::vector<primitiv::Node>  __pyx_v_xs;
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_node = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  primitiv::Node __pyx_t_7;
  unsigned int __pyx_t_8;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "primitiv/_function.pyx":169
 *         cdef vector[CppNode] xs
 *         cdef Node node
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for node in x:
 *                 xs.push_back(node.wrapped)
 */
  __pyx_t_1 = PyList_Check(__pyx_v_x); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":170
 *         cdef Node node
 *         if isinstance(x, list):
 *             for node in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(node.wrapped)
 *             return wrapNode(func_sum(xs))
 */
    if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
      __pyx_t_3 = __pyx_v_x; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 170, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 170, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 170, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_8primitiv_6_graph_Node))))) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_node, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "primitiv/_function.pyx":171
 *         if isinstance(x, list):
 *             for node in x:
 *                 xs.push_back(node.wrapped)             # <<<<<<<<<<<<<<
 *             return wrapNode(func_sum(xs))
 *         else:
 */
      try {
        __pyx_v_xs.push_back(__pyx_v_node->wrapped);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 171, __pyx_L1_error)
      }

      /* "primitiv/_function.pyx":170
 *         cdef Node node
 *         if isinstance(x, list):
 *             for node in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(node.wrapped)
 *             return wrapNode(func_sum(xs))
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":172
 *             for node in x:
 *                 xs.push_back(node.wrapped)
 *             return wrapNode(func_sum(xs))             # <<<<<<<<<<<<<<
 *         else:
 *             return wrapNode(func_sum((<Node> x).wrapped, <unsigned> dim))
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_7 = primitiv::functions::sum(__pyx_v_xs);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 172, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":169
 *         cdef vector[CppNode] xs
 *         cdef Node node
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for node in x:
 *                 xs.push_back(node.wrapped)
 */
  }

  /* "primitiv/_function.pyx":174
 *             return wrapNode(func_sum(xs))
 *         else:
 *             return wrapNode(func_sum((<Node> x).wrapped, <unsigned> dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dim); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    try {
      __pyx_t_7 = primitiv::functions::sum<primitiv::Node>(((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x)->wrapped, ((unsigned int)__pyx_t_8));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "primitiv/_function.pyx":166
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("primitiv._function.functions.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":177
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_55mean(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_55mean = {"mean", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_55mean, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_55mean(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mean") < 0)) __PYX_ERR(0, 177, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_dim = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 177, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_54mean(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_54mean(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim) {
  std::vector<primitiv::Node>  __pyx_v_xs;
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_node = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  primitiv::Node __pyx_t_7;
  unsigned int __pyx_t_8;
  __Pyx_RefNannySetupContext("mean", 0);

  /* "primitiv/_function.pyx":180
 *         cdef vector[CppNode] xs
 *         cdef Node node
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for node in x:
 *                 xs.push_back(node.wrapped)
 */
  __pyx_t_1 = PyList_Check(__pyx_v_x); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":181
 *         cdef Node node
 *         if isinstance(x, list):
 *             for node in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(node.wrapped)
 *             return wrapNode(func_mean(xs))
 */
    if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
      __pyx_t_3 = __pyx_v_x; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 181, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_8primitiv_6_graph_Node))))) __PYX_ERR(0, 181, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_node, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "primitiv/_function.pyx":182
 *         if isinstance(x, list):
 *             for node in x:
 *                 xs.push_back(node.wrapped)             # <<<<<<<<<<<<<<
 *             return wrapNode(func_mean(xs))
 *         else:
 */
      try {
        __pyx_v_xs.push_back(__pyx_v_node->wrapped);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 182, __pyx_L1_error)
      }

      /* "primitiv/_function.pyx":181
 *         cdef Node node
 *         if isinstance(x, list):
 *             for node in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(node.wrapped)
 *             return wrapNode(func_mean(xs))
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":183
 *             for node in x:
 *                 xs.push_back(node.wrapped)
 *             return wrapNode(func_mean(xs))             # <<<<<<<<<<<<<<
 *         else:
 *             return wrapNode(func_mean((<Node> x).wrapped, <unsigned> dim))
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_7 = primitiv::functions::mean(__pyx_v_xs);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 183, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":180
 *         cdef vector[CppNode] xs
 *         cdef Node node
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for node in x:
 *                 xs.push_back(node.wrapped)
 */
  }

  /* "primitiv/_function.pyx":185
 *             return wrapNode(func_mean(xs))
 *         else:
 *             return wrapNode(func_mean((<Node> x).wrapped, <unsigned> dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dim); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L1_error)
    try {
      __pyx_t_7 = primitiv::functions::mean<primitiv::Node>(((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x)->wrapped, ((unsigned int)__pyx_t_8));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 185, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "primitiv/_function.pyx":177
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("primitiv._function.functions.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":188
 * 
 *     @staticmethod
 *     def broadcast(Node x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_57broadcast(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_57broadcast = {"broadcast", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_57broadcast, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_57broadcast(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  unsigned int __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("broadcast (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,&__pyx_n_s_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("broadcast", 1, 3, 3, 1); __PYX_ERR(0, 188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("broadcast", 1, 3, 3, 2); __PYX_ERR(0, 188, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "broadcast") < 0)) __PYX_ERR(0, 188, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_size == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("broadcast", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.broadcast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_56broadcast(__pyx_self, __pyx_v_x, __pyx_v_dim, __pyx_v_size);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_56broadcast(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("broadcast", 0);

  /* "primitiv/_function.pyx":189
 *     @staticmethod
 *     def broadcast(Node x, unsigned dim, unsigned size):
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::broadcast<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_dim, __pyx_v_size);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 189, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":188
 * 
 *     @staticmethod
 *     def broadcast(Node x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.broadcast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":192
 * 
 *     @staticmethod
 *     def logsumexp(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_logsumexp(x.wrapped, dim))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_59logsumexp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_59logsumexp = {"logsumexp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_59logsumexp, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_59logsumexp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logsumexp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("logsumexp", 1, 2, 2, 1); __PYX_ERR(0, 192, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logsumexp") < 0)) __PYX_ERR(0, 192, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logsumexp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 192, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.logsumexp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_58logsumexp(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_58logsumexp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("logsumexp", 0);

  /* "primitiv/_function.pyx":193
 *     @staticmethod
 *     def logsumexp(Node x, unsigned dim):
 *         return wrapNode(func_logsumexp(x.wrapped, dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::logsumexp<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 193, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":192
 * 
 *     @staticmethod
 *     def logsumexp(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_logsumexp(x.wrapped, dim))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.logsumexp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":196
 * 
 *     @staticmethod
 *     def log_softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log_softmax(x.wrapped, dim))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_61log_softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_61log_softmax = {"log_softmax", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_61log_softmax, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_61log_softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_softmax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log_softmax", 1, 2, 2, 1); __PYX_ERR(0, 196, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log_softmax") < 0)) __PYX_ERR(0, 196, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log_softmax", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.log_softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_60log_softmax(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_60log_softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("log_softmax", 0);

  /* "primitiv/_function.pyx":197
 *     @staticmethod
 *     def log_softmax(Node x, unsigned dim):
 *         return wrapNode(func_log_softmax(x.wrapped, dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::log_softmax<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 197, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":196
 * 
 *     @staticmethod
 *     def log_softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log_softmax(x.wrapped, dim))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.log_softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":200
 * 
 *     @staticmethod
 *     def softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softmax(x.wrapped, dim))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_63softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_63softmax = {"softmax", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_63softmax, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_63softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softmax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("softmax", 1, 2, 2, 1); __PYX_ERR(0, 200, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "softmax") < 0)) __PYX_ERR(0, 200, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 200, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("softmax", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_62softmax(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_62softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("softmax", 0);

  /* "primitiv/_function.pyx":201
 *     @staticmethod
 *     def softmax(Node x, unsigned dim):
 *         return wrapNode(func_softmax(x.wrapped, dim))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::softmax<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 201, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":200
 * 
 *     @staticmethod
 *     def softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softmax(x.wrapped, dim))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":204
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Node x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_65softmax_cross_entropy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_65softmax_cross_entropy = {"softmax_cross_entropy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_65softmax_cross_entropy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_65softmax_cross_entropy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softmax_cross_entropy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,&__pyx_n_s_dim,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("softmax_cross_entropy", 1, 3, 3, 1); __PYX_ERR(0, 204, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("softmax_cross_entropy", 1, 3, 3, 2); __PYX_ERR(0, 204, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "softmax_cross_entropy") < 0)) __PYX_ERR(0, 204, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_t = values[1];
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("softmax_cross_entropy", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 204, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.softmax_cross_entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_64softmax_cross_entropy(__pyx_self, __pyx_v_x, __pyx_v_t, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_64softmax_cross_entropy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, PyObject *__pyx_v_t, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  primitiv::Node __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::vector<unsigned int>  __pyx_t_5;
  __Pyx_RefNannySetupContext("softmax_cross_entropy", 0);

  /* "primitiv/_function.pyx":205
 *     @staticmethod
 *     def softmax_cross_entropy(Node x, t, unsigned dim):
 *         if isinstance(t, Node):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 *         elif isinstance(t, list):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_t, __pyx_ptype_8primitiv_6_graph_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":206
 *     def softmax_cross_entropy(Node x, t, unsigned dim):
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))             # <<<<<<<<<<<<<<
 *         elif isinstance(t, list):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, <vector[unsigned]> t, dim))
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = primitiv::functions::softmax_cross_entropy<primitiv::Node>(__pyx_v_x->wrapped, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_t)->wrapped, __pyx_v_dim);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 206, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":205
 *     @staticmethod
 *     def softmax_cross_entropy(Node x, t, unsigned dim):
 *         if isinstance(t, Node):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 *         elif isinstance(t, list):
 */
  }

  /* "primitiv/_function.pyx":207
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 *         elif isinstance(t, list):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, <vector[unsigned]> t, dim))
 *         else:
 */
  __pyx_t_2 = PyList_Check(__pyx_v_t); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "primitiv/_function.pyx":208
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 *         elif isinstance(t, list):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, <vector[unsigned]> t, dim))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`t` has incorrect type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    try {
      __pyx_t_3 = primitiv::functions::softmax_cross_entropy<primitiv::Node>(__pyx_v_x->wrapped, ((std::vector<unsigned int> )__pyx_t_5), __pyx_v_dim);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 208, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":207
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 *         elif isinstance(t, list):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, <vector[unsigned]> t, dim))
 *         else:
 */
  }

  /* "primitiv/_function.pyx":210
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, <vector[unsigned]> t, dim))
 *         else:
 *             raise TypeError("`t` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 210, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":204
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Node x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("primitiv._function.functions.softmax_cross_entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":213
 * 
 *     @staticmethod
 *     def stop_gradient(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_stop_gradient(x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_67stop_gradient(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_67stop_gradient = {"stop_gradient", (PyCFunction)__pyx_pw_8primitiv_9_function_9functions_67stop_gradient, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_67stop_gradient(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_gradient (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_66stop_gradient(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_66stop_gradient(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("stop_gradient", 0);

  /* "primitiv/_function.pyx":214
 *     @staticmethod
 *     def stop_gradient(Node x):
 *         return wrapNode(func_stop_gradient(x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::stop_gradient<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 214, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":213
 * 
 *     @staticmethod
 *     def stop_gradient(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_stop_gradient(x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.stop_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":217
 * 
 *     @staticmethod
 *     def conv2d(Node x, Node w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_69conv2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_69conv2d = {"conv2d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_69conv2d, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_69conv2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_w = 0;
  unsigned int __pyx_v_padding0;
  unsigned int __pyx_v_padding1;
  unsigned int __pyx_v_stride0;
  unsigned int __pyx_v_stride1;
  unsigned int __pyx_v_dilation0;
  unsigned int __pyx_v_dilation1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv2d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_w,&__pyx_n_s_padding0,&__pyx_n_s_padding1,&__pyx_n_s_stride0,&__pyx_n_s_stride1,&__pyx_n_s_dilation0,&__pyx_n_s_dilation1,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 1); __PYX_ERR(0, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 2); __PYX_ERR(0, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 3); __PYX_ERR(0, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 4); __PYX_ERR(0, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 5); __PYX_ERR(0, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dilation0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 6); __PYX_ERR(0, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dilation1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 7); __PYX_ERR(0, 217, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "conv2d") < 0)) __PYX_ERR(0, 217, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_w = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[1]);
    __pyx_v_padding0 = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_padding0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    __pyx_v_padding1 = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_padding1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    __pyx_v_stride0 = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_stride0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L3_error)
    __pyx_v_stride1 = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_stride1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L3_error)
    __pyx_v_dilation0 = __Pyx_PyInt_As_unsigned_int(values[6]); if (unlikely((__pyx_v_dilation0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
    __pyx_v_dilation1 = __Pyx_PyInt_As_unsigned_int(values[7]); if (unlikely((__pyx_v_dilation1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.conv2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 217, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w), __pyx_ptype_8primitiv_6_graph_Node, 1, "w", 0))) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_68conv2d(__pyx_self, __pyx_v_x, __pyx_v_w, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1, __pyx_v_dilation0, __pyx_v_dilation1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_68conv2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_w, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1, unsigned int __pyx_v_dilation0, unsigned int __pyx_v_dilation1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("conv2d", 0);

  /* "primitiv/_function.pyx":221
 *                unsigned stride0, unsigned stride1,
 *                unsigned dilation0, unsigned dilation1):
 *         return wrapNode(func_conv2d(x.wrapped, w.wrapped,             # <<<<<<<<<<<<<<
 *                                     padding0, padding1,
 *                                     stride0, stride1,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "primitiv/_function.pyx":224
 *                                     padding0, padding1,
 *                                     stride0, stride1,
 *                                     dilation0, dilation1))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_1 = primitiv::functions::conv2d<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_w->wrapped, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1, __pyx_v_dilation0, __pyx_v_dilation1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 221, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":221
 *                unsigned stride0, unsigned stride1,
 *                unsigned dilation0, unsigned dilation1):
 *         return wrapNode(func_conv2d(x.wrapped, w.wrapped,             # <<<<<<<<<<<<<<
 *                                     padding0, padding1,
 *                                     stride0, stride1,
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":217
 * 
 *     @staticmethod
 *     def conv2d(Node x, Node w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.conv2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":227
 * 
 *     @staticmethod
 *     def max_pool2d(Node x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_71max_pool2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_71max_pool2d = {"max_pool2d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_71max_pool2d, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_71max_pool2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  unsigned int __pyx_v_window0;
  unsigned int __pyx_v_window1;
  unsigned int __pyx_v_padding0;
  unsigned int __pyx_v_padding1;
  unsigned int __pyx_v_stride0;
  unsigned int __pyx_v_stride1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max_pool2d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_window0,&__pyx_n_s_window1,&__pyx_n_s_padding0,&__pyx_n_s_padding1,&__pyx_n_s_stride0,&__pyx_n_s_stride1,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_window0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 1); __PYX_ERR(0, 227, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_window1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 2); __PYX_ERR(0, 227, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 3); __PYX_ERR(0, 227, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 4); __PYX_ERR(0, 227, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 5); __PYX_ERR(0, 227, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 6); __PYX_ERR(0, 227, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "max_pool2d") < 0)) __PYX_ERR(0, 227, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_window0 = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_window0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L3_error)
    __pyx_v_window1 = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_window1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L3_error)
    __pyx_v_padding0 = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_padding0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L3_error)
    __pyx_v_padding1 = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_padding1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L3_error)
    __pyx_v_stride0 = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_stride0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
    __pyx_v_stride1 = __Pyx_PyInt_As_unsigned_int(values[6]); if (unlikely((__pyx_v_stride1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.max_pool2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_70max_pool2d(__pyx_self, __pyx_v_x, __pyx_v_window0, __pyx_v_window1, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_70max_pool2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, unsigned int __pyx_v_window0, unsigned int __pyx_v_window1, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("max_pool2d", 0);

  /* "primitiv/_function.pyx":231
 *                    unsigned padding0, unsigned padding1,
 *                    unsigned stride0, unsigned stride1):
 *         return wrapNode(func_max_pool2d(x.wrapped,             # <<<<<<<<<<<<<<
 *                                         window0, window1,
 *                                         padding0, padding1,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "primitiv/_function.pyx":234
 *                                         window0, window1,
 *                                         padding0, padding1,
 *                                         stride0, stride1))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_1 = primitiv::functions::max_pool2d<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_window0, __pyx_v_window1, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 231, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":231
 *                    unsigned padding0, unsigned padding1,
 *                    unsigned stride0, unsigned stride1):
 *         return wrapNode(func_max_pool2d(x.wrapped,             # <<<<<<<<<<<<<<
 *                                         window0, window1,
 *                                         padding0, padding1,
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":227
 * 
 *     @staticmethod
 *     def max_pool2d(Node x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.max_pool2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":237
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_73constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_73constant = {"constant", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_73constant, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_73constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_k;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_k,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("constant", 0, 2, 4, 1); __PYX_ERR(0, 237, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "constant") < 0)) __PYX_ERR(0, 237, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_k = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_k == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[2]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constant", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 237, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 237, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_72constant(__pyx_self, __pyx_v_shape, __pyx_v_k, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_72constant(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_k, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("constant", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":238
 *     @staticmethod
 *     def constant(shape, float k, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":239
 *     def constant(shape, float k, Device device = None, Graph graph = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":238
 *     @staticmethod
 *     def constant(shape, float k, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  }

  /* "primitiv/_function.pyx":240
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_constant_node(normShape(shape).wrapped, k,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":241
 *             device = Device.get_default()
 *         if graph is None:
 *             graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_constant_node(normShape(shape).wrapped, k,
 *                                            get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":240
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_constant_node(normShape(shape).wrapped, k,
 */
  }

  /* "primitiv/_function.pyx":242
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_constant_node(normShape(shape).wrapped, k,             # <<<<<<<<<<<<<<
 *                                            get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":243
 *             graph = Graph.get_default()
 *         return wrapNode(func_constant_node(normShape(shape).wrapped, k,
 *                                            get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::constant_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_k, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 242, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":242
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_constant_node(normShape(shape).wrapped, k,             # <<<<<<<<<<<<<<
 *                                            get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":237
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":246
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_75zeros(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_75zeros = {"zeros", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_75zeros, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_75zeros(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zeros (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zeros") < 0)) __PYX_ERR(0, 246, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zeros", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.zeros", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 246, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_74zeros(__pyx_self, __pyx_v_shape, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_74zeros(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("zeros", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":247
 *     @staticmethod
 *     def zeros(shape, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":248
 *     def zeros(shape, Device device = None, Graph graph = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":247
 *     @staticmethod
 *     def zeros(shape, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  }

  /* "primitiv/_function.pyx":249
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_zeros_node(normShape(shape).wrapped,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":250
 *             device = Device.get_default()
 *         if graph is None:
 *             graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_zeros_node(normShape(shape).wrapped,
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":249
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_zeros_node(normShape(shape).wrapped,
 */
  }

  /* "primitiv/_function.pyx":251
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_zeros_node(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":252
 *             graph = Graph.get_default()
 *         return wrapNode(func_zeros_node(normShape(shape).wrapped,
 *                                         get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::zeros_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 251, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":251
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_zeros_node(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":246
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.zeros", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":255
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_77ones(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_77ones = {"ones", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_77ones, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_77ones(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ones (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ones") < 0)) __PYX_ERR(0, 255, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ones", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 255, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.ones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 255, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_76ones(__pyx_self, __pyx_v_shape, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_76ones(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("ones", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":256
 *     @staticmethod
 *     def ones(shape, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":257
 *     def ones(shape, Device device = None, Graph graph = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":256
 *     @staticmethod
 *     def ones(shape, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  }

  /* "primitiv/_function.pyx":258
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_ones_node(normShape(shape).wrapped,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":259
 *             device = Device.get_default()
 *         if graph is None:
 *             graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_ones_node(normShape(shape).wrapped,
 *                                        get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":258
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_ones_node(normShape(shape).wrapped,
 */
  }

  /* "primitiv/_function.pyx":260
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_ones_node(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                        get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":261
 *             graph = Graph.get_default()
 *         return wrapNode(func_ones_node(normShape(shape).wrapped,
 *                                        get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::ones_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 260, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":260
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_ones_node(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                        get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":255
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.ones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":264
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_79identity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_79identity = {"identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_79identity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_79identity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_size;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "identity") < 0)) __PYX_ERR(0, 264, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_size == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("identity", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 264, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 264, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_78identity(__pyx_self, __pyx_v_size, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_78identity(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_size, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("identity", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":265
 *     @staticmethod
 *     def identity(unsigned size, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":266
 *     def identity(unsigned size, Device device = None, Graph graph = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":265
 *     @staticmethod
 *     def identity(unsigned size, Device device = None, Graph graph = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         if graph is None:
 */
  }

  /* "primitiv/_function.pyx":267
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_identity_node(size, get_cpp_device(device), get_cpp_graph(graph)))
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":268
 *             device = Device.get_default()
 *         if graph is None:
 *             graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *         return wrapNode(func_identity_node(size, get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":267
 *         if device is None:
 *             device = Device.get_default()
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             graph = Graph.get_default()
 *         return wrapNode(func_identity_node(size, get_cpp_device(device), get_cpp_graph(graph)))
 */
  }

  /* "primitiv/_function.pyx":269
 *         if graph is None:
 *             graph = Graph.get_default()
 *         return wrapNode(func_identity_node(size, get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     class batch:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_6 = primitiv::functions::identity_node(__pyx_v_size, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 269, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":264
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.functions.identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":273
 *     class batch:
 *         @staticmethod
 *         def sum(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_5batch_1sum(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_5batch_1sum = {"sum", (PyCFunction)__pyx_pw_8primitiv_9_function_5batch_1sum, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_5batch_1sum(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_5batch_sum(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_5batch_sum(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "primitiv/_function.pyx":274
 *         @staticmethod
 *         def sum(Node x):
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::batch::sum<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":273
 *     class batch:
 *         @staticmethod
 *         def sum(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.batch.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":277
 * 
 *         @staticmethod
 *         def mean(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_5batch_3mean(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_5batch_3mean = {"mean", (PyCFunction)__pyx_pw_8primitiv_9_function_5batch_3mean, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_5batch_3mean(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_5batch_2mean(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_5batch_2mean(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mean", 0);

  /* "primitiv/_function.pyx":278
 *         @staticmethod
 *         def mean(Node x):
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::batch::mean<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 278, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":277
 * 
 *         @staticmethod
 *         def mean(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.batch.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":281
 * 
 *         @staticmethod
 *         def normalize(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_5batch_5normalize(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_5batch_5normalize = {"normalize", (PyCFunction)__pyx_pw_8primitiv_9_function_5batch_5normalize, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_5batch_5normalize(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_5batch_4normalize(__pyx_self, ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_5batch_4normalize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "primitiv/_function.pyx":282
 *         @staticmethod
 *         def normalize(Node x):
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))             # <<<<<<<<<<<<<<
 * 
 *     class random:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::batch::normalize<primitiv::Node>(__pyx_v_x->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 282, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":281
 * 
 *         @staticmethod
 *         def normalize(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.batch.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":286
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_1bernoulli(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_1bernoulli = {"bernoulli", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_1bernoulli, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_1bernoulli(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_p;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bernoulli (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_p,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bernoulli", 0, 2, 4, 1); __PYX_ERR(0, 286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bernoulli") < 0)) __PYX_ERR(0, 286, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_p = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_p == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[2]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bernoulli", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.bernoulli", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 286, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_bernoulli(__pyx_self, __pyx_v_shape, __pyx_v_p, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_bernoulli(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_p, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("bernoulli", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":287
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":288
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             if graph is None:
 *                 graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":287
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  }

  /* "primitiv/_function.pyx":289
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_bernoulli_node(normShape(shape).wrapped, p,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":290
 *                 device = Device.get_default()
 *             if graph is None:
 *                 graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *             return wrapNode(func_random_bernoulli_node(normShape(shape).wrapped, p,
 *                                                        get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":289
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_bernoulli_node(normShape(shape).wrapped, p,
 */
  }

  /* "primitiv/_function.pyx":291
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_bernoulli_node(normShape(shape).wrapped, p,             # <<<<<<<<<<<<<<
 *                                                        get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":292
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_bernoulli_node(normShape(shape).wrapped, p,
 *                                                        get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::bernoulli_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_p, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 291, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":291
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_bernoulli_node(normShape(shape).wrapped, p,             # <<<<<<<<<<<<<<
 *                                                        get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":286
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.bernoulli", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":295
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_3uniform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_3uniform = {"uniform", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_3uniform, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_3uniform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_lower;
  float __pyx_v_upper;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uniform (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_lower,&__pyx_n_s_upper,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[4] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("uniform", 0, 3, 5, 1); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("uniform", 0, 3, 5, 2); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uniform") < 0)) __PYX_ERR(0, 295, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_lower = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lower == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_upper = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_upper == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uniform", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.uniform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_2uniform(__pyx_self, __pyx_v_shape, __pyx_v_lower, __pyx_v_upper, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_2uniform(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_lower, float __pyx_v_upper, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("uniform", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":296
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":297
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             if graph is None:
 *                 graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":296
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  }

  /* "primitiv/_function.pyx":298
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_uniform_node(normShape(shape).wrapped, lower, upper,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":299
 *                 device = Device.get_default()
 *             if graph is None:
 *                 graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *             return wrapNode(func_random_uniform_node(normShape(shape).wrapped, lower, upper,
 *                                                      get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":298
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_uniform_node(normShape(shape).wrapped, lower, upper,
 */
  }

  /* "primitiv/_function.pyx":300
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_uniform_node(normShape(shape).wrapped, lower, upper,             # <<<<<<<<<<<<<<
 *                                                      get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":301
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_uniform_node(normShape(shape).wrapped, lower, upper,
 *                                                      get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::uniform_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_lower, __pyx_v_upper, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":300
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_uniform_node(normShape(shape).wrapped, lower, upper,             # <<<<<<<<<<<<<<
 *                                                      get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":295
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.uniform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":304
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_5normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_5normal = {"normal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_5normal, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_5normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_mean;
  float __pyx_v_sd;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_mean,&__pyx_n_s_sd,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[4] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normal", 0, 3, 5, 1); __PYX_ERR(0, 304, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normal", 0, 3, 5, 2); __PYX_ERR(0, 304, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normal") < 0)) __PYX_ERR(0, 304, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_mean = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_mean == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L3_error)
    __pyx_v_sd = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_sd == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normal", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 304, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_4normal(__pyx_self, __pyx_v_shape, __pyx_v_mean, __pyx_v_sd, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_4normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("normal", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":305
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":306
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             if graph is None:
 *                 graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":305
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  }

  /* "primitiv/_function.pyx":307
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_normal_node(normShape(shape).wrapped, mean, sd,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":308
 *                 device = Device.get_default()
 *             if graph is None:
 *                 graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *             return wrapNode(func_random_normal_node(normShape(shape).wrapped, mean, sd,
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":307
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_normal_node(normShape(shape).wrapped, mean, sd,
 */
  }

  /* "primitiv/_function.pyx":309
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_normal_node(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":310
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_normal_node(normShape(shape).wrapped, mean, sd,
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::normal_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_mean, __pyx_v_sd, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 309, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":309
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_normal_node(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":304
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":313
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_7log_normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_7log_normal = {"log_normal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_7log_normal, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_7log_normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_mean;
  float __pyx_v_sd;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_normal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_mean,&__pyx_n_s_sd,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[4] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log_normal", 0, 3, 5, 1); __PYX_ERR(0, 313, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log_normal", 0, 3, 5, 2); __PYX_ERR(0, 313, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log_normal") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_mean = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_mean == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
    __pyx_v_sd = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_sd == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log_normal", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.log_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_6log_normal(__pyx_self, __pyx_v_shape, __pyx_v_mean, __pyx_v_sd, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_6log_normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("log_normal", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":314
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":315
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             if graph is None:
 *                 graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":314
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  }

  /* "primitiv/_function.pyx":316
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_log_normal_node(normShape(shape).wrapped, mean, sd,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":317
 *                 device = Device.get_default()
 *             if graph is None:
 *                 graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *             return wrapNode(func_random_log_normal_node(normShape(shape).wrapped, mean, sd,
 *                                                         get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":316
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_log_normal_node(normShape(shape).wrapped, mean, sd,
 */
  }

  /* "primitiv/_function.pyx":318
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_log_normal_node(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":319
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_log_normal_node(normShape(shape).wrapped, mean, sd,
 *                                                         get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::log_normal_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_mean, __pyx_v_sd, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 318, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":318
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_log_normal_node(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":313
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.log_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":322
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_9gumbel(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_9gumbel = {"gumbel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_9gumbel, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_9gumbel(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_mu;
  float __pyx_v_beta;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gumbel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_mu,&__pyx_n_s_beta,&__pyx_n_s_device,&__pyx_n_s_graph,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    values[4] = (PyObject *)((struct __pyx_obj_8primitiv_6_graph_Graph *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gumbel", 0, 3, 5, 1); __PYX_ERR(0, 322, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gumbel", 0, 3, 5, 2); __PYX_ERR(0, 322, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gumbel") < 0)) __PYX_ERR(0, 322, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_mu = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_mu == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
    __pyx_v_graph = ((struct __pyx_obj_8primitiv_6_graph_Graph *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gumbel", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.gumbel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 322, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8primitiv_6_graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_8gumbel(__pyx_self, __pyx_v_shape, __pyx_v_mu, __pyx_v_beta, __pyx_v_device, __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_8gumbel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mu, float __pyx_v_beta, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device, struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Node __pyx_t_6;
  __Pyx_RefNannySetupContext("gumbel", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);
  __Pyx_INCREF((PyObject *)__pyx_v_graph);

  /* "primitiv/_function.pyx":323
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":324
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             if graph is None:
 *                 graph = Graph.get_default()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":323
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             if graph is None:
 */
  }

  /* "primitiv/_function.pyx":325
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_gumbel_node(normShape(shape).wrapped, mu, beta,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":326
 *                 device = Device.get_default()
 *             if graph is None:
 *                 graph = Graph.get_default()             # <<<<<<<<<<<<<<
 *             return wrapNode(func_random_gumbel_node(normShape(shape).wrapped, mu, beta,
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_6_graph_Graph), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_6_graph_Graph))))) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_graph, ((struct __pyx_obj_8primitiv_6_graph_Graph *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":325
 *             if device is None:
 *                 device = Device.get_default()
 *             if graph is None:             # <<<<<<<<<<<<<<
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_gumbel_node(normShape(shape).wrapped, mu, beta,
 */
  }

  /* "primitiv/_function.pyx":327
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_gumbel_node(normShape(shape).wrapped, mu, beta,             # <<<<<<<<<<<<<<
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":328
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_gumbel_node(normShape(shape).wrapped, mu, beta,
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::gumbel_node(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_mu, __pyx_v_beta, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device), __pyx_f_8primitiv_5utils_get_cpp_graph(__pyx_v_graph));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 327, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":327
 *             if graph is None:
 *                 graph = Graph.get_default()
 *             return wrapNode(func_random_gumbel_node(normShape(shape).wrapped, mu, beta,             # <<<<<<<<<<<<<<
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":322
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.gumbel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XDECREF((PyObject *)__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":331
 * 
 *     @staticmethod
 *     def dropout(Node x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_dropout(x.wrapped, rate, enabled))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_9functions_81dropout(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_9functions_81dropout = {"dropout", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_9functions_81dropout, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_9functions_81dropout(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x = 0;
  float __pyx_v_rate;
  bool __pyx_v_enabled;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dropout (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_rate,&__pyx_n_s_enabled,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dropout", 1, 3, 3, 1); __PYX_ERR(0, 331, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dropout", 1, 3, 3, 2); __PYX_ERR(0, 331, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dropout") < 0)) __PYX_ERR(0, 331, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_6_graph_Node *)values[0]);
    __pyx_v_rate = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_enabled == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dropout", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 331, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.functions.dropout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_6_graph_Node, 1, "x", 0))) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_9functions_80dropout(__pyx_self, __pyx_v_x, __pyx_v_rate, __pyx_v_enabled);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_9functions_80dropout(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_x, float __pyx_v_rate, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Node __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dropout", 0);

  /* "primitiv/_function.pyx":332
 *     @staticmethod
 *     def dropout(Node x, float rate, bool enabled):
 *         return wrapNode(func_dropout(x.wrapped, rate, enabled))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::dropout<primitiv::Node>(__pyx_v_x->wrapped, __pyx_v_rate, __pyx_v_enabled);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_8primitiv_6_graph_wrapNode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":331
 * 
 *     @staticmethod
 *     def dropout(Node x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_dropout(x.wrapped, rate, enabled))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("primitiv._function.functions.dropout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":338
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_1raw_input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_1raw_input = {"raw_input", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_1raw_input, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_1raw_input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  std::vector<float>  __pyx_v_data;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("raw_input (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_data,&__pyx_n_s_device,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("raw_input", 0, 2, 3, 1); __PYX_ERR(0, 338, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "raw_input") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_data = __pyx_convert_vector_from_py_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("raw_input", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.raw_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_raw_input(__pyx_self, __pyx_v_shape, __pyx_v_data, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_raw_input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, std::vector<float>  __pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("raw_input", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":339
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_input_tensor(normShape(shape).wrapped, data,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":340
 *     def raw_input(shape, vector[float] data, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_input_tensor(normShape(shape).wrapped, data,
 *                                                                            get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":339
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_input_tensor(normShape(shape).wrapped, data,
 */
  }

  /* "primitiv/_function.pyx":341
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_input_tensor(normShape(shape).wrapped, data,             # <<<<<<<<<<<<<<
 *                                                                            get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":342
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_input_tensor(normShape(shape).wrapped, data,
 *                                                                            get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     # NOTE(vbkaisetsu)
 */
  try {
    __pyx_t_6 = primitiv::functions::input_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_data, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":341
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_input_tensor(normShape(shape).wrapped, data,             # <<<<<<<<<<<<<<
 *                                                                            get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":338
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.raw_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":348
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_3input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_3input = {"input", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_3input, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_3input(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input") < 0)) __PYX_ERR(0, 348, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 348, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_2input(__pyx_self, __pyx_v_data, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_2input(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_v_shape = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("input", 0);
  __Pyx_INCREF(__pyx_v_data);

  /* "primitiv/_function.pyx":356
 *         # In addition, we also don't check whether each ndarray has the same shape or not.
 *         # This condition will be checked in ndarrays_to_vector().
 *         if isinstance(data, np.ndarray):             # <<<<<<<<<<<<<<
 *             data = [data]
 *         if isinstance(data, list):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_data, __pyx_ptype_5numpy_ndarray); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":357
 *         # This condition will be checked in ndarrays_to_vector().
 *         if isinstance(data, np.ndarray):
 *             data = [data]             # <<<<<<<<<<<<<<
 *         if isinstance(data, list):
 *             if len(data) == 0:
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_data);
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":356
 *         # In addition, we also don't check whether each ndarray has the same shape or not.
 *         # This condition will be checked in ndarrays_to_vector().
 *         if isinstance(data, np.ndarray):             # <<<<<<<<<<<<<<
 *             data = [data]
 *         if isinstance(data, list):
 */
  }

  /* "primitiv/_function.pyx":358
 *         if isinstance(data, np.ndarray):
 *             data = [data]
 *         if isinstance(data, list):             # <<<<<<<<<<<<<<
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 */
  __pyx_t_2 = PyList_Check(__pyx_v_data); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "primitiv/_function.pyx":359
 *             data = [data]
 *         if isinstance(data, list):
 *             if len(data) == 0:             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 359, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_4 == 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "primitiv/_function.pyx":360
 *         if isinstance(data, list):
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")             # <<<<<<<<<<<<<<
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 360, __pyx_L1_error)

      /* "primitiv/_function.pyx":359
 *             data = [data]
 *         if isinstance(data, list):
 *             if len(data) == 0:             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 */
    }

    /* "primitiv/_function.pyx":361
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 *             shape = Shape(data[0].shape, len(data))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_3, __pyx_ptype_5numpy_ndarray); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "primitiv/_function.pyx":362
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")             # <<<<<<<<<<<<<<
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 362, __pyx_L1_error)

      /* "primitiv/_function.pyx":361
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):             # <<<<<<<<<<<<<<
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 *             shape = Shape(data[0].shape, len(data))
 */
    }

    /* "primitiv/_function.pyx":363
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 *             shape = Shape(data[0].shape, len(data))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`data` has incorrect type.")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 363, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8primitiv_6_shape_Shape), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_shape = ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":358
 *         if isinstance(data, np.ndarray):
 *             data = [data]
 *         if isinstance(data, list):             # <<<<<<<<<<<<<<
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")
 */
    goto __pyx_L4;
  }

  /* "primitiv/_function.pyx":365
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 *             raise TypeError("`data` has incorrect type.")             # <<<<<<<<<<<<<<
 *         return tensor_functions.raw_input(shape, ndarrays_to_vector(data), device)
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 365, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "primitiv/_function.pyx":366
 *         else:
 *             raise TypeError("`data` has incorrect type.")
 *         return tensor_functions.raw_input(shape, ndarrays_to_vector(data), device)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_tensor_functions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_raw_input); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyList_CheckExact(__pyx_v_data))||((__pyx_v_data) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_data)->tp_name), 0))) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_vector_to_py_float(__pyx_f_8primitiv_5utils_ndarrays_to_vector(((PyObject*)__pyx_v_data))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, ((PyObject *)__pyx_v_shape), __pyx_t_6, ((PyObject *)__pyx_v_device)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, ((PyObject *)__pyx_v_shape), __pyx_t_6, ((PyObject *)__pyx_v_device)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_shape));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_shape));
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_shape));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_device));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_device));
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, ((PyObject *)__pyx_v_device));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":348
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_shape);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":369
 * 
 *     @staticmethod
 *     def parameter(Parameter param):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_5parameter(PyObject *__pyx_self, PyObject *__pyx_v_param); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_5parameter = {"parameter", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_5parameter, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_5parameter(PyObject *__pyx_self, PyObject *__pyx_v_param) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parameter (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param), __pyx_ptype_8primitiv_10_parameter_Parameter, 1, "param", 0))) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_4parameter(__pyx_self, ((struct __pyx_obj_8primitiv_10_parameter_Parameter *)__pyx_v_param));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_4parameter(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_10_parameter_Parameter *__pyx_v_param) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("parameter", 0);

  /* "primitiv/_function.pyx":370
 *     @staticmethod
 *     def parameter(Parameter param):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::parameter_tensor((__pyx_v_param->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 370, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 370, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":369
 * 
 *     @staticmethod
 *     def parameter(Parameter param):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":373
 * 
 *     @staticmethod
 *     def copy(Tensor x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_7copy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_7copy = {"copy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_7copy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_7copy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 373, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_6copy(__pyx_self, __pyx_v_x, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_6copy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":374
 *     @staticmethod
 *     def copy(Tensor x, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_copy(x.wrapped[0], get_cpp_device(device))))
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":375
 *     def copy(Tensor x, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_copy(x.wrapped[0], get_cpp_device(device))))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":374
 *     @staticmethod
 *     def copy(Tensor x, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_copy(x.wrapped[0], get_cpp_device(device))))
 */
  }

  /* "primitiv/_function.pyx":376
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_copy(x.wrapped[0], get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_6 = primitiv::functions::copy<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 376, __pyx_L1_error)
  }
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 376, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":373
 * 
 *     @staticmethod
 *     def copy(Tensor x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":379
 * 
 *     @staticmethod
 *     def pick(Tensor x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_9pick(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_9pick = {"pick", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_9pick, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_9pick(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  std::vector<unsigned int>  __pyx_v_ids;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pick (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_ids,&__pyx_n_s_dim,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pick", 1, 3, 3, 1); __PYX_ERR(0, 379, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pick", 1, 3, 3, 2); __PYX_ERR(0, 379, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pick") < 0)) __PYX_ERR(0, 379, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_ids = __pyx_convert_vector_from_py_unsigned_int(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L3_error)
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pick", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 379, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.pick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 379, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_8pick(__pyx_self, __pyx_v_x, __pyx_v_ids, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_8pick(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, std::vector<unsigned int>  __pyx_v_ids, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pick", 0);

  /* "primitiv/_function.pyx":380
 *     @staticmethod
 *     def pick(Tensor x, vector[unsigned] ids, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::pick<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_ids, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 380, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 380, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":379
 * 
 *     @staticmethod
 *     def pick(Tensor x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.pick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":383
 * 
 *     @staticmethod
 *     def slice(Tensor x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_11slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_11slice = {"slice", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_11slice, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_11slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  unsigned int __pyx_v_lower;
  unsigned int __pyx_v_upper;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, 1); __PYX_ERR(0, 383, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, 2); __PYX_ERR(0, 383, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, 3); __PYX_ERR(0, 383, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slice") < 0)) __PYX_ERR(0, 383, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_lower = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_lower == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_upper = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_upper == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slice", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 383, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 383, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_10slice(__pyx_self, __pyx_v_x, __pyx_v_dim, __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_10slice(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_lower, unsigned int __pyx_v_upper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("slice", 0);

  /* "primitiv/_function.pyx":384
 *     @staticmethod
 *     def slice(Tensor x, unsigned dim, unsigned lower, unsigned upper):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::slice<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_dim, __pyx_v_lower, __pyx_v_upper);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":383
 * 
 *     @staticmethod
 *     def slice(Tensor x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":387
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] vec
 *         cdef Tensor x
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_13concat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_13concat = {"concat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_13concat, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_13concat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("concat", 1, 2, 2, 1); __PYX_ERR(0, 387, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "concat") < 0)) __PYX_ERR(0, 387, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xs = values[0];
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 387, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 387, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_12concat(__pyx_self, __pyx_v_xs, __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_12concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_xs, unsigned int __pyx_v_dim) {
  std::vector<primitiv::Tensor>  __pyx_v_vec;
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  primitiv::Tensor __pyx_t_5;
  primitiv::Tensor *__pyx_t_6;
  __Pyx_RefNannySetupContext("concat", 0);

  /* "primitiv/_function.pyx":390
 *         cdef vector[CppTensor] vec
 *         cdef Tensor x
 *         for x in xs:             # <<<<<<<<<<<<<<
 *             vec.push_back(x.wrapped[0])
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_concat(vec, dim)))
 */
  if (likely(PyList_CheckExact(__pyx_v_xs)) || PyTuple_CheckExact(__pyx_v_xs)) {
    __pyx_t_1 = __pyx_v_xs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_xs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 390, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 390, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 390, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_8primitiv_7_tensor_Tensor))))) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_x, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "primitiv/_function.pyx":391
 *         cdef Tensor x
 *         for x in xs:
 *             vec.push_back(x.wrapped[0])             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_concat(vec, dim)))
 * 
 */
    try {
      __pyx_v_vec.push_back((__pyx_v_x->wrapped[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 391, __pyx_L1_error)
    }

    /* "primitiv/_function.pyx":390
 *         cdef vector[CppTensor] vec
 *         cdef Tensor x
 *         for x in xs:             # <<<<<<<<<<<<<<
 *             vec.push_back(x.wrapped[0])
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_concat(vec, dim)))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "primitiv/_function.pyx":392
 *         for x in xs:
 *             vec.push_back(x.wrapped[0])
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_concat(vec, dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = primitiv::functions::concat<primitiv::Tensor>(__pyx_v_vec, __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 392, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = new primitiv::Tensor(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 392, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":387
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] vec
 *         cdef Tensor x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":395
 * 
 *     @staticmethod
 *     def reshape(Tensor x, new_shape):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_15reshape(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_15reshape = {"reshape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_15reshape, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_15reshape(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  PyObject *__pyx_v_new_shape = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reshape (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_new_shape,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_shape)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reshape", 1, 2, 2, 1); __PYX_ERR(0, 395, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reshape") < 0)) __PYX_ERR(0, 395, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_new_shape = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reshape", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 395, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_14reshape(__pyx_self, __pyx_v_x, __pyx_v_new_shape);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_14reshape(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, PyObject *__pyx_v_new_shape) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  primitiv::Tensor __pyx_t_2;
  primitiv::Tensor *__pyx_t_3;
  __Pyx_RefNannySetupContext("reshape", 0);

  /* "primitiv/_function.pyx":396
 *     @staticmethod
 *     def reshape(Tensor x, new_shape):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_new_shape)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = primitiv::functions::reshape<primitiv::Tensor>((__pyx_v_x->wrapped[0]), ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_1)->wrapped);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 396, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = new primitiv::Tensor(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 396, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":395
 * 
 *     @staticmethod
 *     def reshape(Tensor x, new_shape):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":399
 * 
 *     @staticmethod
 *     def flatten(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_17flatten(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_17flatten = {"flatten", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_17flatten, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_17flatten(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flatten (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 399, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_16flatten(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_16flatten(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("flatten", 0);

  /* "primitiv/_function.pyx":400
 *     @staticmethod
 *     def flatten(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::flatten<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":399
 * 
 *     @staticmethod
 *     def flatten(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.flatten", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":403
 * 
 *     @staticmethod
 *     def transpose(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_19transpose(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_19transpose = {"transpose", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_19transpose, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_19transpose(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_18transpose(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_18transpose(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("transpose", 0);

  /* "primitiv/_function.pyx":404
 *     @staticmethod
 *     def transpose(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::transpose<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 404, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 404, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":403
 * 
 *     @staticmethod
 *     def transpose(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":407
 * 
 *     @staticmethod
 *     def matmul(Tensor a, Tensor b):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_21matmul(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_21matmul = {"matmul", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_21matmul, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_21matmul(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_a = 0;
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matmul (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, 1); __PYX_ERR(0, 407, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matmul") < 0)) __PYX_ERR(0, 407, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_b = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 407, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "a", 0))) __PYX_ERR(0, 407, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "b", 0))) __PYX_ERR(0, 407, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_20matmul(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_20matmul(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_a, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("matmul", 0);

  /* "primitiv/_function.pyx":408
 *     @staticmethod
 *     def matmul(Tensor a, Tensor b):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::matmul<primitiv::Tensor>((__pyx_v_a->wrapped[0]), (__pyx_v_b->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 408, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 408, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":407
 * 
 *     @staticmethod
 *     def matmul(Tensor a, Tensor b):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":411
 * 
 *     @staticmethod
 *     def sqrt(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_23sqrt(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_23sqrt = {"sqrt", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_23sqrt, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_23sqrt(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sqrt (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_22sqrt(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_22sqrt(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("sqrt", 0);

  /* "primitiv/_function.pyx":412
 *     @staticmethod
 *     def sqrt(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::sqrt<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 412, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 412, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":411
 * 
 *     @staticmethod
 *     def sqrt(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":415
 * 
 *     @staticmethod
 *     def exp(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_25exp(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_25exp = {"exp", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_25exp, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_25exp(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 415, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_24exp(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_24exp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("exp", 0);

  /* "primitiv/_function.pyx":416
 *     @staticmethod
 *     def exp(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::exp<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 416, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 416, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":415
 * 
 *     @staticmethod
 *     def exp(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":419
 * 
 *     @staticmethod
 *     def log(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_27log(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_27log = {"log", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_27log, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_27log(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_26log(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_26log(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("log", 0);

  /* "primitiv/_function.pyx":420
 *     @staticmethod
 *     def log(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::log<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 420, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 420, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":419
 * 
 *     @staticmethod
 *     def log(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":423
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_29pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_29pow = {"pow", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_29pow, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_29pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_k,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, 1); __PYX_ERR(0, 423, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pow") < 0)) __PYX_ERR(0, 423, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_k = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 423, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_28pow(__pyx_self, __pyx_v_x, __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_28pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  int __pyx_t_8;
  float __pyx_t_9;
  __Pyx_RefNannySetupContext("pow", 0);

  /* "primitiv/_function.pyx":424
 *     @staticmethod
 *     def pow(x, k):
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8primitiv_7_tensor_Tensor); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_k); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_int_neg_2147483648, __pyx_v_k, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_k, __pyx_int_2147483647, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":425
 *     def pow(x, k):
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
    try {
      __pyx_t_6 = primitiv::functions::pown<primitiv::Tensor>((((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x)->wrapped[0]), ((int)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 425, __pyx_L1_error)
    }
    try {
      __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 425, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":424
 *     @staticmethod
 *     def pow(x, k):
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):
 */
  }

  /* "primitiv/_function.pyx":426
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8primitiv_7_tensor_Tensor); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_k); 
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_3 = __pyx_t_8;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_8 = PyFloat_Check(__pyx_v_k); 
  __pyx_t_2 = (__pyx_t_8 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":427
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_k); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
    try {
      __pyx_t_6 = primitiv::functions::pow<primitiv::Tensor>((((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x)->wrapped[0]), ((float)__pyx_t_9));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 427, __pyx_L1_error)
    }
    try {
      __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 427, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":426
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):
 */
  }

  /* "primitiv/_function.pyx":428
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))
 *         elif isinstance(x, Tensor) and isinstance(k, Tensor):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_x); 
  __pyx_t_8 = (__pyx_t_3 != 0);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_2 = __pyx_t_8;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_8 = PyFloat_Check(__pyx_v_x); 
  __pyx_t_3 = (__pyx_t_8 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L13_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_k, __pyx_ptype_8primitiv_7_tensor_Tensor); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_1) {

    /* "primitiv/_function.pyx":429
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, Tensor) and isinstance(k, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], (<Tensor> k).wrapped[0])))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 429, __pyx_L1_error)
    try {
      __pyx_t_6 = primitiv::functions::pow<primitiv::Tensor>(((float)__pyx_t_9), (((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_k)->wrapped[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 429, __pyx_L1_error)
    }
    try {
      __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 429, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":428
 *         elif isinstance(x, Tensor) and isinstance(k, (int, float)):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], <float> k)))
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))
 *         elif isinstance(x, Tensor) and isinstance(k, Tensor):
 */
  }

  /* "primitiv/_function.pyx":430
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))
 *         elif isinstance(x, Tensor) and isinstance(k, Tensor):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], (<Tensor> k).wrapped[0])))
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8primitiv_7_tensor_Tensor); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_k, __pyx_ptype_8primitiv_7_tensor_Tensor); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "primitiv/_function.pyx":431
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))
 *         elif isinstance(x, Tensor) and isinstance(k, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], (<Tensor> k).wrapped[0])))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`x` or `k` has incorrect type.")
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_6 = primitiv::functions::pow<primitiv::Tensor>((((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x)->wrapped[0]), (((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_k)->wrapped[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 431, __pyx_L1_error)
    }
    try {
      __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 431, __pyx_L1_error)
    }
    __pyx_t_4 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":430
 *         elif isinstance(x, (int, float)) and isinstance(k, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow(<float> x, (<Tensor> k).wrapped[0])))
 *         elif isinstance(x, Tensor) and isinstance(k, Tensor):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], (<Tensor> k).wrapped[0])))
 *         else:
 */
  }

  /* "primitiv/_function.pyx":433
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], (<Tensor> k).wrapped[0])))
 *         else:
 *             raise TypeError("`x` or `k` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 433, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":423
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":436
 * 
 *     @staticmethod
 *     def tanh(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_31tanh(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_31tanh = {"tanh", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_31tanh, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_31tanh(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tanh (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_30tanh(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_30tanh(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("tanh", 0);

  /* "primitiv/_function.pyx":437
 *     @staticmethod
 *     def tanh(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::tanh<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 437, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 437, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":436
 * 
 *     @staticmethod
 *     def tanh(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.tanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":440
 * 
 *     @staticmethod
 *     def sigmoid(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_33sigmoid(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_33sigmoid = {"sigmoid", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_33sigmoid, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_33sigmoid(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sigmoid (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 440, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_32sigmoid(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_32sigmoid(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("sigmoid", 0);

  /* "primitiv/_function.pyx":441
 *     @staticmethod
 *     def sigmoid(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::sigmoid<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 441, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 441, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":440
 * 
 *     @staticmethod
 *     def sigmoid(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.sigmoid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":444
 * 
 *     @staticmethod
 *     def softplus(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_35softplus(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_35softplus = {"softplus", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_35softplus, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_35softplus(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softplus (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 444, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_34softplus(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_34softplus(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("softplus", 0);

  /* "primitiv/_function.pyx":445
 *     @staticmethod
 *     def softplus(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::softplus<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 445, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 445, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":444
 * 
 *     @staticmethod
 *     def softplus(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.softplus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":448
 * 
 *     @staticmethod
 *     def sin(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_37sin(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_37sin = {"sin", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_37sin, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_37sin(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_36sin(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_36sin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("sin", 0);

  /* "primitiv/_function.pyx":449
 *     @staticmethod
 *     def sin(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::sin<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 449, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 449, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":448
 * 
 *     @staticmethod
 *     def sin(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":452
 * 
 *     @staticmethod
 *     def cos(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_39cos(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_39cos = {"cos", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_39cos, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_39cos(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cos (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 452, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_38cos(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_38cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("cos", 0);

  /* "primitiv/_function.pyx":453
 *     @staticmethod
 *     def cos(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::cos<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 453, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 453, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":452
 * 
 *     @staticmethod
 *     def cos(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":456
 * 
 *     @staticmethod
 *     def tan(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_41tan(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_41tan = {"tan", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_41tan, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_41tan(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tan (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_40tan(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_40tan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("tan", 0);

  /* "primitiv/_function.pyx":457
 *     @staticmethod
 *     def tan(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::tan<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 457, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 457, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":456
 * 
 *     @staticmethod
 *     def tan(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":460
 * 
 *     @staticmethod
 *     def relu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_43relu(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_43relu = {"relu", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_43relu, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_43relu(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relu (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_42relu(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_42relu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("relu", 0);

  /* "primitiv/_function.pyx":461
 *     @staticmethod
 *     def relu(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::relu<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 461, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 461, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":460
 * 
 *     @staticmethod
 *     def relu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.relu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":464
 * 
 *     @staticmethod
 *     def lrelu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_45lrelu(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_45lrelu = {"lrelu", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_45lrelu, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_45lrelu(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lrelu (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_44lrelu(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_44lrelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lrelu", 0);

  /* "primitiv/_function.pyx":465
 *     @staticmethod
 *     def lrelu(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::lrelu<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 465, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 465, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":464
 * 
 *     @staticmethod
 *     def lrelu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.lrelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":468
 * 
 *     @staticmethod
 *     def prelu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_47prelu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_47prelu = {"prelu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_47prelu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_47prelu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prelu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prelu", 1, 2, 2, 1); __PYX_ERR(0, 468, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prelu") < 0)) __PYX_ERR(0, 468, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prelu", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 468, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.prelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_46prelu(__pyx_self, __pyx_v_x, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_46prelu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("prelu", 0);

  /* "primitiv/_function.pyx":469
 *     @staticmethod
 *     def prelu(Tensor x, float a):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::prelu<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 469, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 469, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":468
 * 
 *     @staticmethod
 *     def prelu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.prelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":472
 * 
 *     @staticmethod
 *     def elu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_49elu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_49elu = {"elu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_49elu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_49elu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("elu", 1, 2, 2, 1); __PYX_ERR(0, 472, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "elu") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("elu", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.elu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_48elu(__pyx_self, __pyx_v_x, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_48elu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("elu", 0);

  /* "primitiv/_function.pyx":473
 *     @staticmethod
 *     def elu(Tensor x, float a):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::elu<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 473, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 473, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":472
 * 
 *     @staticmethod
 *     def elu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.elu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":476
 * 
 *     @staticmethod
 *     def selu(Tensor x, float a, float s):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_51selu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_51selu = {"selu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_51selu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_51selu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  float __pyx_v_a;
  float __pyx_v_s;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("selu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_a,&__pyx_n_s_s,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("selu", 1, 3, 3, 1); __PYX_ERR(0, 476, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("selu", 1, 3, 3, 2); __PYX_ERR(0, 476, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "selu") < 0)) __PYX_ERR(0, 476, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
    __pyx_v_s = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_s == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("selu", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 476, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.selu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_50selu(__pyx_self, __pyx_v_x, __pyx_v_a, __pyx_v_s);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_50selu(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_a, float __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("selu", 0);

  /* "primitiv/_function.pyx":477
 *     @staticmethod
 *     def selu(Tensor x, float a, float s):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::selu<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_a, __pyx_v_s);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 477, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 477, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":476
 * 
 *     @staticmethod
 *     def selu(Tensor x, float a, float s):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.selu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":480
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_53sum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_53sum = {"sum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_53sum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_53sum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sum") < 0)) __PYX_ERR(0, 480, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_dim = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sum", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 480, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_52sum(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_52sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim) {
  std::vector<primitiv::Tensor>  __pyx_v_xs;
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  primitiv::Tensor __pyx_t_7;
  primitiv::Tensor *__pyx_t_8;
  unsigned int __pyx_t_9;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "primitiv/_function.pyx":483
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])
 */
  __pyx_t_1 = PyList_Check(__pyx_v_x); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":484
 *         cdef Tensor t
 *         if isinstance(x, list):
 *             for t in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(t.wrapped[0])
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum(xs)))
 */
    if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
      __pyx_t_3 = __pyx_v_x; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 484, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 484, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 484, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_8primitiv_7_tensor_Tensor))))) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_t, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "primitiv/_function.pyx":485
 *         if isinstance(x, list):
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum(xs)))
 *         else:
 */
      try {
        __pyx_v_xs.push_back((__pyx_v_t->wrapped[0]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 485, __pyx_L1_error)
      }

      /* "primitiv/_function.pyx":484
 *         cdef Tensor t
 *         if isinstance(x, list):
 *             for t in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(t.wrapped[0])
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum(xs)))
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":486
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum(xs)))             # <<<<<<<<<<<<<<
 *         else:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum((<Tensor> x).wrapped[0], <unsigned> dim)))
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_7 = primitiv::functions::sum(__pyx_v_xs);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 486, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = new primitiv::Tensor(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 486, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":483
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])
 */
  }

  /* "primitiv/_function.pyx":488
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum(xs)))
 *         else:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum((<Tensor> x).wrapped[0], <unsigned> dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dim); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
    try {
      __pyx_t_7 = primitiv::functions::sum<primitiv::Tensor>((((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x)->wrapped[0]), ((unsigned int)__pyx_t_9));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 488, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = new primitiv::Tensor(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 488, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "primitiv/_function.pyx":480
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":491
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_55mean(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_55mean = {"mean", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_55mean, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_55mean(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mean") < 0)) __PYX_ERR(0, 491, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_dim = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 491, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_54mean(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_54mean(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_dim) {
  std::vector<primitiv::Tensor>  __pyx_v_xs;
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  primitiv::Tensor __pyx_t_7;
  primitiv::Tensor *__pyx_t_8;
  unsigned int __pyx_t_9;
  __Pyx_RefNannySetupContext("mean", 0);

  /* "primitiv/_function.pyx":494
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])
 */
  __pyx_t_1 = PyList_Check(__pyx_v_x); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":495
 *         cdef Tensor t
 *         if isinstance(x, list):
 *             for t in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(t.wrapped[0])
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean(xs)))
 */
    if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
      __pyx_t_3 = __pyx_v_x; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 495, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 495, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 495, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 495, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_8primitiv_7_tensor_Tensor))))) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_t, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "primitiv/_function.pyx":496
 *         if isinstance(x, list):
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean(xs)))
 *         else:
 */
      try {
        __pyx_v_xs.push_back((__pyx_v_t->wrapped[0]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 496, __pyx_L1_error)
      }

      /* "primitiv/_function.pyx":495
 *         cdef Tensor t
 *         if isinstance(x, list):
 *             for t in x:             # <<<<<<<<<<<<<<
 *                 xs.push_back(t.wrapped[0])
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean(xs)))
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":497
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean(xs)))             # <<<<<<<<<<<<<<
 *         else:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean((<Tensor> x).wrapped[0], <unsigned> dim)))
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_7 = primitiv::functions::mean(__pyx_v_xs);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = new primitiv::Tensor(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":494
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 *         if isinstance(x, list):             # <<<<<<<<<<<<<<
 *             for t in x:
 *                 xs.push_back(t.wrapped[0])
 */
  }

  /* "primitiv/_function.pyx":499
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean(xs)))
 *         else:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean((<Tensor> x).wrapped[0], <unsigned> dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dim); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
    try {
      __pyx_t_7 = primitiv::functions::mean<primitiv::Tensor>((((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x)->wrapped[0]), ((unsigned int)__pyx_t_9));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 499, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = new primitiv::Tensor(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 499, __pyx_L1_error)
    }
    __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "primitiv/_function.pyx":491
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":502
 * 
 *     @staticmethod
 *     def broadcast(Tensor x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_57broadcast(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_57broadcast = {"broadcast", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_57broadcast, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_57broadcast(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  unsigned int __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("broadcast (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,&__pyx_n_s_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("broadcast", 1, 3, 3, 1); __PYX_ERR(0, 502, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("broadcast", 1, 3, 3, 2); __PYX_ERR(0, 502, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "broadcast") < 0)) __PYX_ERR(0, 502, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 502, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_size == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 502, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("broadcast", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 502, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.broadcast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_56broadcast(__pyx_self, __pyx_v_x, __pyx_v_dim, __pyx_v_size);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_56broadcast(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim, unsigned int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("broadcast", 0);

  /* "primitiv/_function.pyx":503
 *     @staticmethod
 *     def broadcast(Tensor x, unsigned dim, unsigned size):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::broadcast<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_dim, __pyx_v_size);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 503, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 503, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":502
 * 
 *     @staticmethod
 *     def broadcast(Tensor x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.broadcast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":506
 * 
 *     @staticmethod
 *     def logsumexp(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_59logsumexp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_59logsumexp = {"logsumexp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_59logsumexp, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_59logsumexp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logsumexp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("logsumexp", 1, 2, 2, 1); __PYX_ERR(0, 506, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logsumexp") < 0)) __PYX_ERR(0, 506, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logsumexp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 506, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.logsumexp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_58logsumexp(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_58logsumexp(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("logsumexp", 0);

  /* "primitiv/_function.pyx":507
 *     @staticmethod
 *     def logsumexp(Tensor x, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::logsumexp<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 507, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 507, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":506
 * 
 *     @staticmethod
 *     def logsumexp(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.logsumexp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":510
 * 
 *     @staticmethod
 *     def log_softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_61log_softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_61log_softmax = {"log_softmax", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_61log_softmax, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_61log_softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_softmax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log_softmax", 1, 2, 2, 1); __PYX_ERR(0, 510, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log_softmax") < 0)) __PYX_ERR(0, 510, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log_softmax", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 510, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.log_softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 510, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_60log_softmax(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_60log_softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("log_softmax", 0);

  /* "primitiv/_function.pyx":511
 *     @staticmethod
 *     def log_softmax(Tensor x, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::log_softmax<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 511, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 511, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":510
 * 
 *     @staticmethod
 *     def log_softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.log_softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":514
 * 
 *     @staticmethod
 *     def softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_63softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_63softmax = {"softmax", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_63softmax, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_63softmax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softmax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_dim,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("softmax", 1, 2, 2, 1); __PYX_ERR(0, 514, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "softmax") < 0)) __PYX_ERR(0, 514, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("softmax", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 514, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_62softmax(__pyx_self, __pyx_v_x, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_62softmax(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("softmax", 0);

  /* "primitiv/_function.pyx":515
 *     @staticmethod
 *     def softmax(Tensor x, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::softmax<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_dim);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 515, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 515, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":514
 * 
 *     @staticmethod
 *     def softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.softmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":518
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_65softmax_cross_entropy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_65softmax_cross_entropy = {"softmax_cross_entropy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_65softmax_cross_entropy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_65softmax_cross_entropy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  unsigned int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softmax_cross_entropy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,&__pyx_n_s_dim,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("softmax_cross_entropy", 1, 3, 3, 1); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("softmax_cross_entropy", 1, 3, 3, 2); __PYX_ERR(0, 518, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "softmax_cross_entropy") < 0)) __PYX_ERR(0, 518, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_t = values[1];
    __pyx_v_dim = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_dim == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("softmax_cross_entropy", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 518, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.softmax_cross_entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 518, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_64softmax_cross_entropy(__pyx_self, __pyx_v_x, __pyx_v_t, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_64softmax_cross_entropy(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, PyObject *__pyx_v_t, unsigned int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  primitiv::Tensor __pyx_t_3;
  primitiv::Tensor *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<unsigned int>  __pyx_t_6;
  __Pyx_RefNannySetupContext("softmax_cross_entropy", 0);

  /* "primitiv/_function.pyx":519
 *     @staticmethod
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):
 *         if isinstance(t, Tensor):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 *         elif isinstance(t, list):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_t, __pyx_ptype_8primitiv_7_tensor_Tensor); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":520
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))             # <<<<<<<<<<<<<<
 *         elif isinstance(t, list):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], <vector[unsigned]> t, dim)))
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = primitiv::functions::softmax_cross_entropy<primitiv::Tensor>((__pyx_v_x->wrapped[0]), (((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_t)->wrapped[0]), __pyx_v_dim);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 520, __pyx_L1_error)
    }
    try {
      __pyx_t_4 = new primitiv::Tensor(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 520, __pyx_L1_error)
    }
    __pyx_t_5 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":519
 *     @staticmethod
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):
 *         if isinstance(t, Tensor):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 *         elif isinstance(t, list):
 */
  }

  /* "primitiv/_function.pyx":521
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 *         elif isinstance(t, list):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], <vector[unsigned]> t, dim)))
 *         else:
 */
  __pyx_t_2 = PyList_Check(__pyx_v_t); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "primitiv/_function.pyx":522
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 *         elif isinstance(t, list):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], <vector[unsigned]> t, dim)))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`t` has incorrect type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    try {
      __pyx_t_3 = primitiv::functions::softmax_cross_entropy<primitiv::Tensor>((__pyx_v_x->wrapped[0]), ((std::vector<unsigned int> )__pyx_t_6), __pyx_v_dim);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 522, __pyx_L1_error)
    }
    try {
      __pyx_t_4 = new primitiv::Tensor(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 522, __pyx_L1_error)
    }
    __pyx_t_5 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "primitiv/_function.pyx":521
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 *         elif isinstance(t, list):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], <vector[unsigned]> t, dim)))
 *         else:
 */
  }

  /* "primitiv/_function.pyx":524
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], <vector[unsigned]> t, dim)))
 *         else:
 *             raise TypeError("`t` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 524, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":518
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.softmax_cross_entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":527
 * 
 *     @staticmethod
 *     def stop_gradient(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_67stop_gradient(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_67stop_gradient = {"stop_gradient", (PyCFunction)__pyx_pw_8primitiv_9_function_16tensor_functions_67stop_gradient, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_67stop_gradient(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_gradient (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_66stop_gradient(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_66stop_gradient(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("stop_gradient", 0);

  /* "primitiv/_function.pyx":528
 *     @staticmethod
 *     def stop_gradient(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::stop_gradient<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 528, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 528, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":527
 * 
 *     @staticmethod
 *     def stop_gradient(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.stop_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":531
 * 
 *     @staticmethod
 *     def conv2d(Tensor x, Tensor w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_69conv2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_69conv2d = {"conv2d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_69conv2d, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_69conv2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_w = 0;
  unsigned int __pyx_v_padding0;
  unsigned int __pyx_v_padding1;
  unsigned int __pyx_v_stride0;
  unsigned int __pyx_v_stride1;
  unsigned int __pyx_v_dilation0;
  unsigned int __pyx_v_dilation1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv2d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_w,&__pyx_n_s_padding0,&__pyx_n_s_padding1,&__pyx_n_s_stride0,&__pyx_n_s_stride1,&__pyx_n_s_dilation0,&__pyx_n_s_dilation1,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 1); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 2); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 3); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 4); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 5); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dilation0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 6); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dilation1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, 7); __PYX_ERR(0, 531, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "conv2d") < 0)) __PYX_ERR(0, 531, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_w = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[1]);
    __pyx_v_padding0 = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_padding0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
    __pyx_v_padding1 = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_padding1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
    __pyx_v_stride0 = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_stride0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
    __pyx_v_stride1 = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_stride1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
    __pyx_v_dilation0 = __Pyx_PyInt_As_unsigned_int(values[6]); if (unlikely((__pyx_v_dilation0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    __pyx_v_dilation1 = __Pyx_PyInt_As_unsigned_int(values[7]); if (unlikely((__pyx_v_dilation1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("conv2d", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 531, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.conv2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 531, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "w", 0))) __PYX_ERR(0, 531, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_68conv2d(__pyx_self, __pyx_v_x, __pyx_v_w, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1, __pyx_v_dilation0, __pyx_v_dilation1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_68conv2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_w, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1, unsigned int __pyx_v_dilation0, unsigned int __pyx_v_dilation1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("conv2d", 0);

  /* "primitiv/_function.pyx":535
 *                unsigned stride0, unsigned stride1,
 *                unsigned dilation0, unsigned dilation1):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_conv2d(x.wrapped[0], w.wrapped[0],             # <<<<<<<<<<<<<<
 *                                                                      padding0, padding1,
 *                                                                      stride0, stride1,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "primitiv/_function.pyx":538
 *                                                                      padding0, padding1,
 *                                                                      stride0, stride1,
 *                                                                      dilation0, dilation1)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_1 = primitiv::functions::conv2d<primitiv::Tensor>((__pyx_v_x->wrapped[0]), (__pyx_v_w->wrapped[0]), __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1, __pyx_v_dilation0, __pyx_v_dilation1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 535, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":535
 *                unsigned stride0, unsigned stride1,
 *                unsigned dilation0, unsigned dilation1):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_conv2d(x.wrapped[0], w.wrapped[0],             # <<<<<<<<<<<<<<
 *                                                                      padding0, padding1,
 *                                                                      stride0, stride1,
 */
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 535, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":531
 * 
 *     @staticmethod
 *     def conv2d(Tensor x, Tensor w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.conv2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":541
 * 
 *     @staticmethod
 *     def max_pool2d(Tensor x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_71max_pool2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_71max_pool2d = {"max_pool2d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_71max_pool2d, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_71max_pool2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  unsigned int __pyx_v_window0;
  unsigned int __pyx_v_window1;
  unsigned int __pyx_v_padding0;
  unsigned int __pyx_v_padding1;
  unsigned int __pyx_v_stride0;
  unsigned int __pyx_v_stride1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max_pool2d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_window0,&__pyx_n_s_window1,&__pyx_n_s_padding0,&__pyx_n_s_padding1,&__pyx_n_s_stride0,&__pyx_n_s_stride1,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_window0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 1); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_window1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 2); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 3); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 4); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 5); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, 6); __PYX_ERR(0, 541, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "max_pool2d") < 0)) __PYX_ERR(0, 541, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_window0 = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_window0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L3_error)
    __pyx_v_window1 = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_window1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L3_error)
    __pyx_v_padding0 = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_padding0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L3_error)
    __pyx_v_padding1 = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_padding1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L3_error)
    __pyx_v_stride0 = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_stride0 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_stride1 = __Pyx_PyInt_As_unsigned_int(values[6]); if (unlikely((__pyx_v_stride1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("max_pool2d", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 541, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.max_pool2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_70max_pool2d(__pyx_self, __pyx_v_x, __pyx_v_window0, __pyx_v_window1, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_70max_pool2d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, unsigned int __pyx_v_window0, unsigned int __pyx_v_window1, unsigned int __pyx_v_padding0, unsigned int __pyx_v_padding1, unsigned int __pyx_v_stride0, unsigned int __pyx_v_stride1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("max_pool2d", 0);

  /* "primitiv/_function.pyx":545
 *                    unsigned padding0, unsigned padding1,
 *                    unsigned stride0, unsigned stride1):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_max_pool2d(x.wrapped[0],             # <<<<<<<<<<<<<<
 *                                                                          window0, window1,
 *                                                                          padding0, padding1,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "primitiv/_function.pyx":548
 *                                                                          window0, window1,
 *                                                                          padding0, padding1,
 *                                                                          stride0, stride1)))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_1 = primitiv::functions::max_pool2d<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_window0, __pyx_v_window1, __pyx_v_padding0, __pyx_v_padding1, __pyx_v_stride0, __pyx_v_stride1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 545, __pyx_L1_error)
  }

  /* "primitiv/_function.pyx":545
 *                    unsigned padding0, unsigned padding1,
 *                    unsigned stride0, unsigned stride1):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_max_pool2d(x.wrapped[0],             # <<<<<<<<<<<<<<
 *                                                                          window0, window1,
 *                                                                          padding0, padding1,
 */
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 545, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":541
 * 
 *     @staticmethod
 *     def max_pool2d(Tensor x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.max_pool2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":551
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_73constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_73constant = {"constant", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_73constant, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_73constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_k;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_k,&__pyx_n_s_device,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("constant", 0, 2, 3, 1); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "constant") < 0)) __PYX_ERR(0, 551, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_k = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_k == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constant", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 551, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 551, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_72constant(__pyx_self, __pyx_v_shape, __pyx_v_k, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_72constant(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_k, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("constant", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":552
 *     @staticmethod
 *     def constant(shape, float k, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_constant_tensor(normShape(shape).wrapped, k,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":553
 *     def constant(shape, float k, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_constant_tensor(normShape(shape).wrapped, k,
 *                                                                               get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":552
 *     @staticmethod
 *     def constant(shape, float k, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_constant_tensor(normShape(shape).wrapped, k,
 */
  }

  /* "primitiv/_function.pyx":554
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_constant_tensor(normShape(shape).wrapped, k,             # <<<<<<<<<<<<<<
 *                                                                               get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":555
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_constant_tensor(normShape(shape).wrapped, k,
 *                                                                               get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::constant_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_k, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 554, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":554
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_constant_tensor(normShape(shape).wrapped, k,             # <<<<<<<<<<<<<<
 *                                                                               get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 554, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":551
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":558
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_75zeros(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_75zeros = {"zeros", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_75zeros, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_75zeros(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zeros (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zeros") < 0)) __PYX_ERR(0, 558, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zeros", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 558, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.zeros", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_74zeros(__pyx_self, __pyx_v_shape, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_74zeros(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("zeros", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":559
 *     @staticmethod
 *     def zeros(shape, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_zeros_tensor(normShape(shape).wrapped,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":560
 *     def zeros(shape, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_zeros_tensor(normShape(shape).wrapped,
 *                                                                            get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":559
 *     @staticmethod
 *     def zeros(shape, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_zeros_tensor(normShape(shape).wrapped,
 */
  }

  /* "primitiv/_function.pyx":561
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_zeros_tensor(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                                                            get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":562
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_zeros_tensor(normShape(shape).wrapped,
 *                                                                            get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::zeros_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 561, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":561
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_zeros_tensor(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                                                            get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 561, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":558
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.zeros", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":565
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_77ones(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_77ones = {"ones", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_77ones, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_77ones(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ones (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ones") < 0)) __PYX_ERR(0, 565, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ones", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 565, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.ones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_76ones(__pyx_self, __pyx_v_shape, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_76ones(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("ones", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":566
 *     @staticmethod
 *     def ones(shape, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_ones_tensor(normShape(shape).wrapped,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":567
 *     def ones(shape, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_ones_tensor(normShape(shape).wrapped,
 *                                                                           get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":566
 *     @staticmethod
 *     def ones(shape, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_ones_tensor(normShape(shape).wrapped,
 */
  }

  /* "primitiv/_function.pyx":568
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_ones_tensor(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                                                           get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":569
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_ones_tensor(normShape(shape).wrapped,
 *                                                                           get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::ones_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":568
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_ones_tensor(normShape(shape).wrapped,             # <<<<<<<<<<<<<<
 *                                                                           get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":565
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.ones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":572
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_79identity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_79identity = {"identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_79identity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_79identity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_size;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "identity") < 0)) __PYX_ERR(0, 572, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_size == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("identity", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 572, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 572, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_78identity(__pyx_self, __pyx_v_size, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_78identity(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_size, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("identity", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":573
 *     @staticmethod
 *     def identity(unsigned size, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_identity_tensor(size, get_cpp_device(device))))
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":574
 *     def identity(unsigned size, Device device = None):
 *         if device is None:
 *             device = Device.get_default()             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_identity_tensor(size, get_cpp_device(device))))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":573
 *     @staticmethod
 *     def identity(unsigned size, Device device = None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_identity_tensor(size, get_cpp_device(device))))
 */
  }

  /* "primitiv/_function.pyx":575
 *         if device is None:
 *             device = Device.get_default()
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_identity_tensor(size, get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     class batch:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_6 = primitiv::functions::identity_tensor(__pyx_v_size, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 575, __pyx_L1_error)
  }
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 575, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":572
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":579
 *     class batch:
 *         @staticmethod
 *         def sum(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_5batch_7sum(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_5batch_7sum = {"sum", (PyCFunction)__pyx_pw_8primitiv_9_function_5batch_7sum, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_5batch_7sum(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 579, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_5batch_6sum(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_5batch_6sum(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "primitiv/_function.pyx":580
 *         @staticmethod
 *         def sum(Tensor x):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::batch::sum<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 580, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 580, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":579
 *     class batch:
 *         @staticmethod
 *         def sum(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.batch.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":583
 * 
 *         @staticmethod
 *         def mean(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_5batch_9mean(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_5batch_9mean = {"mean", (PyCFunction)__pyx_pw_8primitiv_9_function_5batch_9mean, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_5batch_9mean(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 583, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_5batch_8mean(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_5batch_8mean(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mean", 0);

  /* "primitiv/_function.pyx":584
 *         @staticmethod
 *         def mean(Tensor x):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::batch::mean<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 584, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 584, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":583
 * 
 *         @staticmethod
 *         def mean(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.batch.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":587
 * 
 *         @staticmethod
 *         def normalize(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_5batch_11normalize(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_5batch_11normalize = {"normalize", (PyCFunction)__pyx_pw_8primitiv_9_function_5batch_11normalize, METH_O, 0};
static PyObject *__pyx_pw_8primitiv_9_function_5batch_11normalize(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_5batch_10normalize(__pyx_self, ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_5batch_10normalize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "primitiv/_function.pyx":588
 *         @staticmethod
 *         def normalize(Tensor x):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))             # <<<<<<<<<<<<<<
 * 
 *     class random:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::batch::normalize<primitiv::Tensor>((__pyx_v_x->wrapped[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 588, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 588, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":587
 * 
 *         @staticmethod
 *         def normalize(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.batch.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":592
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_11bernoulli(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_11bernoulli = {"bernoulli", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_11bernoulli, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_11bernoulli(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_p;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bernoulli (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_p,&__pyx_n_s_device,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bernoulli", 0, 2, 3, 1); __PYX_ERR(0, 592, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bernoulli") < 0)) __PYX_ERR(0, 592, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_p = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_p == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bernoulli", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 592, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.bernoulli", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_10bernoulli(__pyx_self, __pyx_v_shape, __pyx_v_p, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_10bernoulli(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_p, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("bernoulli", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":593
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_bernoulli_tensor(normShape(shape).wrapped, p,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":594
 *         def bernoulli(shape, float p, Device device = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_bernoulli_tensor(normShape(shape).wrapped, p,
 *                                                                                           get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":593
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_bernoulli_tensor(normShape(shape).wrapped, p,
 */
  }

  /* "primitiv/_function.pyx":595
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_bernoulli_tensor(normShape(shape).wrapped, p,             # <<<<<<<<<<<<<<
 *                                                                                           get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":596
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_bernoulli_tensor(normShape(shape).wrapped, p,
 *                                                                                           get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::bernoulli_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_p, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":595
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_bernoulli_tensor(normShape(shape).wrapped, p,             # <<<<<<<<<<<<<<
 *                                                                                           get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":592
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.bernoulli", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":599
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_13uniform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_13uniform = {"uniform", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_13uniform, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_13uniform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_lower;
  float __pyx_v_upper;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uniform (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_lower,&__pyx_n_s_upper,&__pyx_n_s_device,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("uniform", 0, 3, 4, 1); __PYX_ERR(0, 599, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("uniform", 0, 3, 4, 2); __PYX_ERR(0, 599, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uniform") < 0)) __PYX_ERR(0, 599, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_lower = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lower == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L3_error)
    __pyx_v_upper = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_upper == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uniform", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 599, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.uniform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 599, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_12uniform(__pyx_self, __pyx_v_shape, __pyx_v_lower, __pyx_v_upper, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_12uniform(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_lower, float __pyx_v_upper, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("uniform", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":600
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_uniform_tensor(normShape(shape).wrapped, lower, upper,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":601
 *         def uniform(shape, float lower, float upper, Device device = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_uniform_tensor(normShape(shape).wrapped, lower, upper,
 *                                                                                         get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":600
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_uniform_tensor(normShape(shape).wrapped, lower, upper,
 */
  }

  /* "primitiv/_function.pyx":602
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_uniform_tensor(normShape(shape).wrapped, lower, upper,             # <<<<<<<<<<<<<<
 *                                                                                         get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":603
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_uniform_tensor(normShape(shape).wrapped, lower, upper,
 *                                                                                         get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::uniform_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_lower, __pyx_v_upper, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 602, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":602
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_uniform_tensor(normShape(shape).wrapped, lower, upper,             # <<<<<<<<<<<<<<
 *                                                                                         get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 602, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":599
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.uniform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":606
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_15normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_15normal = {"normal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_15normal, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_15normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_mean;
  float __pyx_v_sd;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_mean,&__pyx_n_s_sd,&__pyx_n_s_device,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normal", 0, 3, 4, 1); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normal", 0, 3, 4, 2); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normal") < 0)) __PYX_ERR(0, 606, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_mean = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_mean == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_sd = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_sd == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normal", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 606, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 606, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_14normal(__pyx_self, __pyx_v_shape, __pyx_v_mean, __pyx_v_sd, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_14normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("normal", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":607
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_normal_tensor(normShape(shape).wrapped, mean, sd,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":608
 *         def normal(shape, float mean, float sd, Device device = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_normal_tensor(normShape(shape).wrapped, mean, sd,
 *                                                                                        get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 608, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":607
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_normal_tensor(normShape(shape).wrapped, mean, sd,
 */
  }

  /* "primitiv/_function.pyx":609
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_normal_tensor(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                                                        get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":610
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_normal_tensor(normShape(shape).wrapped, mean, sd,
 *                                                                                        get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::normal_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_mean, __pyx_v_sd, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 609, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":609
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_normal_tensor(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                                                        get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 609, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":606
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":613
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_17log_normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_17log_normal = {"log_normal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_17log_normal, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_17log_normal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_mean;
  float __pyx_v_sd;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_normal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_mean,&__pyx_n_s_sd,&__pyx_n_s_device,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log_normal", 0, 3, 4, 1); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log_normal", 0, 3, 4, 2); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log_normal") < 0)) __PYX_ERR(0, 613, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_mean = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_mean == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_sd = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_sd == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log_normal", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 613, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.log_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_16log_normal(__pyx_self, __pyx_v_shape, __pyx_v_mean, __pyx_v_sd, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_16log_normal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mean, float __pyx_v_sd, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("log_normal", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":614
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_log_normal_tensor(normShape(shape).wrapped, mean, sd,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":615
 *         def log_normal(shape, float mean, float sd, Device device = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_log_normal_tensor(normShape(shape).wrapped, mean, sd,
 *                                                                                            get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":614
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_log_normal_tensor(normShape(shape).wrapped, mean, sd,
 */
  }

  /* "primitiv/_function.pyx":616
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_log_normal_tensor(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                                                            get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":617
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_log_normal_tensor(normShape(shape).wrapped, mean, sd,
 *                                                                                            get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::log_normal_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_mean, __pyx_v_sd, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 616, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":616
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_log_normal_tensor(normShape(shape).wrapped, mean, sd,             # <<<<<<<<<<<<<<
 *                                                                                            get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 616, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":613
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.log_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":620
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_6random_19gumbel(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_6random_19gumbel = {"gumbel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_6random_19gumbel, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_6random_19gumbel(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  float __pyx_v_mu;
  float __pyx_v_beta;
  struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gumbel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_mu,&__pyx_n_s_beta,&__pyx_n_s_device,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_8primitiv_7_device_Device *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gumbel", 0, 3, 4, 1); __PYX_ERR(0, 620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gumbel", 0, 3, 4, 2); __PYX_ERR(0, 620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gumbel") < 0)) __PYX_ERR(0, 620, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_mu = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_mu == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L3_error)
    __pyx_v_device = ((struct __pyx_obj_8primitiv_7_device_Device *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gumbel", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 620, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.random.gumbel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_device), __pyx_ptype_8primitiv_7_device_Device, 1, "device", 0))) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_6random_18gumbel(__pyx_self, __pyx_v_shape, __pyx_v_mu, __pyx_v_beta, __pyx_v_device);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_6random_18gumbel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_shape, float __pyx_v_mu, float __pyx_v_beta, struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  primitiv::Tensor __pyx_t_6;
  primitiv::Tensor *__pyx_t_7;
  __Pyx_RefNannySetupContext("gumbel", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_device);

  /* "primitiv/_function.pyx":621
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_gumbel_tensor(normShape(shape).wrapped, mu, beta,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_device) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_function.pyx":622
 *         def gumbel(shape, float mu, float beta, Device device = None):
 *             if device is None:
 *                 device = Device.get_default()             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_gumbel_tensor(normShape(shape).wrapped, mu, beta,
 *                                                                                        get_cpp_device(device))))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8primitiv_7_device_Device), __pyx_n_s_get_default); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8primitiv_7_device_Device))))) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_device, ((struct __pyx_obj_8primitiv_7_device_Device *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "primitiv/_function.pyx":621
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None):
 *             if device is None:             # <<<<<<<<<<<<<<
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_gumbel_tensor(normShape(shape).wrapped, mu, beta,
 */
  }

  /* "primitiv/_function.pyx":623
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_gumbel_tensor(normShape(shape).wrapped, mu, beta,             # <<<<<<<<<<<<<<
 *                                                                                        get_cpp_device(device))))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_8primitiv_6_shape_normShape(__pyx_v_shape)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":624
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_gumbel_tensor(normShape(shape).wrapped, mu, beta,
 *                                                                                        get_cpp_device(device))))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  try {
    __pyx_t_6 = primitiv::functions::random::gumbel_tensor(((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3)->wrapped, __pyx_v_mu, __pyx_v_beta, __pyx_f_8primitiv_5utils_get_cpp_device(__pyx_v_device));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 623, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":623
 *             if device is None:
 *                 device = Device.get_default()
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_random_gumbel_tensor(normShape(shape).wrapped, mu, beta,             # <<<<<<<<<<<<<<
 *                                                                                        get_cpp_device(device))))
 * 
 */
  try {
    __pyx_t_7 = new primitiv::Tensor(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 623, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":620
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("primitiv._function.random.gumbel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_function.pyx":627
 * 
 *     @staticmethod
 *     def dropout(Tensor x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_dropout(x.wrapped[0], rate, enabled)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_81dropout(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8primitiv_9_function_16tensor_functions_81dropout = {"dropout", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8primitiv_9_function_16tensor_functions_81dropout, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8primitiv_9_function_16tensor_functions_81dropout(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x = 0;
  float __pyx_v_rate;
  bool __pyx_v_enabled;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dropout (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_rate,&__pyx_n_s_enabled,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dropout", 1, 3, 3, 1); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dropout", 1, 3, 3, 2); __PYX_ERR(0, 627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dropout") < 0)) __PYX_ERR(0, 627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = ((struct __pyx_obj_8primitiv_7_tensor_Tensor *)values[0]);
    __pyx_v_rate = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_enabled == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dropout", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("primitiv._function.tensor_functions.dropout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8primitiv_7_tensor_Tensor, 1, "x", 0))) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_r = __pyx_pf_8primitiv_9_function_16tensor_functions_80dropout(__pyx_self, __pyx_v_x, __pyx_v_rate, __pyx_v_enabled);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8primitiv_9_function_16tensor_functions_80dropout(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8primitiv_7_tensor_Tensor *__pyx_v_x, float __pyx_v_rate, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  primitiv::Tensor __pyx_t_1;
  primitiv::Tensor *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("dropout", 0);

  /* "primitiv/_function.pyx":628
 *     @staticmethod
 *     def dropout(Tensor x, float rate, bool enabled):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_dropout(x.wrapped[0], rate, enabled)))             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = primitiv::functions::dropout<primitiv::Tensor>((__pyx_v_x->wrapped[0]), __pyx_v_rate, __pyx_v_enabled);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 628, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = new primitiv::Tensor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 628, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_8primitiv_7_tensor_Tensor->get_wrapper_with_new(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "primitiv/_function.pyx":627
 * 
 *     @staticmethod
 *     def dropout(Tensor x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_dropout(x.wrapped[0], rate, enabled)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._function.tensor_functions.dropout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_initializer.pxd":15
 * 
 * 
 * cdef inline Initializer wrapInitializer(CppInitializer *wrapped) except +:             # <<<<<<<<<<<<<<
 *     cdef Initializer initializer = Initializer.__new__(Initializer)
 *     initializer.wrapped = wrapped
 */

static CYTHON_INLINE struct __pyx_obj_8primitiv_12_initializer_Initializer *__pyx_f_8primitiv_12_initializer_wrapInitializer(primitiv::Initializer *__pyx_v_wrapped) {
  struct __pyx_obj_8primitiv_12_initializer_Initializer *__pyx_v_initializer = 0;
  struct __pyx_obj_8primitiv_12_initializer_Initializer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("wrapInitializer", 0);

  /* "primitiv/_initializer.pxd":16
 * 
 * cdef inline Initializer wrapInitializer(CppInitializer *wrapped) except +:
 *     cdef Initializer initializer = Initializer.__new__(Initializer)             # <<<<<<<<<<<<<<
 *     initializer.wrapped = wrapped
 *     return initializer
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8primitiv_12_initializer_Initializer), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8primitiv_12_initializer_Initializer)))) __PYX_ERR(1, 16, __pyx_L1_error)
  __pyx_v_initializer = ((struct __pyx_obj_8primitiv_12_initializer_Initializer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "primitiv/_initializer.pxd":17
 * cdef inline Initializer wrapInitializer(CppInitializer *wrapped) except +:
 *     cdef Initializer initializer = Initializer.__new__(Initializer)
 *     initializer.wrapped = wrapped             # <<<<<<<<<<<<<<
 *     return initializer
 */
  __pyx_v_initializer->wrapped = __pyx_v_wrapped;

  /* "primitiv/_initializer.pxd":18
 *     cdef Initializer initializer = Initializer.__new__(Initializer)
 *     initializer.wrapped = wrapped
 *     return initializer             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_initializer));
  __pyx_r = __pyx_v_initializer;
  goto __pyx_L0;

  /* "primitiv/_initializer.pxd":15
 * 
 * 
 * cdef inline Initializer wrapInitializer(CppInitializer *wrapped) except +:             # <<<<<<<<<<<<<<
 *     cdef Initializer initializer = Initializer.__new__(Initializer)
 *     initializer.wrapped = wrapped
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("primitiv._initializer.wrapInitializer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_initializer);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_graph.pxd":51
 * 
 * 
 * cdef inline Node wrapNode(CppNode wrapped):             # <<<<<<<<<<<<<<
 *     cdef Node node = Node.__new__(Node)
 *     node.wrapped = wrapped
 */

static CYTHON_INLINE struct __pyx_obj_8primitiv_6_graph_Node *__pyx_f_8primitiv_6_graph_wrapNode(primitiv::Node __pyx_v_wrapped) {
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_v_node = 0;
  struct __pyx_obj_8primitiv_6_graph_Node *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("wrapNode", 0);

  /* "primitiv/_graph.pxd":52
 * 
 * cdef inline Node wrapNode(CppNode wrapped):
 *     cdef Node node = Node.__new__(Node)             # <<<<<<<<<<<<<<
 *     node.wrapped = wrapped
 *     return node
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8primitiv_6_graph_Node), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8primitiv_6_graph_Node)))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_v_node = ((struct __pyx_obj_8primitiv_6_graph_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "primitiv/_graph.pxd":53
 * cdef inline Node wrapNode(CppNode wrapped):
 *     cdef Node node = Node.__new__(Node)
 *     node.wrapped = wrapped             # <<<<<<<<<<<<<<
 *     return node
 */
  __pyx_v_node->wrapped = __pyx_v_wrapped;

  /* "primitiv/_graph.pxd":54
 *     cdef Node node = Node.__new__(Node)
 *     node.wrapped = wrapped
 *     return node             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "primitiv/_graph.pxd":51
 * 
 * 
 * cdef inline Node wrapNode(CppNode wrapped):             # <<<<<<<<<<<<<<
 *     cdef Node node = Node.__new__(Node)
 *     node.wrapped = wrapped
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("primitiv._graph.wrapNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_shape.pxd":39
 * 
 * 
 * cdef inline Shape wrapShape(CppShape wrapped) except +:             # <<<<<<<<<<<<<<
 *     cdef Shape shape = Shape.__new__(Shape)
 *     shape.wrapped = wrapped
 */

static CYTHON_INLINE struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_f_8primitiv_6_shape_wrapShape(primitiv::Shape __pyx_v_wrapped) {
  struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_v_shape = 0;
  struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("wrapShape", 0);

  /* "primitiv/_shape.pxd":40
 * 
 * cdef inline Shape wrapShape(CppShape wrapped) except +:
 *     cdef Shape shape = Shape.__new__(Shape)             # <<<<<<<<<<<<<<
 *     shape.wrapped = wrapped
 *     return shape
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8primitiv_6_shape_Shape), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8primitiv_6_shape_Shape)))) __PYX_ERR(3, 40, __pyx_L1_error)
  __pyx_v_shape = ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "primitiv/_shape.pxd":41
 * cdef inline Shape wrapShape(CppShape wrapped) except +:
 *     cdef Shape shape = Shape.__new__(Shape)
 *     shape.wrapped = wrapped             # <<<<<<<<<<<<<<
 *     return shape
 * 
 */
  __pyx_v_shape->wrapped = __pyx_v_wrapped;

  /* "primitiv/_shape.pxd":42
 *     cdef Shape shape = Shape.__new__(Shape)
 *     shape.wrapped = wrapped
 *     return shape             # <<<<<<<<<<<<<<
 * 
 * cdef inline Shape normShape(shapelike):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_shape));
  __pyx_r = __pyx_v_shape;
  goto __pyx_L0;

  /* "primitiv/_shape.pxd":39
 * 
 * 
 * cdef inline Shape wrapShape(CppShape wrapped) except +:             # <<<<<<<<<<<<<<
 *     cdef Shape shape = Shape.__new__(Shape)
 *     shape.wrapped = wrapped
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("primitiv._shape.wrapShape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_shape);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "primitiv/_shape.pxd":44
 *     return shape
 * 
 * cdef inline Shape normShape(shapelike):             # <<<<<<<<<<<<<<
 *     if isinstance(shapelike, Shape):
 *         return shapelike
 */

static CYTHON_INLINE struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_f_8primitiv_6_shape_normShape(PyObject *__pyx_v_shapelike) {
  struct __pyx_obj_8primitiv_6_shape_Shape *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("normShape", 0);

  /* "primitiv/_shape.pxd":45
 * 
 * cdef inline Shape normShape(shapelike):
 *     if isinstance(shapelike, Shape):             # <<<<<<<<<<<<<<
 *         return shapelike
 *     else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_shapelike, __pyx_ptype_8primitiv_6_shape_Shape); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "primitiv/_shape.pxd":46
 * cdef inline Shape normShape(shapelike):
 *     if isinstance(shapelike, Shape):
 *         return shapelike             # <<<<<<<<<<<<<<
 *     else:
 *         return Shape(shapelike)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    if (!(likely(((__pyx_v_shapelike) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_shapelike, __pyx_ptype_8primitiv_6_shape_Shape))))) __PYX_ERR(3, 46, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_shapelike);
    __pyx_r = ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_v_shapelike);
    goto __pyx_L0;

    /* "primitiv/_shape.pxd":45
 * 
 * cdef inline Shape normShape(shapelike):
 *     if isinstance(shapelike, Shape):             # <<<<<<<<<<<<<<
 *         return shapelike
 *     else:
 */
  }

  /* "primitiv/_shape.pxd":48
 *         return shapelike
 *     else:
 *         return Shape(shapelike)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8primitiv_6_shape_Shape), __pyx_v_shapelike); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = ((struct __pyx_obj_8primitiv_6_shape_Shape *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "primitiv/_shape.pxd":44
 *     return shape
 * 
 * cdef inline Shape normShape(shapelike):             # <<<<<<<<<<<<<<
 *     if isinstance(shapelike, Shape):
 *         return shapelike
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("primitiv._shape.normShape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 272, __pyx_L1_error)

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 276, __pyx_L1_error)

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 306, __pyx_L1_error)

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 325, __pyx_L1_error)
      break;
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(4, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(4, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(4, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(4, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(4, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(4, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 856, __pyx_L1_error)

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 860, __pyx_L1_error)

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(4, 880, __pyx_L1_error)

        /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(4, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(4, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 1036, __pyx_L3_error)

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(4, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(4, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 1042, __pyx_L3_error)

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(4, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(4, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 1048, __pyx_L3_error)

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(4, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(4, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utils.pxd":12
 * import numpy as np
 * 
 * cdef inline vector[float] ndarrays_to_vector(list arrays):             # <<<<<<<<<<<<<<
 *     cdef vector[float] result
 *     cdef np.float32_t *np_data
 */

static CYTHON_INLINE std::vector<float>  __pyx_f_8primitiv_5utils_ndarrays_to_vector(PyObject *__pyx_v_arrays) {
  std::vector<float>  __pyx_v_result;
  __pyx_t_5numpy_float32_t *__pyx_v_np_data;
  unsigned int __pyx_v_datasize;
  PyArrayObject *__pyx_v_data_tmp = 0;
  unsigned int __pyx_v_j;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_shape = NULL;
  PyObject *__pyx_v_data = NULL;
  std::vector<float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  unsigned int __pyx_t_10;
  unsigned int __pyx_t_11;
  unsigned int __pyx_t_12;
  __Pyx_RefNannySetupContext("ndarrays_to_vector", 0);

  /* "utils.pxd":22
 *     cdef unsigned j, i
 * 
 *     if len(arrays) == 0:             # <<<<<<<<<<<<<<
 *         raise TypeError("arrays contains no item")
 *     datasize = arrays[0].size
 */
  if (unlikely(__pyx_v_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 22, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_arrays); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(5, 22, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "utils.pxd":23
 * 
 *     if len(arrays) == 0:
 *         raise TypeError("arrays contains no item")             # <<<<<<<<<<<<<<
 *     datasize = arrays[0].size
 *     shape = arrays[0].shape
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 23, __pyx_L1_error)

    /* "utils.pxd":22
 *     cdef unsigned j, i
 * 
 *     if len(arrays) == 0:             # <<<<<<<<<<<<<<
 *         raise TypeError("arrays contains no item")
 *     datasize = arrays[0].size
 */
  }

  /* "utils.pxd":24
 *     if len(arrays) == 0:
 *         raise TypeError("arrays contains no item")
 *     datasize = arrays[0].size             # <<<<<<<<<<<<<<
 *     shape = arrays[0].shape
 *     result.resize(len(arrays) * datasize)
 */
  if (unlikely(__pyx_v_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 24, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_arrays, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(5, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_datasize = __pyx_t_5;

  /* "utils.pxd":25
 *         raise TypeError("arrays contains no item")
 *     datasize = arrays[0].size
 *     shape = arrays[0].shape             # <<<<<<<<<<<<<<
 *     result.resize(len(arrays) * datasize)
 *     for j, data in enumerate(arrays):
 */
  if (unlikely(__pyx_v_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 25, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_arrays, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_shape = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "utils.pxd":26
 *     datasize = arrays[0].size
 *     shape = arrays[0].shape
 *     result.resize(len(arrays) * datasize)             # <<<<<<<<<<<<<<
 *     for j, data in enumerate(arrays):
 *         if shape != data.shape:
 */
  if (unlikely(__pyx_v_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 26, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_arrays); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(5, 26, __pyx_L1_error)
  try {
    __pyx_v_result.resize((__pyx_t_1 * __pyx_v_datasize));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 26, __pyx_L1_error)
  }

  /* "utils.pxd":27
 *     shape = arrays[0].shape
 *     result.resize(len(arrays) * datasize)
 *     for j, data in enumerate(arrays):             # <<<<<<<<<<<<<<
 *         if shape != data.shape:
 *             raise TypeError("arrays contains different shaped ndarrays")
 */
  __pyx_t_5 = 0;
  __pyx_t_3 = __pyx_v_arrays; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(5, 27, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_data, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_v_j = __pyx_t_5;
    __pyx_t_5 = (__pyx_t_5 + 1);

    /* "utils.pxd":28
 *     result.resize(len(arrays) * datasize)
 *     for j, data in enumerate(arrays):
 *         if shape != data.shape:             # <<<<<<<<<<<<<<
 *             raise TypeError("arrays contains different shaped ndarrays")
 *         data_tmp = np.array(data, dtype=np.float32, order="F")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_shape, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 28, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 28, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_t_2)) {

      /* "utils.pxd":29
 *     for j, data in enumerate(arrays):
 *         if shape != data.shape:
 *             raise TypeError("arrays contains different shaped ndarrays")             # <<<<<<<<<<<<<<
 *         data_tmp = np.array(data, dtype=np.float32, order="F")
 *         np_data = <np.float32_t *> data_tmp.data
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(5, 29, __pyx_L1_error)

      /* "utils.pxd":28
 *     result.resize(len(arrays) * datasize)
 *     for j, data in enumerate(arrays):
 *         if shape != data.shape:             # <<<<<<<<<<<<<<
 *             raise TypeError("arrays contains different shaped ndarrays")
 *         data_tmp = np.array(data, dtype=np.float32, order="F")
 */
    }

    /* "utils.pxd":30
 *         if shape != data.shape:
 *             raise TypeError("arrays contains different shaped ndarrays")
 *         data_tmp = np.array(data, dtype=np.float32, order="F")             # <<<<<<<<<<<<<<
 *         np_data = <np.float32_t *> data_tmp.data
 *         for i in range(datasize):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_data);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(5, 30, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_data_tmp, ((PyArrayObject *)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "utils.pxd":31
 *             raise TypeError("arrays contains different shaped ndarrays")
 *         data_tmp = np.array(data, dtype=np.float32, order="F")
 *         np_data = <np.float32_t *> data_tmp.data             # <<<<<<<<<<<<<<
 *         for i in range(datasize):
 *             result[j * datasize + i] = np_data[i]
 */
    __pyx_v_np_data = ((__pyx_t_5numpy_float32_t *)__pyx_v_data_tmp->data);

    /* "utils.pxd":32
 *         data_tmp = np.array(data, dtype=np.float32, order="F")
 *         np_data = <np.float32_t *> data_tmp.data
 *         for i in range(datasize):             # <<<<<<<<<<<<<<
 *             result[j * datasize + i] = np_data[i]
 *     return result
 */
    __pyx_t_10 = __pyx_v_datasize;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "utils.pxd":33
 *         np_data = <np.float32_t *> data_tmp.data
 *         for i in range(datasize):
 *             result[j * datasize + i] = np_data[i]             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
      (__pyx_v_result[((__pyx_v_j * __pyx_v_datasize) + __pyx_v_i)]) = (__pyx_v_np_data[__pyx_v_i]);
    }

    /* "utils.pxd":27
 *     shape = arrays[0].shape
 *     result.resize(len(arrays) * datasize)
 *     for j, data in enumerate(arrays):             # <<<<<<<<<<<<<<
 *         if shape != data.shape:
 *             raise TypeError("arrays contains different shaped ndarrays")
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "utils.pxd":34
 *         for i in range(datasize):
 *             result[j * datasize + i] = np_data[i]
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "utils.pxd":12
 * import numpy as np
 * 
 * cdef inline vector[float] ndarrays_to_vector(list arrays):             # <<<<<<<<<<<<<<
 *     cdef vector[float] result
 *     cdef np.float32_t *np_data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("primitiv.utils.ndarrays_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data_tmp);
  __Pyx_XDECREF(__pyx_v_shape);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utils.pxd":37
 * 
 * 
 * cdef inline CppDevice* get_cpp_device(Device dev):             # <<<<<<<<<<<<<<
 *     return dev.wrapped if dev is not None else NULL
 * 
 */

static CYTHON_INLINE primitiv::Device *__pyx_f_8primitiv_5utils_get_cpp_device(struct __pyx_obj_8primitiv_7_device_Device *__pyx_v_dev) {
  primitiv::Device *__pyx_r;
  __Pyx_RefNannyDeclarations
  primitiv::Device *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("get_cpp_device", 0);

  /* "utils.pxd":38
 * 
 * cdef inline CppDevice* get_cpp_device(Device dev):
 *     return dev.wrapped if dev is not None else NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_dev) != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_1 = __pyx_v_dev->wrapped;
  } else {
    __pyx_t_1 = NULL;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "utils.pxd":37
 * 
 * 
 * cdef inline CppDevice* get_cpp_device(Device dev):             # <<<<<<<<<<<<<<
 *     return dev.wrapped if dev is not None else NULL
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utils.pxd":41
 * 
 * 
 * cdef inline CppGraph* get_cpp_graph(Graph g):             # <<<<<<<<<<<<<<
 *     return g.wrapped if g is not None else NULL
 */

static CYTHON_INLINE primitiv::Graph *__pyx_f_8primitiv_5utils_get_cpp_graph(struct __pyx_obj_8primitiv_6_graph_Graph *__pyx_v_g) {
  primitiv::Graph *__pyx_r;
  __Pyx_RefNannyDeclarations
  primitiv::Graph *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("get_cpp_graph", 0);

  /* "utils.pxd":42
 * 
 * cdef inline CppGraph* get_cpp_graph(Graph g):
 *     return g.wrapped if g is not None else NULL             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_g) != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_1 = __pyx_v_g->wrapped;
  } else {
    __pyx_t_1 = NULL;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "utils.pxd":41
 * 
 * 
 * cdef inline CppGraph* get_cpp_graph(Graph g):             # <<<<<<<<<<<<<<
 *     return g.wrapped if g is not None else NULL
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *__pyx_v_o) {
  std::vector<float>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_float", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(6, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((float)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<unsigned int>  __pyx_convert_vector_from_py_unsigned_int(PyObject *__pyx_v_o) {
  std::vector<unsigned int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<unsigned int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_unsigned_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(6, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((unsigned int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_int")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_float", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__function(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__function},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_function",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_kp_s_arrays_contains_different_shaped, __pyx_k_arrays_contains_different_shaped, sizeof(__pyx_k_arrays_contains_different_shaped), 0, 0, 1, 0},
  {&__pyx_kp_s_arrays_contains_no_item, __pyx_k_arrays_contains_no_item, sizeof(__pyx_k_arrays_contains_no_item), 0, 0, 1, 0},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_batch, __pyx_k_batch, sizeof(__pyx_k_batch), 0, 0, 1, 1},
  {&__pyx_n_s_bernoulli, __pyx_k_bernoulli, sizeof(__pyx_k_bernoulli), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_broadcast, __pyx_k_broadcast, sizeof(__pyx_k_broadcast), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_concat, __pyx_k_concat, sizeof(__pyx_k_concat), 0, 0, 1, 1},
  {&__pyx_n_s_constant, __pyx_k_constant, sizeof(__pyx_k_constant), 0, 0, 1, 1},
  {&__pyx_n_s_conv2d, __pyx_k_conv2d, sizeof(__pyx_k_conv2d), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_kp_s_data_contains_no_item, __pyx_k_data_contains_no_item, sizeof(__pyx_k_data_contains_no_item), 0, 0, 1, 0},
  {&__pyx_kp_s_data_contains_other_objects_tha, __pyx_k_data_contains_other_objects_tha, sizeof(__pyx_k_data_contains_other_objects_tha), 0, 0, 1, 0},
  {&__pyx_kp_s_data_has_incorrect_type, __pyx_k_data_has_incorrect_type, sizeof(__pyx_k_data_has_incorrect_type), 0, 0, 1, 0},
  {&__pyx_n_s_device, __pyx_k_device, sizeof(__pyx_k_device), 0, 0, 1, 1},
  {&__pyx_n_s_dilation0, __pyx_k_dilation0, sizeof(__pyx_k_dilation0), 0, 0, 1, 1},
  {&__pyx_n_s_dilation1, __pyx_k_dilation1, sizeof(__pyx_k_dilation1), 0, 0, 1, 1},
  {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dropout, __pyx_k_dropout, sizeof(__pyx_k_dropout), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_elu, __pyx_k_elu, sizeof(__pyx_k_elu), 0, 0, 1, 1},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_functions, __pyx_k_functions, sizeof(__pyx_k_functions), 0, 0, 1, 1},
  {&__pyx_n_s_functions_batch, __pyx_k_functions_batch, sizeof(__pyx_k_functions_batch), 0, 0, 1, 1},
  {&__pyx_n_s_functions_batch_mean, __pyx_k_functions_batch_mean, sizeof(__pyx_k_functions_batch_mean), 0, 0, 1, 1},
  {&__pyx_n_s_functions_batch_normalize, __pyx_k_functions_batch_normalize, sizeof(__pyx_k_functions_batch_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_functions_batch_sum, __pyx_k_functions_batch_sum, sizeof(__pyx_k_functions_batch_sum), 0, 0, 1, 1},
  {&__pyx_n_s_functions_broadcast, __pyx_k_functions_broadcast, sizeof(__pyx_k_functions_broadcast), 0, 0, 1, 1},
  {&__pyx_n_s_functions_concat, __pyx_k_functions_concat, sizeof(__pyx_k_functions_concat), 0, 0, 1, 1},
  {&__pyx_n_s_functions_constant, __pyx_k_functions_constant, sizeof(__pyx_k_functions_constant), 0, 0, 1, 1},
  {&__pyx_n_s_functions_conv2d, __pyx_k_functions_conv2d, sizeof(__pyx_k_functions_conv2d), 0, 0, 1, 1},
  {&__pyx_n_s_functions_copy, __pyx_k_functions_copy, sizeof(__pyx_k_functions_copy), 0, 0, 1, 1},
  {&__pyx_n_s_functions_cos, __pyx_k_functions_cos, sizeof(__pyx_k_functions_cos), 0, 0, 1, 1},
  {&__pyx_n_s_functions_dropout, __pyx_k_functions_dropout, sizeof(__pyx_k_functions_dropout), 0, 0, 1, 1},
  {&__pyx_n_s_functions_elu, __pyx_k_functions_elu, sizeof(__pyx_k_functions_elu), 0, 0, 1, 1},
  {&__pyx_n_s_functions_exp, __pyx_k_functions_exp, sizeof(__pyx_k_functions_exp), 0, 0, 1, 1},
  {&__pyx_n_s_functions_flatten, __pyx_k_functions_flatten, sizeof(__pyx_k_functions_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_functions_identity, __pyx_k_functions_identity, sizeof(__pyx_k_functions_identity), 0, 0, 1, 1},
  {&__pyx_n_s_functions_input, __pyx_k_functions_input, sizeof(__pyx_k_functions_input), 0, 0, 1, 1},
  {&__pyx_n_s_functions_log, __pyx_k_functions_log, sizeof(__pyx_k_functions_log), 0, 0, 1, 1},
  {&__pyx_n_s_functions_log_softmax, __pyx_k_functions_log_softmax, sizeof(__pyx_k_functions_log_softmax), 0, 0, 1, 1},
  {&__pyx_n_s_functions_logsumexp, __pyx_k_functions_logsumexp, sizeof(__pyx_k_functions_logsumexp), 0, 0, 1, 1},
  {&__pyx_n_s_functions_lrelu, __pyx_k_functions_lrelu, sizeof(__pyx_k_functions_lrelu), 0, 0, 1, 1},
  {&__pyx_n_s_functions_matmul, __pyx_k_functions_matmul, sizeof(__pyx_k_functions_matmul), 0, 0, 1, 1},
  {&__pyx_n_s_functions_max_pool2d, __pyx_k_functions_max_pool2d, sizeof(__pyx_k_functions_max_pool2d), 0, 0, 1, 1},
  {&__pyx_n_s_functions_mean, __pyx_k_functions_mean, sizeof(__pyx_k_functions_mean), 0, 0, 1, 1},
  {&__pyx_n_s_functions_ones, __pyx_k_functions_ones, sizeof(__pyx_k_functions_ones), 0, 0, 1, 1},
  {&__pyx_n_s_functions_parameter, __pyx_k_functions_parameter, sizeof(__pyx_k_functions_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_functions_pick, __pyx_k_functions_pick, sizeof(__pyx_k_functions_pick), 0, 0, 1, 1},
  {&__pyx_n_s_functions_pow, __pyx_k_functions_pow, sizeof(__pyx_k_functions_pow), 0, 0, 1, 1},
  {&__pyx_n_s_functions_prelu, __pyx_k_functions_prelu, sizeof(__pyx_k_functions_prelu), 0, 0, 1, 1},
  {&__pyx_n_s_functions_random, __pyx_k_functions_random, sizeof(__pyx_k_functions_random), 0, 0, 1, 1},
  {&__pyx_n_s_functions_random_bernoulli, __pyx_k_functions_random_bernoulli, sizeof(__pyx_k_functions_random_bernoulli), 0, 0, 1, 1},
  {&__pyx_n_s_functions_random_gumbel, __pyx_k_functions_random_gumbel, sizeof(__pyx_k_functions_random_gumbel), 0, 0, 1, 1},
  {&__pyx_n_s_functions_random_log_normal, __pyx_k_functions_random_log_normal, sizeof(__pyx_k_functions_random_log_normal), 0, 0, 1, 1},
  {&__pyx_n_s_functions_random_normal, __pyx_k_functions_random_normal, sizeof(__pyx_k_functions_random_normal), 0, 0, 1, 1},
  {&__pyx_n_s_functions_random_uniform, __pyx_k_functions_random_uniform, sizeof(__pyx_k_functions_random_uniform), 0, 0, 1, 1},
  {&__pyx_n_s_functions_raw_input, __pyx_k_functions_raw_input, sizeof(__pyx_k_functions_raw_input), 0, 0, 1, 1},
  {&__pyx_n_s_functions_relu, __pyx_k_functions_relu, sizeof(__pyx_k_functions_relu), 0, 0, 1, 1},
  {&__pyx_n_s_functions_reshape, __pyx_k_functions_reshape, sizeof(__pyx_k_functions_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_functions_selu, __pyx_k_functions_selu, sizeof(__pyx_k_functions_selu), 0, 0, 1, 1},
  {&__pyx_n_s_functions_sigmoid, __pyx_k_functions_sigmoid, sizeof(__pyx_k_functions_sigmoid), 0, 0, 1, 1},
  {&__pyx_n_s_functions_sin, __pyx_k_functions_sin, sizeof(__pyx_k_functions_sin), 0, 0, 1, 1},
  {&__pyx_n_s_functions_slice, __pyx_k_functions_slice, sizeof(__pyx_k_functions_slice), 0, 0, 1, 1},
  {&__pyx_n_s_functions_softmax, __pyx_k_functions_softmax, sizeof(__pyx_k_functions_softmax), 0, 0, 1, 1},
  {&__pyx_n_s_functions_softmax_cross_entropy, __pyx_k_functions_softmax_cross_entropy, sizeof(__pyx_k_functions_softmax_cross_entropy), 0, 0, 1, 1},
  {&__pyx_n_s_functions_softplus, __pyx_k_functions_softplus, sizeof(__pyx_k_functions_softplus), 0, 0, 1, 1},
  {&__pyx_n_s_functions_sqrt, __pyx_k_functions_sqrt, sizeof(__pyx_k_functions_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_functions_stop_gradient, __pyx_k_functions_stop_gradient, sizeof(__pyx_k_functions_stop_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_functions_sum, __pyx_k_functions_sum, sizeof(__pyx_k_functions_sum), 0, 0, 1, 1},
  {&__pyx_n_s_functions_tan, __pyx_k_functions_tan, sizeof(__pyx_k_functions_tan), 0, 0, 1, 1},
  {&__pyx_n_s_functions_tanh, __pyx_k_functions_tanh, sizeof(__pyx_k_functions_tanh), 0, 0, 1, 1},
  {&__pyx_n_s_functions_transpose, __pyx_k_functions_transpose, sizeof(__pyx_k_functions_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_functions_zeros, __pyx_k_functions_zeros, sizeof(__pyx_k_functions_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_get_default, __pyx_k_get_default, sizeof(__pyx_k_get_default), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_gumbel, __pyx_k_gumbel, sizeof(__pyx_k_gumbel), 0, 0, 1, 1},
  {&__pyx_n_s_identity, __pyx_k_identity, sizeof(__pyx_k_identity), 0, 0, 1, 1},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_log_normal, __pyx_k_log_normal, sizeof(__pyx_k_log_normal), 0, 0, 1, 1},
  {&__pyx_n_s_log_softmax, __pyx_k_log_softmax, sizeof(__pyx_k_log_softmax), 0, 0, 1, 1},
  {&__pyx_n_s_logsumexp, __pyx_k_logsumexp, sizeof(__pyx_k_logsumexp), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_lrelu, __pyx_k_lrelu, sizeof(__pyx_k_lrelu), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matmul, __pyx_k_matmul, sizeof(__pyx_k_matmul), 0, 0, 1, 1},
  {&__pyx_n_s_max_pool2d, __pyx_k_max_pool2d, sizeof(__pyx_k_max_pool2d), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mu, __pyx_k_mu, sizeof(__pyx_k_mu), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_new_shape, __pyx_k_new_shape, sizeof(__pyx_k_new_shape), 0, 0, 1, 1},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 0, 1, 1},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_padding0, __pyx_k_padding0, sizeof(__pyx_k_padding0), 0, 0, 1, 1},
  {&__pyx_n_s_padding1, __pyx_k_padding1, sizeof(__pyx_k_padding1), 0, 0, 1, 1},
  {&__pyx_n_s_param, __pyx_k_param, sizeof(__pyx_k_param), 0, 0, 1, 1},
  {&__pyx_n_s_parameter, __pyx_k_parameter, sizeof(__pyx_k_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_pick, __pyx_k_pick, sizeof(__pyx_k_pick), 0, 0, 1, 1},
  {&__pyx_n_s_pow, __pyx_k_pow, sizeof(__pyx_k_pow), 0, 0, 1, 1},
  {&__pyx_n_s_prelu, __pyx_k_prelu, sizeof(__pyx_k_prelu), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_primitiv__function, __pyx_k_primitiv__function, sizeof(__pyx_k_primitiv__function), 0, 0, 1, 1},
  {&__pyx_kp_s_primitiv__function_pyx, __pyx_k_primitiv__function_pyx, sizeof(__pyx_k_primitiv__function_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rate, __pyx_k_rate, sizeof(__pyx_k_rate), 0, 0, 1, 1},
  {&__pyx_n_s_raw_input, __pyx_k_raw_input, sizeof(__pyx_k_raw_input), 0, 0, 1, 1},
  {&__pyx_n_s_relu, __pyx_k_relu, sizeof(__pyx_k_relu), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_sd, __pyx_k_sd, sizeof(__pyx_k_sd), 0, 0, 1, 1},
  {&__pyx_n_s_selu, __pyx_k_selu, sizeof(__pyx_k_selu), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sigmoid, __pyx_k_sigmoid, sizeof(__pyx_k_sigmoid), 0, 0, 1, 1},
  {&__pyx_n_s_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_slice, __pyx_k_slice, sizeof(__pyx_k_slice), 0, 0, 1, 1},
  {&__pyx_n_s_softmax, __pyx_k_softmax, sizeof(__pyx_k_softmax), 0, 0, 1, 1},
  {&__pyx_n_s_softmax_cross_entropy, __pyx_k_softmax_cross_entropy, sizeof(__pyx_k_softmax_cross_entropy), 0, 0, 1, 1},
  {&__pyx_n_s_softplus, __pyx_k_softplus, sizeof(__pyx_k_softplus), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stop_gradient, __pyx_k_stop_gradient, sizeof(__pyx_k_stop_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_stride0, __pyx_k_stride0, sizeof(__pyx_k_stride0), 0, 0, 1, 1},
  {&__pyx_n_s_stride1, __pyx_k_stride1, sizeof(__pyx_k_stride1), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_kp_s_t_has_incorrect_type, __pyx_k_t_has_incorrect_type, sizeof(__pyx_k_t_has_incorrect_type), 0, 0, 1, 0},
  {&__pyx_n_s_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 0, 1, 1},
  {&__pyx_n_s_tanh, __pyx_k_tanh, sizeof(__pyx_k_tanh), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions, __pyx_k_tensor_functions, sizeof(__pyx_k_tensor_functions), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_batch, __pyx_k_tensor_functions_batch, sizeof(__pyx_k_tensor_functions_batch), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_batch_mean, __pyx_k_tensor_functions_batch_mean, sizeof(__pyx_k_tensor_functions_batch_mean), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_batch_normalize, __pyx_k_tensor_functions_batch_normalize, sizeof(__pyx_k_tensor_functions_batch_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_batch_sum, __pyx_k_tensor_functions_batch_sum, sizeof(__pyx_k_tensor_functions_batch_sum), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_broadcast, __pyx_k_tensor_functions_broadcast, sizeof(__pyx_k_tensor_functions_broadcast), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_concat, __pyx_k_tensor_functions_concat, sizeof(__pyx_k_tensor_functions_concat), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_constant, __pyx_k_tensor_functions_constant, sizeof(__pyx_k_tensor_functions_constant), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_conv2d, __pyx_k_tensor_functions_conv2d, sizeof(__pyx_k_tensor_functions_conv2d), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_copy, __pyx_k_tensor_functions_copy, sizeof(__pyx_k_tensor_functions_copy), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_cos, __pyx_k_tensor_functions_cos, sizeof(__pyx_k_tensor_functions_cos), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_dropout, __pyx_k_tensor_functions_dropout, sizeof(__pyx_k_tensor_functions_dropout), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_elu, __pyx_k_tensor_functions_elu, sizeof(__pyx_k_tensor_functions_elu), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_exp, __pyx_k_tensor_functions_exp, sizeof(__pyx_k_tensor_functions_exp), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_flatten, __pyx_k_tensor_functions_flatten, sizeof(__pyx_k_tensor_functions_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_identity, __pyx_k_tensor_functions_identity, sizeof(__pyx_k_tensor_functions_identity), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_input, __pyx_k_tensor_functions_input, sizeof(__pyx_k_tensor_functions_input), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_log, __pyx_k_tensor_functions_log, sizeof(__pyx_k_tensor_functions_log), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_log_softmax, __pyx_k_tensor_functions_log_softmax, sizeof(__pyx_k_tensor_functions_log_softmax), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_logsumexp, __pyx_k_tensor_functions_logsumexp, sizeof(__pyx_k_tensor_functions_logsumexp), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_lrelu, __pyx_k_tensor_functions_lrelu, sizeof(__pyx_k_tensor_functions_lrelu), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_matmul, __pyx_k_tensor_functions_matmul, sizeof(__pyx_k_tensor_functions_matmul), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_max_pool2d, __pyx_k_tensor_functions_max_pool2d, sizeof(__pyx_k_tensor_functions_max_pool2d), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_mean, __pyx_k_tensor_functions_mean, sizeof(__pyx_k_tensor_functions_mean), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_ones, __pyx_k_tensor_functions_ones, sizeof(__pyx_k_tensor_functions_ones), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_parameter, __pyx_k_tensor_functions_parameter, sizeof(__pyx_k_tensor_functions_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_pick, __pyx_k_tensor_functions_pick, sizeof(__pyx_k_tensor_functions_pick), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_pow, __pyx_k_tensor_functions_pow, sizeof(__pyx_k_tensor_functions_pow), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_prelu, __pyx_k_tensor_functions_prelu, sizeof(__pyx_k_tensor_functions_prelu), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_random, __pyx_k_tensor_functions_random, sizeof(__pyx_k_tensor_functions_random), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_random_bernoull, __pyx_k_tensor_functions_random_bernoull, sizeof(__pyx_k_tensor_functions_random_bernoull), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_random_gumbel, __pyx_k_tensor_functions_random_gumbel, sizeof(__pyx_k_tensor_functions_random_gumbel), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_random_log_norm, __pyx_k_tensor_functions_random_log_norm, sizeof(__pyx_k_tensor_functions_random_log_norm), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_random_normal, __pyx_k_tensor_functions_random_normal, sizeof(__pyx_k_tensor_functions_random_normal), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_random_uniform, __pyx_k_tensor_functions_random_uniform, sizeof(__pyx_k_tensor_functions_random_uniform), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_raw_input, __pyx_k_tensor_functions_raw_input, sizeof(__pyx_k_tensor_functions_raw_input), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_relu, __pyx_k_tensor_functions_relu, sizeof(__pyx_k_tensor_functions_relu), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_reshape, __pyx_k_tensor_functions_reshape, sizeof(__pyx_k_tensor_functions_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_selu, __pyx_k_tensor_functions_selu, sizeof(__pyx_k_tensor_functions_selu), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_sigmoid, __pyx_k_tensor_functions_sigmoid, sizeof(__pyx_k_tensor_functions_sigmoid), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_sin, __pyx_k_tensor_functions_sin, sizeof(__pyx_k_tensor_functions_sin), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_slice, __pyx_k_tensor_functions_slice, sizeof(__pyx_k_tensor_functions_slice), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_softmax, __pyx_k_tensor_functions_softmax, sizeof(__pyx_k_tensor_functions_softmax), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_softmax_cross_e, __pyx_k_tensor_functions_softmax_cross_e, sizeof(__pyx_k_tensor_functions_softmax_cross_e), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_softplus, __pyx_k_tensor_functions_softplus, sizeof(__pyx_k_tensor_functions_softplus), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_sqrt, __pyx_k_tensor_functions_sqrt, sizeof(__pyx_k_tensor_functions_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_stop_gradient, __pyx_k_tensor_functions_stop_gradient, sizeof(__pyx_k_tensor_functions_stop_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_sum, __pyx_k_tensor_functions_sum, sizeof(__pyx_k_tensor_functions_sum), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_tan, __pyx_k_tensor_functions_tan, sizeof(__pyx_k_tensor_functions_tan), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_tanh, __pyx_k_tensor_functions_tanh, sizeof(__pyx_k_tensor_functions_tanh), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_transpose, __pyx_k_tensor_functions_transpose, sizeof(__pyx_k_tensor_functions_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_tensor_functions_zeros, __pyx_k_tensor_functions_zeros, sizeof(__pyx_k_tensor_functions_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_transpose, __pyx_k_transpose, sizeof(__pyx_k_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_vec, __pyx_k_vec, sizeof(__pyx_k_vec), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_window0, __pyx_k_window0, sizeof(__pyx_k_window0), 0, 0, 1, 1},
  {&__pyx_n_s_window1, __pyx_k_window1, sizeof(__pyx_k_window1), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_kp_s_x_or_k_has_incorrect_type, __pyx_k_x_or_k_has_incorrect_type, sizeof(__pyx_k_x_or_k_has_incorrect_type), 0, 0, 1, 0},
  {&__pyx_n_s_xs, __pyx_k_xs, sizeof(__pyx_k_xs), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(4, 272, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(4, 285, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(4, 856, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(4, 1038, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(5, 27, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "primitiv/_function.pyx":43
 *         if isinstance(data, list):
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")             # <<<<<<<<<<<<<<
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_data_contains_no_item); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "primitiv/_function.pyx":45
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")             # <<<<<<<<<<<<<<
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_data_contains_other_objects_tha); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "primitiv/_function.pyx":48
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 *             raise TypeError("`data` has incorrect type.")             # <<<<<<<<<<<<<<
 *         return functions.raw_input(shape, ndarrays_to_vector(data), device, graph)
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_data_has_incorrect_type); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "primitiv/_function.pyx":119
 *             return wrapNode(func_pow((<Node> x).wrapped, (<Node> k).wrapped))
 *         else:
 *             raise TypeError("`x` or `k` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_x_or_k_has_incorrect_type); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "primitiv/_function.pyx":210
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, <vector[unsigned]> t, dim))
 *         else:
 *             raise TypeError("`t` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_t_has_incorrect_type); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "primitiv/_function.pyx":360
 *         if isinstance(data, list):
 *             if len(data) == 0:
 *                 raise TypeError("`data` contains no item.")             # <<<<<<<<<<<<<<
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_data_contains_no_item); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "primitiv/_function.pyx":362
 *                 raise TypeError("`data` contains no item.")
 *             if not isinstance(data[0], np.ndarray):
 *                 raise TypeError("`data` contains other objects than numpy.ndarray.")             # <<<<<<<<<<<<<<
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_data_contains_other_objects_tha); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "primitiv/_function.pyx":365
 *             shape = Shape(data[0].shape, len(data))
 *         else:
 *             raise TypeError("`data` has incorrect type.")             # <<<<<<<<<<<<<<
 *         return tensor_functions.raw_input(shape, ndarrays_to_vector(data), device)
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_data_has_incorrect_type); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "primitiv/_function.pyx":433
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pow((<Tensor> x).wrapped[0], (<Tensor> k).wrapped[0])))
 *         else:
 *             raise TypeError("`x` or `k` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_x_or_k_has_incorrect_type); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "primitiv/_function.pyx":524
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], <vector[unsigned]> t, dim)))
 *         else:
 *             raise TypeError("`t` has incorrect type.")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_t_has_incorrect_type); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(4, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(4, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(4, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(4, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(4, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(4, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(4, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(4, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "../../../../../virtualenv/python3.5.6/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(4, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "utils.pxd":23
 * 
 *     if len(arrays) == 0:
 *         raise TypeError("arrays contains no item")             # <<<<<<<<<<<<<<
 *     datasize = arrays[0].size
 *     shape = arrays[0].shape
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_arrays_contains_no_item); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(5, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "utils.pxd":29
 *     for j, data in enumerate(arrays):
 *         if shape != data.shape:
 *             raise TypeError("arrays contains different shaped ndarrays")             # <<<<<<<<<<<<<<
 *         data_tmp = np.array(data, dtype=np.float32, order="F")
 *         np_data = <np.float32_t *> data_tmp.data
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_arrays_contains_different_shaped); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "primitiv/_function.pyx":19
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__15 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_data, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_raw_input, 19, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_tuple__17 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "primitiv/_function.pyx":31
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */
  __pyx_tuple__18 = PyTuple_Pack(4, __pyx_n_s_data, __pyx_n_s_device, __pyx_n_s_graph, __pyx_n_s_shape); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_input, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_tuple__20 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "primitiv/_function.pyx":53
 * 
 *     @staticmethod
 *     def parameter(Parameter param, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_param, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_parameter, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_tuple__23 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "primitiv/_function.pyx":59
 * 
 *     @staticmethod
 *     def copy(Node x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_device); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_copy, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_tuple__26 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "primitiv/_function.pyx":65
 * 
 *     @staticmethod
 *     def pick(Node x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_pick(x.wrapped, ids, dim))
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_ids, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_pick, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 65, __pyx_L1_error)

  /* "primitiv/_function.pyx":69
 * 
 *     @staticmethod
 *     def slice(Node x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(4, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_lower, __pyx_n_s_upper); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_slice, 69, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 69, __pyx_L1_error)

  /* "primitiv/_function.pyx":73
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] vec
 *         cdef Node x
 */
  __pyx_tuple__31 = PyTuple_Pack(4, __pyx_n_s_xs, __pyx_n_s_dim, __pyx_n_s_vec, __pyx_n_s_x); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_concat, 73, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 73, __pyx_L1_error)

  /* "primitiv/_function.pyx":81
 * 
 *     @staticmethod
 *     def reshape(Node x, new_shape):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_new_shape); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_reshape, 81, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 81, __pyx_L1_error)

  /* "primitiv/_function.pyx":85
 * 
 *     @staticmethod
 *     def flatten(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_flatten(x.wrapped))
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_flatten, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 85, __pyx_L1_error)

  /* "primitiv/_function.pyx":89
 * 
 *     @staticmethod
 *     def transpose(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_transpose(x.wrapped))
 * 
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_transpose, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 89, __pyx_L1_error)

  /* "primitiv/_function.pyx":93
 * 
 *     @staticmethod
 *     def matmul(Node a, Node b):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_matmul, 93, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 93, __pyx_L1_error)

  /* "primitiv/_function.pyx":97
 * 
 *     @staticmethod
 *     def sqrt(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sqrt(x.wrapped))
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sqrt, 97, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 97, __pyx_L1_error)

  /* "primitiv/_function.pyx":101
 * 
 *     @staticmethod
 *     def exp(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_exp(x.wrapped))
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_exp, 101, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 101, __pyx_L1_error)

  /* "primitiv/_function.pyx":105
 * 
 *     @staticmethod
 *     def log(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log(x.wrapped))
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_log, 105, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 105, __pyx_L1_error)

  /* "primitiv/_function.pyx":109
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_k); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_pow, 109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 109, __pyx_L1_error)

  /* "primitiv/_function.pyx":122
 * 
 *     @staticmethod
 *     def tanh(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tanh(x.wrapped))
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_tanh, 122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 122, __pyx_L1_error)

  /* "primitiv/_function.pyx":126
 * 
 *     @staticmethod
 *     def sigmoid(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sigmoid(x.wrapped))
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sigmoid, 126, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 126, __pyx_L1_error)

  /* "primitiv/_function.pyx":130
 * 
 *     @staticmethod
 *     def softplus(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softplus(x.wrapped))
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_softplus, 130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 130, __pyx_L1_error)

  /* "primitiv/_function.pyx":134
 * 
 *     @staticmethod
 *     def sin(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sin(x.wrapped))
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sin, 134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 134, __pyx_L1_error)

  /* "primitiv/_function.pyx":138
 * 
 *     @staticmethod
 *     def cos(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_cos(x.wrapped))
 * 
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_cos, 138, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 138, __pyx_L1_error)

  /* "primitiv/_function.pyx":142
 * 
 *     @staticmethod
 *     def tan(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tan(x.wrapped))
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_tan, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 142, __pyx_L1_error)

  /* "primitiv/_function.pyx":146
 * 
 *     @staticmethod
 *     def relu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_relu(x.wrapped))
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_relu, 146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 146, __pyx_L1_error)

  /* "primitiv/_function.pyx":150
 * 
 *     @staticmethod
 *     def lrelu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_lrelu(x.wrapped))
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_lrelu, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 150, __pyx_L1_error)

  /* "primitiv/_function.pyx":154
 * 
 *     @staticmethod
 *     def prelu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_prelu(x.wrapped, a))
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_a); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_prelu, 154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 154, __pyx_L1_error)

  /* "primitiv/_function.pyx":158
 * 
 *     @staticmethod
 *     def elu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_elu(x.wrapped, a))
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_a); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_elu, 158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 158, __pyx_L1_error)

  /* "primitiv/_function.pyx":162
 * 
 *     @staticmethod
 *     def selu(Node x, float a, float s):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_selu(x.wrapped, a, s))
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_a, __pyx_n_s_s); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_selu, 162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 162, __pyx_L1_error)

  /* "primitiv/_function.pyx":166
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */
  __pyx_tuple__71 = PyTuple_Pack(4, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_xs, __pyx_n_s_node); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sum, 166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 166, __pyx_L1_error)
  __pyx_tuple__73 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "primitiv/_function.pyx":177
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */
  __pyx_tuple__74 = PyTuple_Pack(4, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_xs, __pyx_n_s_node); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_mean, 177, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_tuple__76 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "primitiv/_function.pyx":188
 * 
 *     @staticmethod
 *     def broadcast(Node x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))
 * 
 */
  __pyx_tuple__77 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_size); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_broadcast, 188, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 188, __pyx_L1_error)

  /* "primitiv/_function.pyx":192
 * 
 *     @staticmethod
 *     def logsumexp(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_logsumexp(x.wrapped, dim))
 * 
 */
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_logsumexp, 192, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 192, __pyx_L1_error)

  /* "primitiv/_function.pyx":196
 * 
 *     @staticmethod
 *     def log_softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log_softmax(x.wrapped, dim))
 * 
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_log_softmax, 196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 196, __pyx_L1_error)

  /* "primitiv/_function.pyx":200
 * 
 *     @staticmethod
 *     def softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softmax(x.wrapped, dim))
 * 
 */
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_softmax, 200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 200, __pyx_L1_error)

  /* "primitiv/_function.pyx":204
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Node x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 */
  __pyx_tuple__85 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_softmax_cross_entropy, 204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 204, __pyx_L1_error)

  /* "primitiv/_function.pyx":213
 * 
 *     @staticmethod
 *     def stop_gradient(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_stop_gradient(x.wrapped))
 * 
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_stop_gradient, 213, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 213, __pyx_L1_error)

  /* "primitiv/_function.pyx":217
 * 
 *     @staticmethod
 *     def conv2d(Node x, Node w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */
  __pyx_tuple__89 = PyTuple_Pack(8, __pyx_n_s_x, __pyx_n_s_w, __pyx_n_s_padding0, __pyx_n_s_padding1, __pyx_n_s_stride0, __pyx_n_s_stride1, __pyx_n_s_dilation0, __pyx_n_s_dilation1); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_conv2d, 217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 217, __pyx_L1_error)

  /* "primitiv/_function.pyx":227
 * 
 *     @staticmethod
 *     def max_pool2d(Node x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */
  __pyx_tuple__91 = PyTuple_Pack(7, __pyx_n_s_x, __pyx_n_s_window0, __pyx_n_s_window1, __pyx_n_s_padding0, __pyx_n_s_padding1, __pyx_n_s_stride0, __pyx_n_s_stride1); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_max_pool2d, 227, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 227, __pyx_L1_error)

  /* "primitiv/_function.pyx":237
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__93 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_k, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_constant, 237, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_tuple__95 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "primitiv/_function.pyx":246
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__96 = PyTuple_Pack(3, __pyx_n_s_shape, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_zeros, 246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_tuple__98 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "primitiv/_function.pyx":255
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__99 = PyTuple_Pack(3, __pyx_n_s_shape, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_ones, 255, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_tuple__101 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "primitiv/_function.pyx":264
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__102 = PyTuple_Pack(3, __pyx_n_s_size, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_identity, 264, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_tuple__104 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "primitiv/_function.pyx":273
 *     class batch:
 *         @staticmethod
 *         def sum(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))
 * 
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sum, 273, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 273, __pyx_L1_error)

  /* "primitiv/_function.pyx":277
 * 
 *         @staticmethod
 *         def mean(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_mean, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 277, __pyx_L1_error)

  /* "primitiv/_function.pyx":281
 * 
 *         @staticmethod
 *         def normalize(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_normalize, 281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 281, __pyx_L1_error)

  /* "primitiv/_function.pyx":286
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__111 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_p, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_bernoulli, 286, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_tuple__113 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "primitiv/_function.pyx":295
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__114 = PyTuple_Pack(5, __pyx_n_s_shape, __pyx_n_s_lower, __pyx_n_s_upper, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_uniform, 295, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_tuple__116 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "primitiv/_function.pyx":304
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__117 = PyTuple_Pack(5, __pyx_n_s_shape, __pyx_n_s_mean, __pyx_n_s_sd, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_normal, 304, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_tuple__119 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "primitiv/_function.pyx":313
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__120 = PyTuple_Pack(5, __pyx_n_s_shape, __pyx_n_s_mean, __pyx_n_s_sd, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_log_normal, 313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_tuple__122 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "primitiv/_function.pyx":322
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__123 = PyTuple_Pack(5, __pyx_n_s_shape, __pyx_n_s_mu, __pyx_n_s_beta, __pyx_n_s_device, __pyx_n_s_graph); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_gumbel, 322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_tuple__125 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "primitiv/_function.pyx":331
 * 
 *     @staticmethod
 *     def dropout(Node x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_dropout(x.wrapped, rate, enabled))
 * 
 */
  __pyx_tuple__126 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_rate, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_dropout, 331, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 331, __pyx_L1_error)

  /* "primitiv/_function.pyx":338
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__128 = PyTuple_Pack(3, __pyx_n_s_shape, __pyx_n_s_data, __pyx_n_s_device); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_raw_input, 338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_tuple__130 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "primitiv/_function.pyx":348
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */
  __pyx_tuple__131 = PyTuple_Pack(3, __pyx_n_s_data, __pyx_n_s_device, __pyx_n_s_shape); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_input, 348, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_tuple__133 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "primitiv/_function.pyx":369
 * 
 *     @staticmethod
 *     def parameter(Parameter param):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))
 * 
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_n_s_param); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_parameter, 369, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 369, __pyx_L1_error)

  /* "primitiv/_function.pyx":373
 * 
 *     @staticmethod
 *     def copy(Tensor x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_device); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_copy, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_tuple__138 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "primitiv/_function.pyx":379
 * 
 *     @staticmethod
 *     def pick(Tensor x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))
 * 
 */
  __pyx_tuple__139 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_ids, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_pick, 379, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(0, 379, __pyx_L1_error)

  /* "primitiv/_function.pyx":383
 * 
 *     @staticmethod
 *     def slice(Tensor x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))
 * 
 */
  __pyx_tuple__141 = PyTuple_Pack(4, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_lower, __pyx_n_s_upper); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_slice, 383, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 383, __pyx_L1_error)

  /* "primitiv/_function.pyx":387
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] vec
 *         cdef Tensor x
 */
  __pyx_tuple__143 = PyTuple_Pack(4, __pyx_n_s_xs, __pyx_n_s_dim, __pyx_n_s_vec, __pyx_n_s_x); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_concat, 387, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 387, __pyx_L1_error)

  /* "primitiv/_function.pyx":395
 * 
 *     @staticmethod
 *     def reshape(Tensor x, new_shape):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))
 * 
 */
  __pyx_tuple__145 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_new_shape); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_reshape, 395, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 395, __pyx_L1_error)

  /* "primitiv/_function.pyx":399
 * 
 *     @staticmethod
 *     def flatten(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))
 * 
 */
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_flatten, 399, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(0, 399, __pyx_L1_error)

  /* "primitiv/_function.pyx":403
 * 
 *     @staticmethod
 *     def transpose(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))
 * 
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__149, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_transpose, 403, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(0, 403, __pyx_L1_error)

  /* "primitiv/_function.pyx":407
 * 
 *     @staticmethod
 *     def matmul(Tensor a, Tensor b):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))
 * 
 */
  __pyx_tuple__151 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__151, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_matmul, 407, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 407, __pyx_L1_error)

  /* "primitiv/_function.pyx":411
 * 
 *     @staticmethod
 *     def sqrt(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))
 * 
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sqrt, 411, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 411, __pyx_L1_error)

  /* "primitiv/_function.pyx":415
 * 
 *     @staticmethod
 *     def exp(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))
 * 
 */
  __pyx_tuple__155 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_exp, 415, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 415, __pyx_L1_error)

  /* "primitiv/_function.pyx":419
 * 
 *     @staticmethod
 *     def log(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))
 * 
 */
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_log, 419, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 419, __pyx_L1_error)

  /* "primitiv/_function.pyx":423
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 */
  __pyx_tuple__159 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_k); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_pow, 423, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 423, __pyx_L1_error)

  /* "primitiv/_function.pyx":436
 * 
 *     @staticmethod
 *     def tanh(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))
 * 
 */
  __pyx_tuple__161 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_tanh, 436, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 436, __pyx_L1_error)

  /* "primitiv/_function.pyx":440
 * 
 *     @staticmethod
 *     def sigmoid(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))
 * 
 */
  __pyx_tuple__163 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sigmoid, 440, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 440, __pyx_L1_error)

  /* "primitiv/_function.pyx":444
 * 
 *     @staticmethod
 *     def softplus(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))
 * 
 */
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_softplus, 444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(0, 444, __pyx_L1_error)

  /* "primitiv/_function.pyx":448
 * 
 *     @staticmethod
 *     def sin(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))
 * 
 */
  __pyx_tuple__167 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sin, 448, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 448, __pyx_L1_error)

  /* "primitiv/_function.pyx":452
 * 
 *     @staticmethod
 *     def cos(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))
 * 
 */
  __pyx_tuple__169 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_cos, 452, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 452, __pyx_L1_error)

  /* "primitiv/_function.pyx":456
 * 
 *     @staticmethod
 *     def tan(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_tan, 456, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 456, __pyx_L1_error)

  /* "primitiv/_function.pyx":460
 * 
 *     @staticmethod
 *     def relu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))
 * 
 */
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_relu, 460, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 460, __pyx_L1_error)

  /* "primitiv/_function.pyx":464
 * 
 *     @staticmethod
 *     def lrelu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))
 * 
 */
  __pyx_tuple__175 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_lrelu, 464, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 464, __pyx_L1_error)

  /* "primitiv/_function.pyx":468
 * 
 *     @staticmethod
 *     def prelu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))
 * 
 */
  __pyx_tuple__177 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_a); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_prelu, 468, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(0, 468, __pyx_L1_error)

  /* "primitiv/_function.pyx":472
 * 
 *     @staticmethod
 *     def elu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))
 * 
 */
  __pyx_tuple__179 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_a); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_elu, 472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(0, 472, __pyx_L1_error)

  /* "primitiv/_function.pyx":476
 * 
 *     @staticmethod
 *     def selu(Tensor x, float a, float s):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))
 * 
 */
  __pyx_tuple__181 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_a, __pyx_n_s_s); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __pyx_codeobj__182 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__181, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_selu, 476, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__182)) __PYX_ERR(0, 476, __pyx_L1_error)

  /* "primitiv/_function.pyx":480
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */
  __pyx_tuple__183 = PyTuple_Pack(4, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_xs, __pyx_n_s_t); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);
  __pyx_codeobj__184 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__183, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sum, 480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__184)) __PYX_ERR(0, 480, __pyx_L1_error)
  __pyx_tuple__185 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);

  /* "primitiv/_function.pyx":491
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */
  __pyx_tuple__186 = PyTuple_Pack(4, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_xs, __pyx_n_s_t); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_mean, 491, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(0, 491, __pyx_L1_error)
  __pyx_tuple__188 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);

  /* "primitiv/_function.pyx":502
 * 
 *     @staticmethod
 *     def broadcast(Tensor x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))
 * 
 */
  __pyx_tuple__189 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_dim, __pyx_n_s_size); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_broadcast, 502, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(0, 502, __pyx_L1_error)

  /* "primitiv/_function.pyx":506
 * 
 *     @staticmethod
 *     def logsumexp(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))
 * 
 */
  __pyx_tuple__191 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_logsumexp, 506, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 506, __pyx_L1_error)

  /* "primitiv/_function.pyx":510
 * 
 *     @staticmethod
 *     def log_softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))
 * 
 */
  __pyx_tuple__193 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_log_softmax, 510, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 510, __pyx_L1_error)

  /* "primitiv/_function.pyx":514
 * 
 *     @staticmethod
 *     def softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))
 * 
 */
  __pyx_tuple__195 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_softmax, 514, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(0, 514, __pyx_L1_error)

  /* "primitiv/_function.pyx":518
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 */
  __pyx_tuple__197 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);
  __pyx_codeobj__198 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__197, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_softmax_cross_entropy, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__198)) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "primitiv/_function.pyx":527
 * 
 *     @staticmethod
 *     def stop_gradient(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))
 * 
 */
  __pyx_tuple__199 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);
  __pyx_codeobj__200 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__199, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_stop_gradient, 527, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__200)) __PYX_ERR(0, 527, __pyx_L1_error)

  /* "primitiv/_function.pyx":531
 * 
 *     @staticmethod
 *     def conv2d(Tensor x, Tensor w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */
  __pyx_tuple__201 = PyTuple_Pack(8, __pyx_n_s_x, __pyx_n_s_w, __pyx_n_s_padding0, __pyx_n_s_padding1, __pyx_n_s_stride0, __pyx_n_s_stride1, __pyx_n_s_dilation0, __pyx_n_s_dilation1); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);
  __pyx_codeobj__202 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__201, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_conv2d, 531, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__202)) __PYX_ERR(0, 531, __pyx_L1_error)

  /* "primitiv/_function.pyx":541
 * 
 *     @staticmethod
 *     def max_pool2d(Tensor x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */
  __pyx_tuple__203 = PyTuple_Pack(7, __pyx_n_s_x, __pyx_n_s_window0, __pyx_n_s_window1, __pyx_n_s_padding0, __pyx_n_s_padding1, __pyx_n_s_stride0, __pyx_n_s_stride1); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);
  __pyx_codeobj__204 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__203, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_max_pool2d, 541, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__204)) __PYX_ERR(0, 541, __pyx_L1_error)

  /* "primitiv/_function.pyx":551
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__205 = PyTuple_Pack(3, __pyx_n_s_shape, __pyx_n_s_k, __pyx_n_s_device); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  __pyx_codeobj__206 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__205, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_constant, 551, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__206)) __PYX_ERR(0, 551, __pyx_L1_error)
  __pyx_tuple__207 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);

  /* "primitiv/_function.pyx":558
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_n_s_shape, __pyx_n_s_device); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_codeobj__209 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_zeros, 558, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__209)) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_tuple__210 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);

  /* "primitiv/_function.pyx":565
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__211 = PyTuple_Pack(2, __pyx_n_s_shape, __pyx_n_s_device); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  __pyx_codeobj__212 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__211, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_ones, 565, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__212)) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_tuple__213 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);

  /* "primitiv/_function.pyx":572
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_tuple__214 = PyTuple_Pack(2, __pyx_n_s_size, __pyx_n_s_device); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);
  __pyx_codeobj__215 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__214, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_identity, 572, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__215)) __PYX_ERR(0, 572, __pyx_L1_error)
  __pyx_tuple__216 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);

  /* "primitiv/_function.pyx":579
 *     class batch:
 *         @staticmethod
 *         def sum(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))
 * 
 */
  __pyx_tuple__217 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);
  __pyx_codeobj__218 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__217, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_sum, 579, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__218)) __PYX_ERR(0, 579, __pyx_L1_error)

  /* "primitiv/_function.pyx":583
 * 
 *         @staticmethod
 *         def mean(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))
 * 
 */
  __pyx_tuple__219 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__219)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);
  __pyx_codeobj__220 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__219, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_mean, 583, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__220)) __PYX_ERR(0, 583, __pyx_L1_error)

  /* "primitiv/_function.pyx":587
 * 
 *         @staticmethod
 *         def normalize(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 * 
 */
  __pyx_tuple__221 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__221)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);
  __pyx_codeobj__222 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__221, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_normalize, 587, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__222)) __PYX_ERR(0, 587, __pyx_L1_error)

  /* "primitiv/_function.pyx":592
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__223 = PyTuple_Pack(3, __pyx_n_s_shape, __pyx_n_s_p, __pyx_n_s_device); if (unlikely(!__pyx_tuple__223)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);
  __pyx_codeobj__224 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__223, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_bernoulli, 592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__224)) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_tuple__225 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__225)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__225);
  __Pyx_GIVEREF(__pyx_tuple__225);

  /* "primitiv/_function.pyx":599
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__226 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_lower, __pyx_n_s_upper, __pyx_n_s_device); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_codeobj__227 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__226, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_uniform, 599, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__227)) __PYX_ERR(0, 599, __pyx_L1_error)
  __pyx_tuple__228 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__228)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);

  /* "primitiv/_function.pyx":606
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__229 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_mean, __pyx_n_s_sd, __pyx_n_s_device); if (unlikely(!__pyx_tuple__229)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);
  __pyx_codeobj__230 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__229, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_normal, 606, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__230)) __PYX_ERR(0, 606, __pyx_L1_error)
  __pyx_tuple__231 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__231)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__231);
  __Pyx_GIVEREF(__pyx_tuple__231);

  /* "primitiv/_function.pyx":613
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__232 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_mean, __pyx_n_s_sd, __pyx_n_s_device); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  __pyx_codeobj__233 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__232, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_log_normal, 613, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__233)) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_tuple__234 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__234)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);

  /* "primitiv/_function.pyx":620
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_tuple__235 = PyTuple_Pack(4, __pyx_n_s_shape, __pyx_n_s_mu, __pyx_n_s_beta, __pyx_n_s_device); if (unlikely(!__pyx_tuple__235)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);
  __pyx_codeobj__236 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__235, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_gumbel, 620, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__236)) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_tuple__237 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__237)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__237);
  __Pyx_GIVEREF(__pyx_tuple__237);

  /* "primitiv/_function.pyx":627
 * 
 *     @staticmethod
 *     def dropout(Tensor x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_dropout(x.wrapped[0], rate, enabled)))
 */
  __pyx_tuple__238 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_rate, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__238)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_codeobj__239 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__238, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_primitiv__function_pyx, __pyx_n_s_dropout, 627, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__239)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_2147483647 = PyInt_FromLong(2147483647L); if (unlikely(!__pyx_int_2147483647)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_2147483648 = PyInt_FromLong(-2147483648L); if (unlikely(!__pyx_int_neg_2147483648)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("primitiv._device"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8primitiv_7_device_Device = __Pyx_ImportType(__pyx_t_1, "primitiv._device", "Device", sizeof(struct __pyx_obj_8primitiv_7_device_Device), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_7_device_Device) __PYX_ERR(7, 6, __pyx_L1_error)
  __pyx_vtabptr_8primitiv_7_device_Device = (struct __pyx_vtabstruct_8primitiv_7_device_Device*)__Pyx_GetVtable(__pyx_ptype_8primitiv_7_device_Device->tp_dict); if (unlikely(!__pyx_vtabptr_8primitiv_7_device_Device)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("primitiv._shape"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8primitiv_6_shape_Shape = __Pyx_ImportType(__pyx_t_1, "primitiv._shape", "Shape", sizeof(struct __pyx_obj_8primitiv_6_shape_Shape), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_6_shape_Shape) __PYX_ERR(3, 33, __pyx_L1_error)
  __pyx_vtabptr_8primitiv_6_shape_Shape = (struct __pyx_vtabstruct_8primitiv_6_shape_Shape*)__Pyx_GetVtable(__pyx_ptype_8primitiv_6_shape_Shape->tp_dict); if (unlikely(!__pyx_vtabptr_8primitiv_6_shape_Shape)) __PYX_ERR(3, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("primitiv._tensor"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8primitiv_7_tensor_Tensor = __Pyx_ImportType(__pyx_t_1, "primitiv._tensor", "Tensor", sizeof(struct __pyx_obj_8primitiv_7_tensor_Tensor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_7_tensor_Tensor) __PYX_ERR(8, 30, __pyx_L1_error)
  __pyx_vtabptr_8primitiv_7_tensor_Tensor = (struct __pyx_vtabstruct_8primitiv_7_tensor_Tensor*)__Pyx_GetVtable(__pyx_ptype_8primitiv_7_tensor_Tensor->tp_dict); if (unlikely(!__pyx_vtabptr_8primitiv_7_tensor_Tensor)) __PYX_ERR(8, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("primitiv._graph"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8primitiv_6_graph_Node = __Pyx_ImportType(__pyx_t_1, "primitiv._graph", "Node", sizeof(struct __pyx_obj_8primitiv_6_graph_Node), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_6_graph_Node) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_ptype_8primitiv_6_graph_Graph = __Pyx_ImportType(__pyx_t_1, "primitiv._graph", "Graph", sizeof(struct __pyx_obj_8primitiv_6_graph_Graph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_6_graph_Graph) __PYX_ERR(2, 42, __pyx_L1_error)
  __pyx_vtabptr_8primitiv_6_graph_Graph = (struct __pyx_vtabstruct_8primitiv_6_graph_Graph*)__Pyx_GetVtable(__pyx_ptype_8primitiv_6_graph_Graph->tp_dict); if (unlikely(!__pyx_vtabptr_8primitiv_6_graph_Graph)) __PYX_ERR(2, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("primitiv._initializer"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8primitiv_12_initializer_Initializer = __Pyx_ImportType(__pyx_t_1, "primitiv._initializer", "Initializer", sizeof(struct __pyx_obj_8primitiv_12_initializer_Initializer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_12_initializer_Initializer) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("primitiv._parameter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8primitiv_10_parameter_ParameterStatistics = __Pyx_ImportType(__pyx_t_1, "primitiv._parameter", "ParameterStatistics", sizeof(struct __pyx_obj_8primitiv_10_parameter_ParameterStatistics), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_10_parameter_ParameterStatistics) __PYX_ERR(9, 32, __pyx_L1_error)
  __pyx_ptype_8primitiv_10_parameter_Parameter = __Pyx_ImportType(__pyx_t_1, "primitiv._parameter", "Parameter", sizeof(struct __pyx_obj_8primitiv_10_parameter_Parameter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8primitiv_10_parameter_Parameter) __PYX_ERR(9, 36, __pyx_L1_error)
  __pyx_vtabptr_8primitiv_10_parameter_Parameter = (struct __pyx_vtabstruct_8primitiv_10_parameter_Parameter*)__Pyx_GetVtable(__pyx_ptype_8primitiv_10_parameter_Parameter->tp_dict); if (unlikely(!__pyx_vtabptr_8primitiv_10_parameter_Parameter)) __PYX_ERR(9, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(10, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(4, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(4, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(4, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(4, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(4, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_function(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_function(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__function(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__function(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__function(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_function' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__function(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_function", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_primitiv___function) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "primitiv._function")) {
      if (unlikely(PyDict_SetItemString(modules, "primitiv._function", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "primitiv/_function.pyx":13
 * 
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "primitiv/_function.pyx":16
 * 
 * 
 * class functions:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_functions, __pyx_n_s_functions, (PyObject *) NULL, __pyx_n_s_primitiv__function, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "primitiv/_function.pyx":19
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_1raw_input, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_raw_input, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__17);

  /* "primitiv/_function.pyx":18
 * class functions:
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def raw_input(shape, vector[float] data, Device device = None, Graph graph = None):
 *         if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_raw_input, __pyx_t_3) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":31
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_3input, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_input, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__20);

  /* "primitiv/_function.pyx":30
 *     # This function takes an np.ndarray or a list of np.ndarray
 *     # instead of a vector.
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def input(data, Device device = None, Graph graph = None):
 *         # NOTE(vbkaisetsu, odashi):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_input, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":53
 * 
 *     @staticmethod
 *     def parameter(Parameter param, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if graph is None:
 *             graph = Graph.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_5parameter, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_parameter, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__23);

  /* "primitiv/_function.pyx":52
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def parameter(Parameter param, Graph graph = None):
 *         if graph is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_parameter, __pyx_t_3) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":59
 * 
 *     @staticmethod
 *     def copy(Node x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_7copy, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_copy, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__26);

  /* "primitiv/_function.pyx":58
 *         return wrapNode(func_parameter_node(param.wrapped[0], get_cpp_graph(graph)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def copy(Node x, Device device = None):
 *         if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_copy, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":65
 * 
 *     @staticmethod
 *     def pick(Node x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_pick(x.wrapped, ids, dim))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_9pick, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_pick, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":64
 *         return wrapNode(func_copy(x.wrapped, get_cpp_device(device)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def pick(Node x, vector[unsigned] ids, unsigned dim):
 *         return wrapNode(func_pick(x.wrapped, ids, dim))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_pick, __pyx_t_3) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":69
 * 
 *     @staticmethod
 *     def slice(Node x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_11slice, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_slice, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":68
 *         return wrapNode(func_pick(x.wrapped, ids, dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def slice(Node x, unsigned dim, unsigned lower, unsigned upper):
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_slice, __pyx_t_2) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":73
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] vec
 *         cdef Node x
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_13concat, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_concat, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":72
 *         return wrapNode(func_slice(x.wrapped, dim, lower, upper))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def concat(xs, unsigned dim):
 *         cdef vector[CppNode] vec
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_concat, __pyx_t_3) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":81
 * 
 *     @staticmethod
 *     def reshape(Node x, new_shape):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_15reshape, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_reshape, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":80
 *         return wrapNode(func_concat(vec, dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def reshape(Node x, new_shape):
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_reshape, __pyx_t_2) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":85
 * 
 *     @staticmethod
 *     def flatten(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_flatten(x.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_17flatten, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_flatten, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":84
 *         return wrapNode(func_reshape(x.wrapped, normShape(new_shape).wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def flatten(Node x):
 *         return wrapNode(func_flatten(x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_flatten, __pyx_t_3) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":89
 * 
 *     @staticmethod
 *     def transpose(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_transpose(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_19transpose, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_transpose, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":88
 *         return wrapNode(func_flatten(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def transpose(Node x):
 *         return wrapNode(func_transpose(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_transpose, __pyx_t_2) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":93
 * 
 *     @staticmethod
 *     def matmul(Node a, Node b):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_21matmul, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_matmul, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":92
 *         return wrapNode(func_transpose(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def matmul(Node a, Node b):
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_matmul, __pyx_t_3) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":97
 * 
 *     @staticmethod
 *     def sqrt(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sqrt(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_23sqrt, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_sqrt, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":96
 *         return wrapNode(func_matmul(a.wrapped, b.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sqrt(Node x):
 *         return wrapNode(func_sqrt(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sqrt, __pyx_t_2) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":101
 * 
 *     @staticmethod
 *     def exp(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_exp(x.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_25exp, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_exp, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":100
 *         return wrapNode(func_sqrt(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def exp(Node x):
 *         return wrapNode(func_exp(x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_exp, __pyx_t_3) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":105
 * 
 *     @staticmethod
 *     def log(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_27log, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_log, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":104
 *         return wrapNode(func_exp(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def log(Node x):
 *         return wrapNode(func_log(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_log, __pyx_t_2) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":109
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return wrapNode(func_pown((<Node> x).wrapped, <int> k))
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_29pow, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_pow, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":108
 *         return wrapNode(func_log(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def pow(x, k):
 *         if isinstance(x, Node) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_pow, __pyx_t_3) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":122
 * 
 *     @staticmethod
 *     def tanh(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tanh(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_31tanh, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_tanh, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":121
 *             raise TypeError("`x` or `k` has incorrect type.")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def tanh(Node x):
 *         return wrapNode(func_tanh(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_tanh, __pyx_t_2) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":126
 * 
 *     @staticmethod
 *     def sigmoid(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sigmoid(x.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_33sigmoid, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_sigmoid, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":125
 *         return wrapNode(func_tanh(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sigmoid(Node x):
 *         return wrapNode(func_sigmoid(x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sigmoid, __pyx_t_3) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":130
 * 
 *     @staticmethod
 *     def softplus(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softplus(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_35softplus, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_softplus, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":129
 *         return wrapNode(func_sigmoid(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def softplus(Node x):
 *         return wrapNode(func_softplus(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_softplus, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":134
 * 
 *     @staticmethod
 *     def sin(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_sin(x.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_37sin, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_sin, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":133
 *         return wrapNode(func_softplus(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sin(Node x):
 *         return wrapNode(func_sin(x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sin, __pyx_t_3) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":138
 * 
 *     @staticmethod
 *     def cos(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_cos(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_39cos, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_cos, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":137
 *         return wrapNode(func_sin(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def cos(Node x):
 *         return wrapNode(func_cos(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_cos, __pyx_t_2) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":142
 * 
 *     @staticmethod
 *     def tan(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_tan(x.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_41tan, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_tan, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":141
 *         return wrapNode(func_cos(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def tan(Node x):
 *         return wrapNode(func_tan(x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_tan, __pyx_t_3) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":146
 * 
 *     @staticmethod
 *     def relu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_relu(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_43relu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_relu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":145
 *         return wrapNode(func_tan(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def relu(Node x):
 *         return wrapNode(func_relu(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_relu, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":150
 * 
 *     @staticmethod
 *     def lrelu(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_lrelu(x.wrapped))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_45lrelu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_lrelu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":149
 *         return wrapNode(func_relu(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def lrelu(Node x):
 *         return wrapNode(func_lrelu(x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_lrelu, __pyx_t_3) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":154
 * 
 *     @staticmethod
 *     def prelu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_prelu(x.wrapped, a))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_47prelu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_prelu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":153
 *         return wrapNode(func_lrelu(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prelu(Node x, float a):
 *         return wrapNode(func_prelu(x.wrapped, a))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_prelu, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":158
 * 
 *     @staticmethod
 *     def elu(Node x, float a):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_elu(x.wrapped, a))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_49elu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_elu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":157
 *         return wrapNode(func_prelu(x.wrapped, a))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def elu(Node x, float a):
 *         return wrapNode(func_elu(x.wrapped, a))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_elu, __pyx_t_3) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":162
 * 
 *     @staticmethod
 *     def selu(Node x, float a, float s):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_selu(x.wrapped, a, s))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_51selu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_selu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":161
 *         return wrapNode(func_elu(x.wrapped, a))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def selu(Node x, float a, float s):
 *         return wrapNode(func_selu(x.wrapped, a, s))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_selu, __pyx_t_2) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":166
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_53sum, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_sum, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__73);

  /* "primitiv/_function.pyx":165
 *         return wrapNode(func_selu(x.wrapped, a, s))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sum(x, dim = None):
 *         cdef vector[CppNode] xs
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sum, __pyx_t_3) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":177
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppNode] xs
 *         cdef Node node
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_55mean, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_mean, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__76);

  /* "primitiv/_function.pyx":176
 *             return wrapNode(func_sum((<Node> x).wrapped, <unsigned> dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def mean(x, dim = None):
 *         cdef vector[CppNode] xs
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_mean, __pyx_t_2) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":188
 * 
 *     @staticmethod
 *     def broadcast(Node x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_57broadcast, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_broadcast, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":187
 *             return wrapNode(func_mean((<Node> x).wrapped, <unsigned> dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def broadcast(Node x, unsigned dim, unsigned size):
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_broadcast, __pyx_t_3) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":192
 * 
 *     @staticmethod
 *     def logsumexp(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_logsumexp(x.wrapped, dim))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_59logsumexp, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_logsumexp, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":191
 *         return wrapNode(func_broadcast(x.wrapped, dim, size))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def logsumexp(Node x, unsigned dim):
 *         return wrapNode(func_logsumexp(x.wrapped, dim))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_logsumexp, __pyx_t_2) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":196
 * 
 *     @staticmethod
 *     def log_softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_log_softmax(x.wrapped, dim))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_61log_softmax, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_log_softmax, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":195
 *         return wrapNode(func_logsumexp(x.wrapped, dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def log_softmax(Node x, unsigned dim):
 *         return wrapNode(func_log_softmax(x.wrapped, dim))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_log_softmax, __pyx_t_3) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":200
 * 
 *     @staticmethod
 *     def softmax(Node x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_softmax(x.wrapped, dim))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_63softmax, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_softmax, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":199
 *         return wrapNode(func_log_softmax(x.wrapped, dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def softmax(Node x, unsigned dim):
 *         return wrapNode(func_softmax(x.wrapped, dim))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_softmax, __pyx_t_2) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":204
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Node x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Node):
 *             return wrapNode(func_softmax_cross_entropy(x.wrapped, (<Node> t).wrapped, dim))
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_65softmax_cross_entropy, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_softmax_cross_entropy, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":203
 *         return wrapNode(func_softmax(x.wrapped, dim))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def softmax_cross_entropy(Node x, t, unsigned dim):
 *         if isinstance(t, Node):
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_softmax_cross_entropy, __pyx_t_3) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":213
 * 
 *     @staticmethod
 *     def stop_gradient(Node x):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_stop_gradient(x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_67stop_gradient, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_stop_gradient, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":212
 *             raise TypeError("`t` has incorrect type.")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def stop_gradient(Node x):
 *         return wrapNode(func_stop_gradient(x.wrapped))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_stop_gradient, __pyx_t_2) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":217
 * 
 *     @staticmethod
 *     def conv2d(Node x, Node w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_69conv2d, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_conv2d, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":216
 *         return wrapNode(func_stop_gradient(x.wrapped))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def conv2d(Node x, Node w,
 *                unsigned padding0, unsigned padding1,
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_conv2d, __pyx_t_3) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":227
 * 
 *     @staticmethod
 *     def max_pool2d(Node x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_71max_pool2d, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_max_pool2d, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":226
 *                                     dilation0, dilation1))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def max_pool2d(Node x,
 *                    unsigned window0, unsigned window1,
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_max_pool2d, __pyx_t_2) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":237
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_73constant, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_constant, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__95);

  /* "primitiv/_function.pyx":236
 *                                         stride0, stride1))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def constant(shape, float k, Device device = None, Graph graph = None):
 *         if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_constant, __pyx_t_3) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":246
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_75zeros, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_zeros, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__98);

  /* "primitiv/_function.pyx":245
 *                                            get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zeros(shape, Device device = None, Graph graph = None):
 *         if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_zeros, __pyx_t_2) < 0) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":255
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_77ones, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_ones, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__101);

  /* "primitiv/_function.pyx":254
 *                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def ones(shape, Device device = None, Graph graph = None):
 *         if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_ones, __pyx_t_3) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":264
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_79identity, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_identity, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__104);

  /* "primitiv/_function.pyx":263
 *                                        get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def identity(unsigned size, Device device = None, Graph graph = None):
 *         if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_identity, __pyx_t_2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":271
 *         return wrapNode(func_identity_node(size, get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *     class batch:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def sum(Node x):
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_batch, __pyx_n_s_functions_batch, (PyObject *) NULL, __pyx_n_s_primitiv__function, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":273
 *     class batch:
 *         @staticmethod
 *         def sum(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_5batch_1sum, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_batch_sum, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":272
 * 
 *     class batch:
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def sum(Node x):
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_sum, __pyx_t_4) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":277
 * 
 *         @staticmethod
 *         def mean(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_5batch_3mean, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_batch_mean, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "primitiv/_function.pyx":276
 *             return wrapNode(func_batch_sum[CppNode](x.wrapped))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def mean(Node x):
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_mean, __pyx_t_3) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":281
 * 
 *         @staticmethod
 *         def normalize(Node x):             # <<<<<<<<<<<<<<
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_5batch_5normalize, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_batch_normalize, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":280
 *             return wrapNode(func_batch_mean[CppNode](x.wrapped))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def normalize(Node x):
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_normalize, __pyx_t_4) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":271
 *         return wrapNode(func_identity_node(size, get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *     class batch:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def sum(Node x):
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_batch, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_batch, __pyx_t_4) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":284
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 * 
 *     class random:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_random, __pyx_n_s_functions_random, (PyObject *) NULL, __pyx_n_s_primitiv__function, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":286
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_1bernoulli, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_random_bernoulli, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__113);

  /* "primitiv/_function.pyx":285
 * 
 *     class random:
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):
 *             if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_bernoulli, __pyx_t_3) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":295
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_3uniform, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_random_uniform, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__116);

  /* "primitiv/_function.pyx":294
 *                                                        get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def uniform(shape, float lower, float upper, Device device = None, Graph graph = None):
 *             if device is None:
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_uniform, __pyx_t_4) < 0) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":304
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_5normal, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_random_normal, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__119);

  /* "primitiv/_function.pyx":303
 *                                                      get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_normal, __pyx_t_3) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":313
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_7log_normal, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_random_log_normal, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__122);

  /* "primitiv/_function.pyx":312
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def log_normal(shape, float mean, float sd, Device device = None, Graph graph = None):
 *             if device is None:
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_log_normal, __pyx_t_4) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":322
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_9gumbel, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_random_gumbel, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__125);

  /* "primitiv/_function.pyx":321
 *                                                         get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def gumbel(shape, float mu, float beta, Device device = None, Graph graph = None):
 *             if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_gumbel, __pyx_t_3) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":284
 *             return wrapNode(func_batch_normalize[CppNode](x.wrapped))
 * 
 *     class random:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None, Graph graph = None):
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_random, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_random, __pyx_t_3) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":331
 * 
 *     @staticmethod
 *     def dropout(Node x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return wrapNode(func_dropout(x.wrapped, rate, enabled))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_9functions_81dropout, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_functions_dropout, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":330
 *                                                     get_cpp_device(device), get_cpp_graph(graph)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def dropout(Node x, float rate, bool enabled):
 *         return wrapNode(func_dropout(x.wrapped, rate, enabled))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_dropout, __pyx_t_3) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":16
 * 
 * 
 * class functions:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_functions, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functions, __pyx_t_3) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "primitiv/_function.pyx":335
 * 
 * 
 * class tensor_functions:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_tensor_functions, __pyx_n_s_tensor_functions, (PyObject *) NULL, __pyx_n_s_primitiv__function, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "primitiv/_function.pyx":338
 * 
 *     @staticmethod
 *     def raw_input(shape, vector[float] data, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_1raw_input, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_raw_input, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__130);

  /* "primitiv/_function.pyx":337
 * class tensor_functions:
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def raw_input(shape, vector[float] data, Device device = None):
 *         if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_raw_input, __pyx_t_2) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":348
 *     # instead of a vector.
 *     @staticmethod
 *     def input(data, Device device = None):             # <<<<<<<<<<<<<<
 *         # NOTE(vbkaisetsu, odashi):
 *         # In this function, we don't check whether each ndarray is empty
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_3input, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_input, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__133);

  /* "primitiv/_function.pyx":347
 *     # This function takes an np.ndarray or a list of np.ndarray
 *     # instead of a vector.
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def input(data, Device device = None):
 *         # NOTE(vbkaisetsu, odashi):
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_input, __pyx_t_3) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":369
 * 
 *     @staticmethod
 *     def parameter(Parameter param):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_5parameter, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_parameter, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":368
 *         return tensor_functions.raw_input(shape, ndarrays_to_vector(data), device)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def parameter(Parameter param):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_parameter, __pyx_t_2) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":373
 * 
 *     @staticmethod
 *     def copy(Tensor x, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_7copy, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_copy, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__138);

  /* "primitiv/_function.pyx":372
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_parameter_tensor(param.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def copy(Tensor x, Device device = None):
 *         if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_copy, __pyx_t_3) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":379
 * 
 *     @staticmethod
 *     def pick(Tensor x, vector[unsigned] ids, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_9pick, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_pick, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":378
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_copy(x.wrapped[0], get_cpp_device(device))))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def pick(Tensor x, vector[unsigned] ids, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_pick, __pyx_t_2) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":383
 * 
 *     @staticmethod
 *     def slice(Tensor x, unsigned dim, unsigned lower, unsigned upper):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_11slice, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_slice, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":382
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_pick(x.wrapped[0], ids, dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def slice(Tensor x, unsigned dim, unsigned lower, unsigned upper):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_slice, __pyx_t_3) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":387
 * 
 *     @staticmethod
 *     def concat(xs, unsigned dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] vec
 *         cdef Tensor x
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_13concat, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_concat, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":386
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_slice(x.wrapped[0], dim, lower, upper)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def concat(xs, unsigned dim):
 *         cdef vector[CppTensor] vec
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_concat, __pyx_t_2) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":395
 * 
 *     @staticmethod
 *     def reshape(Tensor x, new_shape):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_15reshape, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_reshape, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":394
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_concat(vec, dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def reshape(Tensor x, new_shape):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_reshape, __pyx_t_3) < 0) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":399
 * 
 *     @staticmethod
 *     def flatten(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_17flatten, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_flatten, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":398
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_reshape(x.wrapped[0], normShape(new_shape).wrapped)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def flatten(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_flatten, __pyx_t_2) < 0) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":403
 * 
 *     @staticmethod
 *     def transpose(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_19transpose, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_transpose, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__150)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":402
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_flatten(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def transpose(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_transpose, __pyx_t_3) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":407
 * 
 *     @staticmethod
 *     def matmul(Tensor a, Tensor b):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_21matmul, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_matmul, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":406
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_transpose(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def matmul(Tensor a, Tensor b):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_matmul, __pyx_t_2) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":411
 * 
 *     @staticmethod
 *     def sqrt(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_23sqrt, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_sqrt, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":410
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_matmul(a.wrapped[0], b.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sqrt(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sqrt, __pyx_t_3) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":415
 * 
 *     @staticmethod
 *     def exp(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_25exp, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_exp, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":414
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sqrt(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def exp(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_exp, __pyx_t_2) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":419
 * 
 *     @staticmethod
 *     def log(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_27log, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_log, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":418
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_exp(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def log(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_log, __pyx_t_3) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":423
 * 
 *     @staticmethod
 *     def pow(x, k):             # <<<<<<<<<<<<<<
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_pown((<Tensor> x).wrapped[0], <int> k)))
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_29pow, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_pow, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":422
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def pow(x, k):
 *         if isinstance(x, Tensor) and isinstance(k, int) and -0x80000000 <= k <= 0x7fffffff:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_pow, __pyx_t_2) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":436
 * 
 *     @staticmethod
 *     def tanh(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_31tanh, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_tanh, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":435
 *             raise TypeError("`x` or `k` has incorrect type.")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def tanh(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_tanh, __pyx_t_3) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":440
 * 
 *     @staticmethod
 *     def sigmoid(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_33sigmoid, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_sigmoid, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":439
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tanh(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sigmoid(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sigmoid, __pyx_t_2) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":444
 * 
 *     @staticmethod
 *     def softplus(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_35softplus, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_softplus, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":443
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sigmoid(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def softplus(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_softplus, __pyx_t_3) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":448
 * 
 *     @staticmethod
 *     def sin(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_37sin, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_sin, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__168)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":447
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softplus(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sin(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sin, __pyx_t_2) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":452
 * 
 *     @staticmethod
 *     def cos(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_39cos, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_cos, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":451
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_sin(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def cos(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_cos, __pyx_t_3) < 0) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":456
 * 
 *     @staticmethod
 *     def tan(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_41tan, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_tan, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":455
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_cos(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def tan(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_tan, __pyx_t_2) < 0) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":460
 * 
 *     @staticmethod
 *     def relu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_43relu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_relu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__174)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":459
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_tan(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def relu(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_relu, __pyx_t_3) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":464
 * 
 *     @staticmethod
 *     def lrelu(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_45lrelu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_lrelu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__176)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":463
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_relu(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def lrelu(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_lrelu, __pyx_t_2) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":468
 * 
 *     @staticmethod
 *     def prelu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_47prelu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_prelu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":467
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_lrelu(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prelu(Tensor x, float a):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_prelu, __pyx_t_3) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":472
 * 
 *     @staticmethod
 *     def elu(Tensor x, float a):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_49elu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_elu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__180)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":471
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_prelu(x.wrapped[0], a)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def elu(Tensor x, float a):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_elu, __pyx_t_2) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":476
 * 
 *     @staticmethod
 *     def selu(Tensor x, float a, float s):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_51selu, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_selu, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__182)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":475
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_elu(x.wrapped[0], a)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def selu(Tensor x, float a, float s):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_selu, __pyx_t_3) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":480
 * 
 *     @staticmethod
 *     def sum(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_53sum, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_sum, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__184)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__185);

  /* "primitiv/_function.pyx":479
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_selu(x.wrapped[0], a, s)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sum(x, dim = None):
 *         cdef vector[CppTensor] xs
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_sum, __pyx_t_2) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":491
 * 
 *     @staticmethod
 *     def mean(x, dim = None):             # <<<<<<<<<<<<<<
 *         cdef vector[CppTensor] xs
 *         cdef Tensor t
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_55mean, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_mean, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__187)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__188);

  /* "primitiv/_function.pyx":490
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_sum((<Tensor> x).wrapped[0], <unsigned> dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def mean(x, dim = None):
 *         cdef vector[CppTensor] xs
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_mean, __pyx_t_3) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":502
 * 
 *     @staticmethod
 *     def broadcast(Tensor x, unsigned dim, unsigned size):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_57broadcast, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_broadcast, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__190)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":501
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_mean((<Tensor> x).wrapped[0], <unsigned> dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def broadcast(Tensor x, unsigned dim, unsigned size):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_broadcast, __pyx_t_2) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":506
 * 
 *     @staticmethod
 *     def logsumexp(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_59logsumexp, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_logsumexp, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__192)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":505
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_broadcast(x.wrapped[0], dim, size)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def logsumexp(Tensor x, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_logsumexp, __pyx_t_3) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":510
 * 
 *     @staticmethod
 *     def log_softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_61log_softmax, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_log_softmax, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__194)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":509
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_logsumexp(x.wrapped[0], dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def log_softmax(Tensor x, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_log_softmax, __pyx_t_2) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":514
 * 
 *     @staticmethod
 *     def softmax(Tensor x, unsigned dim):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_63softmax, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_softmax, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__196)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":513
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_log_softmax(x.wrapped[0], dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def softmax(Tensor x, unsigned dim):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_softmax, __pyx_t_3) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":518
 * 
 *     @staticmethod
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):             # <<<<<<<<<<<<<<
 *         if isinstance(t, Tensor):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_softmax_cross_entropy(x.wrapped[0], (<Tensor> t).wrapped[0], dim)))
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_65softmax_cross_entropy, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_softmax_cross_e, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__198)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":517
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_softmax(x.wrapped[0], dim)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def softmax_cross_entropy(Tensor x, t, unsigned dim):
 *         if isinstance(t, Tensor):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_softmax_cross_entropy, __pyx_t_2) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":527
 * 
 *     @staticmethod
 *     def stop_gradient(Tensor x):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_67stop_gradient, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_stop_gradient, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__200)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":526
 *             raise TypeError("`t` has incorrect type.")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def stop_gradient(Tensor x):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_stop_gradient, __pyx_t_3) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":531
 * 
 *     @staticmethod
 *     def conv2d(Tensor x, Tensor w,             # <<<<<<<<<<<<<<
 *                unsigned padding0, unsigned padding1,
 *                unsigned stride0, unsigned stride1,
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_69conv2d, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_conv2d, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__202)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":530
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_stop_gradient(x.wrapped[0])))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def conv2d(Tensor x, Tensor w,
 *                unsigned padding0, unsigned padding1,
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_conv2d, __pyx_t_2) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":541
 * 
 *     @staticmethod
 *     def max_pool2d(Tensor x,             # <<<<<<<<<<<<<<
 *                    unsigned window0, unsigned window1,
 *                    unsigned padding0, unsigned padding1,
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_71max_pool2d, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_max_pool2d, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__204)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":540
 *                                                                      dilation0, dilation1)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def max_pool2d(Tensor x,
 *                    unsigned window0, unsigned window1,
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_max_pool2d, __pyx_t_3) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":551
 * 
 *     @staticmethod
 *     def constant(shape, float k, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_73constant, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_constant, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__206)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__207);

  /* "primitiv/_function.pyx":550
 *                                                                          stride0, stride1)))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def constant(shape, float k, Device device = None):
 *         if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_constant, __pyx_t_2) < 0) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":558
 * 
 *     @staticmethod
 *     def zeros(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_75zeros, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_zeros, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__209)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__210);

  /* "primitiv/_function.pyx":557
 *                                                                               get_cpp_device(device))))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zeros(shape, Device device = None):
 *         if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_zeros, __pyx_t_3) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":565
 * 
 *     @staticmethod
 *     def ones(shape, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_77ones, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_ones, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__212)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__213);

  /* "primitiv/_function.pyx":564
 *                                                                            get_cpp_device(device))))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def ones(shape, Device device = None):
 *         if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_ones, __pyx_t_2) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":572
 * 
 *     @staticmethod
 *     def identity(unsigned size, Device device = None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_79identity, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_identity, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__215)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__216);

  /* "primitiv/_function.pyx":571
 *                                                                           get_cpp_device(device))))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def identity(unsigned size, Device device = None):
 *         if device is None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_identity, __pyx_t_3) < 0) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":577
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_identity_tensor(size, get_cpp_device(device))))
 * 
 *     class batch:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def sum(Tensor x):
 */
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_batch, __pyx_n_s_tensor_functions_batch, (PyObject *) NULL, __pyx_n_s_primitiv__function, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":579
 *     class batch:
 *         @staticmethod
 *         def sum(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_5batch_7sum, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_batch_sum, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__218)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":578
 * 
 *     class batch:
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def sum(Tensor x):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_sum, __pyx_t_4) < 0) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":583
 * 
 *         @staticmethod
 *         def mean(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_5batch_9mean, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_batch_mean, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__220)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "primitiv/_function.pyx":582
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_sum[CppTensor](x.wrapped[0])))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def mean(Tensor x):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_mean, __pyx_t_2) < 0) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":587
 * 
 *         @staticmethod
 *         def normalize(Tensor x):             # <<<<<<<<<<<<<<
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_5batch_11normalize, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_batch_normalize, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__222)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "primitiv/_function.pyx":586
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_mean[CppTensor](x.wrapped[0])))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def normalize(Tensor x):
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_normalize, __pyx_t_4) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":577
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_identity_tensor(size, get_cpp_device(device))))
 * 
 *     class batch:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def sum(Tensor x):
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_batch, __pyx_empty_tuple, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_batch, __pyx_t_4) < 0) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":590
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 * 
 *     class random:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):
 */
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_random, __pyx_n_s_tensor_functions_random, (PyObject *) NULL, __pyx_n_s_primitiv__function, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":592
 *     class random:
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_11bernoulli, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_random_bernoull, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__224)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__225);

  /* "primitiv/_function.pyx":591
 * 
 *     class random:
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def bernoulli(shape, float p, Device device = None):
 *             if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_bernoulli, __pyx_t_2) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":599
 * 
 *         @staticmethod
 *         def uniform(shape, float lower, float upper, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_13uniform, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_random_uniform, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__227)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__228);

  /* "primitiv/_function.pyx":598
 *                                                                                           get_cpp_device(device))))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def uniform(shape, float lower, float upper, Device device = None):
 *             if device is None:
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_uniform, __pyx_t_4) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":606
 * 
 *         @staticmethod
 *         def normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_15normal, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_random_normal, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__230)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__231);

  /* "primitiv/_function.pyx":605
 *                                                                                         get_cpp_device(device))))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def normal(shape, float mean, float sd, Device device = None):
 *             if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_normal, __pyx_t_2) < 0) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":613
 * 
 *         @staticmethod
 *         def log_normal(shape, float mean, float sd, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_17log_normal, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_random_log_norm, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__233)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__234);

  /* "primitiv/_function.pyx":612
 *                                                                                        get_cpp_device(device))))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def log_normal(shape, float mean, float sd, Device device = None):
 *             if device is None:
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_log_normal, __pyx_t_4) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "primitiv/_function.pyx":620
 * 
 *         @staticmethod
 *         def gumbel(shape, float mu, float beta, Device device = None):             # <<<<<<<<<<<<<<
 *             if device is None:
 *                 device = Device.get_default()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_6random_19gumbel, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_random_gumbel, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__236)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__237);

  /* "primitiv/_function.pyx":619
 *                                                                                            get_cpp_device(device))))
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def gumbel(shape, float mu, float beta, Device device = None):
 *             if device is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_gumbel, __pyx_t_2) < 0) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":590
 *             return Tensor.get_wrapper_with_new(new CppTensor(func_batch_normalize[CppTensor](x.wrapped[0])))
 * 
 *     class random:             # <<<<<<<<<<<<<<
 *         @staticmethod
 *         def bernoulli(shape, float p, Device device = None):
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_random, __pyx_empty_tuple, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "primitiv/_function.pyx":627
 * 
 *     @staticmethod
 *     def dropout(Tensor x, float rate, bool enabled):             # <<<<<<<<<<<<<<
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_dropout(x.wrapped[0], rate, enabled)))
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8primitiv_9_function_16tensor_functions_81dropout, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_tensor_functions_dropout, NULL, __pyx_n_s_primitiv__function, __pyx_d, ((PyObject *)__pyx_codeobj__239)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "primitiv/_function.pyx":626
 *                                                                                        get_cpp_device(device))))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def dropout(Tensor x, float rate, bool enabled):
 *         return Tensor.get_wrapper_with_new(new CppTensor(func_dropout(x.wrapped[0], rate, enabled)))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_dropout, __pyx_t_2) < 0) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "primitiv/_function.pyx":335
 * 
 * 
 * class tensor_functions:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_tensor_functions, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tensor_functions, __pyx_t_2) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "primitiv/_function.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init primitiv._function", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init primitiv._function");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
